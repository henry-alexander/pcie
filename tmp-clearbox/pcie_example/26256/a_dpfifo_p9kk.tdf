--a_dpfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Agilex 5" ENABLE_ECC="FALSE" LPM_NUMWORDS=32 LPM_SHOWAHEAD="OFF" lpm_width=38 lpm_widthu=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock data empty q rreq sclr usedw wreq ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="AGILEX" LOW_POWER_MODE="AUTO" lpm_hint="RAM_BLOCK_TYPE=MLAB"
--VERSION_BEGIN 23.4 cbx_altdpram 2023:12:13:21:31:55:SC cbx_altera_counter 2023:12:13:21:31:54:SC cbx_altera_syncram 2023:12:13:21:31:54:SC cbx_altera_syncram_ltm 2023:12:13:21:31:54:SC cbx_altera_syncram_nd_impl 2023:12:13:21:31:59:SC cbx_altsyncram 2023:12:13:21:31:54:SC cbx_fifo_common 2023:12:13:21:31:55:SC cbx_libertymesa 2023:12:13:21:31:55:SC cbx_lpm_add_sub 2023:12:13:21:31:55:SC cbx_lpm_compare 2023:12:13:21:31:59:SC cbx_lpm_counter 2023:12:13:21:31:54:SC cbx_lpm_decode 2023:12:13:21:31:54:SC cbx_lpm_mux 2023:12:13:21:31:59:SC cbx_mgl 2023:12:13:21:32:06:SC cbx_nadder 2023:12:13:21:31:55:SC cbx_scfifo 2023:12:13:21:31:55:SC cbx_stratix 2023:12:13:21:31:59:SC cbx_stratixii 2023:12:13:21:31:59:SC cbx_stratixiii 2023:12:13:21:31:59:SC cbx_stratixv 2023:12:13:21:31:55:SC cbx_util_mgl 2023:12:13:21:31:59:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the Intel FPGA Software License Subscription Agreements 
--  on the Quartus Prime software download page.


FUNCTION a_fefifo_4pck1 (aclr, clock, rreq, sclr, wreq)
RETURNS ( empty, full, usedw_out[4..0]);
FUNCTION altera_counter (clk, enable, reset, sreset, updown)
WITH ( DIRECTION, MODULUS, WIDTH = 6)
RETURNS ( count[WIDTH-1..0], cout);
FUNCTION altera_syncram_h3c4 (address_a[4..0], address_b[4..0], clock0, clock1, clocken1, data_a[37..0], wren_a)
RETURNS ( q_b[37..0]);

--synthesis_resources = altera_counter 2 lut 5 MLAB 2 reg 12 
SUBDESIGN a_dpfifo_p9kk
( 
	aclr	:	input;
	clock	:	input;
	data[37..0]	:	input;
	empty	:	output;
	q[37..0]	:	output;
	rreq	:	input;
	sclr	:	input;
	usedw[4..0]	:	output;
	wreq	:	input;
) 
VARIABLE 
	fifo_state : a_fefifo_4pck1;
	rd_ptr_count : altera_counter
		WITH (
			DIRECTION = "UP",
			WIDTH = 5
		);
	wr_ptr : altera_counter
		WITH (
			DIRECTION = "UP",
			WIDTH = 5
		);
	FIFOram : altera_syncram_h3c4;
	rd_ptr[4..0]	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;

BEGIN 
	fifo_state.aclr = aclr;
	fifo_state.clock = clock;
	fifo_state.rreq = rreq;
	fifo_state.sclr = sclr;
	fifo_state.wreq = wreq;
	rd_ptr_count.clk = clock;
	rd_ptr_count.enable = valid_rreq;
	rd_ptr_count.reset = aclr;
	rd_ptr_count.sreset = sclr;
	wr_ptr.clk = clock;
	wr_ptr.enable = valid_wreq;
	wr_ptr.reset = aclr;
	wr_ptr.sreset = sclr;
	FIFOram.address_a[] = wr_ptr.count[];
	FIFOram.address_b[] = ((! sclr) & rd_ptr[]);
	FIFOram.clock0 = clock;
	FIFOram.clock1 = clock;
	FIFOram.clocken1 = (valid_rreq # sclr);
	FIFOram.data_a[] = data[];
	FIFOram.wren_a = valid_wreq;
	empty = fifo_state.empty;
	q[] = FIFOram.q_b[];
	rd_ptr[] = rd_ptr_count.count[];
	usedw[] = fifo_state.usedw_out[];
	valid_rreq = (rreq & (! fifo_state.empty));
	valid_wreq = (wreq & (! fifo_state.full));
END;
--VALID FILE
