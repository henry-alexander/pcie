<?xml version="1.0" ?>
<!--Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and any partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details, at
https://fpgasoftware.intel.com/eula.-->
<ipxact:component xmlns:altera="http://www.altera.com/XMLSchema/IPXact2014/extensions" xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014">
  <ipxact:vendor>Intel Corporation</ipxact:vendor>
  <ipxact:library>pcie_ed_dut</ipxact:library>
  <ipxact:name>dut</ipxact:name>
  <ipxact:version>3.0.0</ipxact:version>
  <ipxact:busInterfaces>
    <ipxact:busInterface>
      <ipxact:name>refclk0</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="clock" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="clock" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>refclk0</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="clockRate" type="longint">
          <ipxact:name>clockRate</ipxact:name>
          <ipxact:displayName>Clock rate</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="externallyDriven" type="bit">
          <ipxact:name>externallyDriven</ipxact:name>
          <ipxact:displayName>Externally driven</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ptfSchematicName" type="string">
          <ipxact:name>ptfSchematicName</ipxact:name>
          <ipxact:displayName>PTF schematic name</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>i_syspll_c0_clk</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="clock" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="clock" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>i_syspll_c0_clk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="clockRate" type="longint">
          <ipxact:name>clockRate</ipxact:name>
          <ipxact:displayName>Clock rate</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="externallyDriven" type="bit">
          <ipxact:name>externallyDriven</ipxact:name>
          <ipxact:displayName>Externally driven</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ptfSchematicName" type="string">
          <ipxact:name>ptfSchematicName</ipxact:name>
          <ipxact:displayName>PTF schematic name</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>i_ss_vccl_syspll_locked</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>o_pll_lock</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>i_ss_vccl_syspll_locked</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>i_flux_clk</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>i_flux_clk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>hip_serial</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_n_in0</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_n_in0</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_p_in0</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_p_in0</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_n_out0</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_n_out0</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_p_out0</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_p_out0</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_n_in1</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_n_in1</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_p_in1</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_p_in1</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_n_out1</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_n_out1</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_p_out1</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_p_out1</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_n_in2</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_n_in2</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_p_in2</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_p_in2</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_n_out2</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_n_out2</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_p_out2</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_p_out2</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_n_in3</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_n_in3</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rx_p_in3</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rx_p_in3</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_n_out3</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_n_out3</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tx_p_out3</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>tx_p_out3</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>pin_perst_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pin_perst_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>NONE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>i_gpio_perst0_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>i_gpio_perst0_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>NONE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>coreclkout_hip_toapp</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="clock" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="clock" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>coreclkout_hip_toapp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedDirectClock" type="string">
          <ipxact:name>associatedDirectClock</ipxact:name>
          <ipxact:displayName>Associated direct clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="clockRate" type="longint">
          <ipxact:name>clockRate</ipxact:name>
          <ipxact:displayName>Clock rate</ipxact:displayName>
          <ipxact:value>350000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="clockRateKnown" type="bit">
          <ipxact:name>clockRateKnown</ipxact:name>
          <ipxact:displayName>Clock rate known</ipxact:displayName>
          <ipxact:value>true</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="externallyDriven" type="bit">
          <ipxact:name>externallyDriven</ipxact:name>
          <ipxact:displayName>Externally driven</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ptfSchematicName" type="string">
          <ipxact:name>ptfSchematicName</ipxact:name>
          <ipxact:displayName>PTF schematic name</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_pin_perst_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_pin_perst_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedDirectReset" type="string">
          <ipxact:name>associatedDirectReset</ipxact:name>
          <ipxact:displayName>Associated direct reset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedResetSinks" type="string">
          <ipxact:name>associatedResetSinks</ipxact:name>
          <ipxact:displayName>Associated reset sinks</ipxact:displayName>
          <ipxact:value>none</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>NONE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_reset_status_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_reset_status_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>coreclkout_hip_toapp</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedDirectReset" type="string">
          <ipxact:name>associatedDirectReset</ipxact:name>
          <ipxact:displayName>Associated direct reset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedResetSinks" type="string">
          <ipxact:name>associatedResetSinks</ipxact:name>
          <ipxact:displayName>Associated reset sinks</ipxact:displayName>
          <ipxact:value>none</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>BOTH</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ninit_done</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ninit_done</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>NONE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_axi_st_clk</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="clock" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="clock" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_axi_st_clk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="clockRate" type="longint">
          <ipxact:name>clockRate</ipxact:name>
          <ipxact:displayName>Clock rate</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="externallyDriven" type="bit">
          <ipxact:name>externallyDriven</ipxact:name>
          <ipxact:displayName>Externally driven</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ptfSchematicName" type="string">
          <ipxact:name>ptfSchematicName</ipxact:name>
          <ipxact:displayName>PTF schematic name</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_axi_lite_clk</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="clock" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="clock" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_axi_lite_clk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="clockRate" type="longint">
          <ipxact:name>clockRate</ipxact:name>
          <ipxact:displayName>Clock rate</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="externallyDriven" type="bit">
          <ipxact:name>externallyDriven</ipxact:name>
          <ipxact:displayName>Externally driven</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ptfSchematicName" type="string">
          <ipxact:name>ptfSchematicName</ipxact:name>
          <ipxact:displayName>PTF schematic name</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_axi_st_areset_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_axi_st_areset_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>DEASSERT</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_axi_lite_areset_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_axi_lite_areset_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_lite_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>DEASSERT</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_subsystem_cold_rst_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_subsystem_cold_rst_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>NONE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_subsystem_warm_rst_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="reset" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="reset" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reset_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_subsystem_warm_rst_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="synchronousEdges" type="string">
          <ipxact:name>synchronousEdges</ipxact:name>
          <ipxact:displayName>Synchronous edges</ipxact:displayName>
          <ipxact:value>NONE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_subsystem_cold_rst_ack_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>subsystem_cold_rst_ack_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_subsystem_cold_rst_ack_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_subsystem_warm_rst_ack_n</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>subsystem_warm_rst_ack_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_subsystem_warm_rst_ack_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_subsystem_rst_req</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>subsystem_rst_req</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_subsystem_rst_req</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_subsystem_rst_rdy</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>subsystem_rst_rdy</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_subsystem_rst_rdy</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_initiate_warmrst_req</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>initiate_warmrst_req</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_initiate_warmrst_req</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_initiate_rst_req_rdy</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>initiate_rst_req_rdy</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_initiate_rst_req_rdy</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_st_rx</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_rx_tvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_st_rx_tready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_rx_tdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tkeep</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_rx_tkeep</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tlast</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_rx_tlast</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>Associated reset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_st_tx</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_st_tx_tvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_tx_tready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_st_tx_tdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tkeep</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_st_tx_tkeep</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tlast</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_st_tx_tlast</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>Associated reset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_st_ctrlshadow</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_ctrlshadow_tvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_ctrlshadow_tdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>Associated reset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_st_txcrdt</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_txcrdt_tvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_txcrdt_tdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>Associated reset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_st_cplto</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="axi4stream" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_cplto_tvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>tdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_st_cplto_tdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master></ipxact:master>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>Associated clock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>Associated reset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_lite_csr</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_awvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_awvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_awready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_awready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_awaddr</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_awaddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_wvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_wvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_wready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_wready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_wdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_wdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_wstrb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_wstrb</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_bvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_bvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_bready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_bready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_bresp</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_bresp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_arvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_arvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_arready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_arready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_araddr</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_araddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_rvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_rvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_app_ss_lite_csr_rready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_lite_csr_rready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_rdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_rdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>p0_ss_app_lite_csr_rresp</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_lite_csr_rresp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave>
        <ipxact:memoryMapRef memoryMapRef="p0_lite_csr"></ipxact:memoryMapRef>
      </ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_ss_app_serr</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ss_app_serr</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_serr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_ss_app_dlup</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ss_app_dlup</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_dlup</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_ss_app_linkup</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ss_app_linkup</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_linkup</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_ss_app_surprise_down_err</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ss_app_surprise_down_err</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_surprise_down_err</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_ss_app_ltssmstate</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ss_app_ltssmstate</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_ss_app_ltssmstate</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value>p0_axi_st_clk</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value>p0_axi_st_areset_n</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>p0_app_ss_st_rx_tuser_halt</ipxact:name>
      <ipxact:busType vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:busType>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="intel" library="intel" name="conduit" version="23.4"></ipxact:abstractionRef>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>app_ss_st_rx_tuser_halt</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>p0_app_ss_st_rx_tuser_halt</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave></ipxact:slave>
      <ipxact:parameters>
        <ipxact:parameter parameterId="associatedClock" type="string">
          <ipxact:name>associatedClock</ipxact:name>
          <ipxact:displayName>associatedClock</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="associatedReset" type="string">
          <ipxact:name>associatedReset</ipxact:name>
          <ipxact:displayName>associatedReset</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="prSafe" type="bit">
          <ipxact:name>prSafe</ipxact:name>
          <ipxact:displayName>Partial Reconfiguration Safe</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </ipxact:busInterface>
  </ipxact:busInterfaces>
  <ipxact:memoryMaps>
    <ipxact:memoryMap>
      <ipxact:name>p0_lite_csr</ipxact:name>
      <ipxact:addressBlock>
        <ipxact:name>u_hipif__u_pciess_cfg_if__u_pciess_hia_csr__pciess_hia_csr_block</ipxact:name>
        <ipxact:baseAddress>0x0</ipxact:baseAddress>
        <ipxact:range>0x13028</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>register</ipxact:usage>
        <ipxact:access>read-write</ipxact:access>
        <ipxact:register>
          <ipxact:name>Subsystem_Version</ipxact:name>
          <ipxact:displayName>Subsystem_Version</ipxact:displayName>
          <ipxact:description>The register indicates Subsystem major and minor version.</ipxact:description>
          <ipxact:addressOffset>0x0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>major_version_number</ipxact:name>
            <ipxact:displayName>major_version_number</ipxact:displayName>
            <ipxact:description>Indicates Major Version Number.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0100</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>minor_version_number</ipxact:name>
            <ipxact:displayName>minor_version_number</ipxact:displayName>
            <ipxact:description>Indicates Minor Version Number.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Subsystem_Features</ipxact:name>
          <ipxact:displayName>Subsystem_Features</ipxact:displayName>
          <ipxact:description>The register indicates features enabled in subsystem during compile time.</ipxact:description>
          <ipxact:addressOffset>0x4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>axi_st_packing_scheme_mode</ipxact:name>
            <ipxact:displayName>axi_st_packing_scheme_mode</ipxact:displayName>
            <ipxact:description>AXI-ST Header and Data Packing Scheme. 
                                00 - Simple Packing. 
                                01 - Variable Header Position. 
                                10 - Compact Packing. 
                                11 - reserved.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_st_support_mode</ipxact:name>
            <ipxact:displayName>axi_st_support_mode</ipxact:displayName>
            <ipxact:description>Multiple AXI Stream Support. 
                                000 - Single Stream Present. 
                                001 - Two Stream Present. 
                                All Others - Reserved.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>msix_table_mode</ipxact:name>
            <ipxact:displayName>msix_table_mode</ipxact:displayName>
            <ipxact:description>Indicates presence of MSIX Table in a design. 
                                0 - MSIX Table not Present. 
                                1 - MSIX Table Present.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>device_att_mode</ipxact:name>
            <ipxact:displayName>device_att_mode</ipxact:displayName>
            <ipxact:description>Indicates presence of Device ATT Table in a design. 
                                0 - Device ATT not Present. 
                                1 - Device ATT Present.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>debug_toolkit_mode</ipxact:name>
            <ipxact:displayName>debug_toolkit_mode</ipxact:displayName>
            <ipxact:description>Indicates presence of Debug Toolkit block in a design. 
                                0 - Debug Toolkit not Present . 
                                1 - Debug Toolkit Present.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sep_mode</ipxact:name>
            <ipxact:displayName>sep_mode</ipxact:displayName>
            <ipxact:description>Indicates presence of SEP block in a design. 
                               0 - SEP not Present. 
                                1 - SEP Present.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>functional_mode</ipxact:name>
            <ipxact:displayName>functional_mode</ipxact:displayName>
            <ipxact:description>Reflects Functional Mode parameter value. 
                                00 - Power User Mode. 
                                01 - AXI-ST Data Mover Mode. 
                                10 - AXI-MM Data Mover Mode. 
                                11 - Reserved.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Subsystem_Interface_Attributes</ipxact:name>
          <ipxact:displayName>Subsystem_Interface_Attributes</ipxact:displayName>
          <ipxact:description>The register indicates subsystem interface attributes setting during compile time.</ipxact:description>
          <ipxact:addressOffset>0x8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>axi_mm_burst_length</ipxact:name>
            <ipxact:displayName>axi_mm_burst_length</ipxact:displayName>
            <ipxact:description>Indicates AXI-MM Interface Burst Length. 
                                The supported burst length = 2 power (number in this field).</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_mm_data_width</ipxact:name>
            <ipxact:displayName>axi_mm_data_width</ipxact:displayName>
            <ipxact:description>Indicates AXI-MM Interface Width. 
                                000 - 32 bits. 
                                001 - 64 Bits. 
                                010 - 128 Bits. 
                                011 - 256 Bits. 
                                100 - 512 Bits. 
                                101 - 1024 Bits. 
                               All others - Reserved.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_lite_data_width</ipxact:name>
            <ipxact:displayName>axi_lite_data_width</ipxact:displayName>
            <ipxact:description>Indicates AXI-Lite Interface Width. 
                                000 - 32 bits. 
                                001 - 64 Bits. 
                                All others - Reserved.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_st_data_width</ipxact:name>
            <ipxact:displayName>axi_st_data_width</ipxact:displayName>
            <ipxact:description>Indicates AXI-ST Interface Width. 
                                000 - 32 bits. 
                                001 - 64 Bits. 
                                010 - 128 Bits. 
                                011 - 256 Bits. 
                                100 - 512 Bits. 
                                101 - 1024 Bits. 
                                All others - Reserved.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_mm_ready_latency</ipxact:name>
            <ipxact:displayName>axi_mm_ready_latency</ipxact:displayName>
            <ipxact:description>Reflects AXI-MM Initiator Interface ready_latency setting.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_lite_ready_latency</ipxact:name>
            <ipxact:displayName>axi_lite_ready_latency</ipxact:displayName>
            <ipxact:description>Reflects AXI-Lite Initiator Interface ready_latency setting.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>axi_st_ready_latency</ipxact:name>
            <ipxact:displayName>axi_st_ready_latency</ipxact:displayName>
            <ipxact:description>Reflects AXI-ST Initiator Interface ready_latency setting.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ERROR_GEN_CTRL</ipxact:name>
          <ipxact:displayName>ERROR_GEN_CTRL</ipxact:displayName>
          <ipxact:description>Error Generation Control. 
                       If header and prefix logging is required then user must set the ERROR GEN CTRL register after Header and Prefix registers are populated with required information.</ipxact:description>
          <ipxact:addressOffset>0x10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of function reporting an error.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_number</ipxact:name>
            <ipxact:displayName>vf_number</ipxact:displayName>
            <ipxact:description>Indicates VF Number of function reporting an error. 
                               Note: Valid only when VF Active is set.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates PF Number of function reporting an error.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_active</ipxact:name>
            <ipxact:displayName>vf_active</ipxact:displayName>
            <ipxact:description>Indicates error reporting function is Virtual Function.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>log_prefix</ipxact:name>
            <ipxact:displayName>log_prefix</ipxact:displayName>
            <ipxact:description>If prefix logging is required, this bit must be set. 
                               The prefix must be supplied using Prefix Register. 
                               Note: TLP Prefix error logging feature is not available for VF related errors (since AER is not supported for VF)</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>log_header</ipxact:name>
            <ipxact:displayName>log_header</ipxact:displayName>
            <ipxact:description>If header logging is required, this bit must be set. 
                               The header must be supplied using Header Register. 
                               Note: Header error logging feature is not available for VF related errors (since AER is not supported for VF)</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>error_gen_trigger</ipxact:name>
            <ipxact:displayName>error_gen_trigger</ipxact:displayName>
            <ipxact:description>This bit will trigger Error Handling based on application error attributes at ERROR GEN ATTR, ERROR GEN Header DWn and ERROR GEN TLP Prefix registers. 
                               Hence this bit should only be set once the error attributes are programmed with the correct attributes. 
                               Once this bit is set, the error attributes shouldnt be changed until the operation is completed. 
                               The Sub-System will utilize the application error mechanism* to instruct HIP/SEP to handle these application errors. 
                               It will clear this bit when the requested operation is complete. 
                               Note: *When paired with HIP that is not capable of generating error messages for VF, PCIe SS (in Data Mover mode) will generate these VF related error messages instead.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ERROR_GEN_ATTR</ipxact:name>
          <ipxact:displayName>ERROR_GEN_ATTR</ipxact:displayName>
          <ipxact:description>Error Generation Attribute. 
                       When ERROR GEN CTRL operation is triggered and pending, the ERROR GEN ATTR shouldnt be programmed with new error values, otherwise newly updated error(s) might not be treated as new errors.</ipxact:description>
          <ipxact:addressOffset>0x14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>poisoned_tlp_egress_blocked_error</ipxact:name>
            <ipxact:displayName>poisoned_tlp_egress_blocked_error</ipxact:displayName>
            <ipxact:description>This bit should be set when an Application layer detected a Poisoned TLP Egress Blocked error. 
                               The Sub-System responds to this by sending a Fatal or Non-Fatal Error message to the Root Complex, depending on the severity of the Poison TLP Egress Blocked error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>mc_blocked_tlp_error</ipxact:name>
            <ipxact:displayName>mc_blocked_tlp_error</ipxact:displayName>
            <ipxact:description>This bit should be set when an Application layer detected a MC Blocked TLP error. 
                               The Sub-System responds to this by sending a Fatal or Non-Fatal Error message to the Root Complex, depending on the severity of the MC Blocked TLP error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_violation_error</ipxact:name>
            <ipxact:displayName>acs_violation_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has encountered ACS Violation error. 
                               The Sub-System also sends a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the ACS Violation error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tlp_prefix_blocked_error</ipxact:name>
            <ipxact:displayName>tlp_prefix_blocked_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has encountered TLP Prefix Blocked error. 
                               The Sub-System also sends a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the TLP Prefix Blocked error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>corrected_internal_error</ipxact:name>
            <ipxact:displayName>corrected_internal_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has corrected an internal error. 
                               The Sub-System also sends a Correctable Error message to the Root Complex (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>uncorrectable_internal_error</ipxact:name>
            <ipxact:displayName>uncorrectable_internal_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has encountered Uncorrectable Internal error. 
                               The Sub-System also sends a Fatal or Non-Fatal Error message to the Root Complex, depending on the severity of the Uncorrectable Internal error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>atomicop_egress_blocked_error</ipxact:name>
            <ipxact:displayName>atomicop_egress_blocked_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has encountered AtomicOp Egress Blocked error. 
                               The Sub-System also sends a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the AtomicOp Egress Blocked error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ecrc_check_failed_error</ipxact:name>
            <ipxact:displayName>ecrc_check_failed_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has detected ECRC Check Failed error. 
                               The Sub-System also sends a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the ECRC Check Failed error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked). 
                               Note: Not supported in this QPDS release.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>poisoned_tlp_received_error</ipxact:name>
            <ipxact:displayName>poisoned_tlp_received_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has treated a request as poisoned. 
                               The Sub-System also sends a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the Poisoned TLP Received error programmed in the AER Uncorrectable Error Severity Register of the Function (if not masked).</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>unsupported_request_error</ipxact:name>
            <ipxact:displayName>unsupported_request_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has treated a request as an Unsupported Request. 
                               The Sub-System also sends a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the Unsupported Request error programmed in the AER Uncorrectable Error Severity Register of the Function.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>completion_timeout_error</ipxact:name>
            <ipxact:displayName>completion_timeout_error</ipxact:displayName>
            <ipxact:description>This bit should be set when a master-like interface has transmitted a Non-Posted request that never receives a corresponding Completion from the link and the error is not correctable. 
                               The Sub-System responds to this by sending a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the Completion Timeout error programmed in the AER Uncorrectable Error Severity Register of the Function.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>completer_abort_error</ipxact:name>
            <ipxact:displayName>completer_abort_error</ipxact:displayName>
            <ipxact:description>This bit should be set when Application Layer has treated a request as a Completer Abort (CA). 
                               The Sub-System responds to this by sending a Fatal or Non-Fatal/Correctable Error message to the Root Complex, depending on the severity of the Completer Abort error programmed in the AER Uncorrectable Error Severity Register of the Function.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>unexpected_completion_error</ipxact:name>
            <ipxact:displayName>unexpected_completion_error</ipxact:displayName>
            <ipxact:description>This bit should be set when an Application Layer master block detects an unexpected Completion. 
                               The Sub-System responds to this by sending a Fatal or Correctable Error message to the Root Complex, depending on the severity of the Unexpected Completion Received error programmed in the AER Uncorrectable Error Severity Register of the Function.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>advisory</ipxact:name>
            <ipxact:displayName>advisory</ipxact:displayName>
            <ipxact:description>Indicates application error (if applicable) is an advisory error. 
                               Examples when application can assert this are. 
                                - Treating a poisoned TLP as normal TLP. 
                                - Detected Completion Timeout but intends to resend the request. 
                                - Returning UR completion for a request that is treated as Unsupported Request. 
                                - Returning CA completion for a request that is treated as Completer Abort. 
                                - Receiving an unexpected completion.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Header_DW0</ipxact:name>
          <ipxact:displayName>Header_DW0</ipxact:displayName>
          <ipxact:description>This register holds PCIE TLP Header DW0 information of error packet reported using ERROR GEN CTRL register.</ipxact:description>
          <ipxact:addressOffset>0x18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_dw0</ipxact:name>
            <ipxact:displayName>header_dw0</ipxact:displayName>
            <ipxact:description>Holds TLP Header DWORD 0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Header_DW1</ipxact:name>
          <ipxact:displayName>Header_DW1</ipxact:displayName>
          <ipxact:description>This register holds PCIE TLP Header DW1 information of error packet reported using ERROR GEN CTRL register.</ipxact:description>
          <ipxact:addressOffset>0x1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_dw1</ipxact:name>
            <ipxact:displayName>header_dw1</ipxact:displayName>
            <ipxact:description>Holds TLP Header DWORD 1.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Header_DW2</ipxact:name>
          <ipxact:displayName>Header_DW2</ipxact:displayName>
          <ipxact:description>This register holds PCIE TLP Header DW2 information of error packet reported using ERROR GEN CTRL register.</ipxact:description>
          <ipxact:addressOffset>0x20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_dw2</ipxact:name>
            <ipxact:displayName>header_dw2</ipxact:displayName>
            <ipxact:description>Holds TLP Header DWORD 2.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Header_DW3</ipxact:name>
          <ipxact:displayName>Header_DW3</ipxact:displayName>
          <ipxact:description>This register holds PCIE TLP Header DW3 information of error packet reported using ERROR GEN CTRL register.</ipxact:description>
          <ipxact:addressOffset>0x24</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_dw3</ipxact:name>
            <ipxact:displayName>header_dw3</ipxact:displayName>
            <ipxact:description>Holds TLP Header DWORD 3.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Prefix</ipxact:name>
          <ipxact:displayName>Prefix</ipxact:displayName>
          <ipxact:description>This register holds PCIE TLP Header Prefix information of error packet reported using ERROR GEN CTRL register. 
                       When ERROR GEN CTRL operation is triggered and pending, the ERROR GEN TLP Prefix shouldnt be programmed with new values, otherwise wrong TLP Prefix values might be used.</ipxact:description>
          <ipxact:addressOffset>0x28</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tlp_prefix</ipxact:name>
            <ipxact:displayName>tlp_prefix</ipxact:displayName>
            <ipxact:description>Holds TLP Prefix information of the reported error packet.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HOT_PLUG_GEN_CTRL</ipxact:name>
          <ipxact:displayName>HOT_PLUG_GEN_CTRL</ipxact:displayName>
          <ipxact:description>Hot Plug Generation Control Register.</ipxact:description>
          <ipxact:addressOffset>0x2c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of Function. 
                               Generating Hot Plug Even.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>electromechanical_interlock_status</ipxact:name>
            <ipxact:displayName>electromechanical_interlock_status</ipxact:displayName>
            <ipxact:description>Indicates whether the system electromechanical interlock is engaged. 
                               0 - Electromechanical Interlock Disengaged. 
                               1 - Electromechanical Interlock Engaged.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>presence_detect_state</ipxact:name>
            <ipxact:displayName>presence_detect_state</ipxact:displayName>
            <ipxact:description>Presence Detect State. 
                               0 - Slot Empty. 
                               1 - Adaptor Present.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>mrl_sensor_state</ipxact:name>
            <ipxact:displayName>mrl_sensor_state</ipxact:displayName>
            <ipxact:description>This bit reports the status of the MRL sensor. 
                               0 - MRL Closed. 
                               1 - MRL Open.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>data_link_layer_state_change</ipxact:name>
            <ipxact:displayName>data_link_layer_state_change</ipxact:displayName>
            <ipxact:description>Indicates the state of Data Link Layer Link Active bit of the Link Status register is changed. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>command_completed</ipxact:name>
            <ipxact:displayName>command_completed</ipxact:displayName>
            <ipxact:description>Indicates that the Hot Plug controller completed a command. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>presence_detect_changed</ipxact:name>
            <ipxact:displayName>presence_detect_changed</ipxact:displayName>
            <ipxact:description>Indicates that the state of the card presence detector has changed. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>mrl_sensor_changed</ipxact:name>
            <ipxact:displayName>mrl_sensor_changed</ipxact:displayName>
            <ipxact:description>Indicates that the state of the MRL sensor has changed. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>power_fault_detection</ipxact:name>
            <ipxact:displayName>power_fault_detection</ipxact:displayName>
            <ipxact:description>Indicates the power controller detected a power fault at this slot. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>attention_button_pressed</ipxact:name>
            <ipxact:displayName>attention_button_pressed</ipxact:displayName>
            <ipxact:description>Indicates that the system attention button was pressed. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>POWER_MANAGEMENT_CTRL</ipxact:name>
          <ipxact:displayName>POWER_MANAGEMENT_CTRL</ipxact:displayName>
          <ipxact:description>Power Management Control Register.</ipxact:description>
          <ipxact:addressOffset>0x30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates PF Number of Function generating PME. 
                               Note: Current QPDS release limits to max 8 PFs only.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hot_reset_req</ipxact:name>
            <ipxact:displayName>hot_reset_req</ipxact:displayName>
            <ipxact:description>The Application Layer set this bit to request a hot reset to downstream devices. 
                                The subsystem pass on this request to HIP block and clears this bit when the request is passed.
                                Note: Only applicable in Root Port Mode.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>autonomous_pm_enter_l23</ipxact:name>
            <ipxact:displayName>autonomous_pm_enter_l23</ipxact:displayName>
            <ipxact:description>The controller sends PM_Enter_L23 in response to PM_Turn_Off.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x0</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pm_ready_enter_l23</ipxact:name>
            <ipxact:displayName>pm_ready_enter_l23</ipxact:displayName>
            <ipxact:description>Indication from application that it is ready to enter the L23 state. 
                               The controller sends PM_Enter_L23 in response to PM_Turn_Off when this bit is set. 
                               Application that do not require this feature hardware inirialize bit[3]. 
                               If bit[3] is set this bit is dont care from hardware point of view. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_turnoff_message_gen</ipxact:name>
            <ipxact:displayName>pme_turnoff_message_gen</ipxact:displayName>
            <ipxact:description>Only Available in RC Mode. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_message_gen</ipxact:name>
            <ipxact:displayName>pme_message_gen</ipxact:displayName>
            <ipxact:description>Wake Up. 
                               If PME is enabled and PME support is configured for current PMCSR D-state asserting this signal will cause the controller to wake from either L1 or L2 state. 
                               When the controller has transitioned back to the L0 state it will transmit a PME message and set the PME_Status. 
                               Upon receiving the PME message the root complex should clear the PME_Status and change the D-state back to D0. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>LEGACY_INTERRUPT_CTRL</ipxact:name>
          <ipxact:displayName>LEGACY_INTERRUPT_CTRL</ipxact:displayName>
          <ipxact:description>Legacy Interrupt Control Register.</ipxact:description>
          <ipxact:addressOffset>0x34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates PF Number of Function generating Assert or Deassert message. 
                               Note: Current QPDS release limits to max 8 PFs only.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>deassert_message</ipxact:name>
            <ipxact:displayName>deassert_message</ipxact:displayName>
            <ipxact:description>The application sets this bit when it want to send de-assert message. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>assert_message</ipxact:name>
            <ipxact:displayName>assert_message</ipxact:displayName>
            <ipxact:description>The application sets this bit when it want to send assert message. 
                               The subsystem pass on this information to HIP/SEP block and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSI_CTRL</ipxact:name>
          <ipxact:displayName>MSI_CTRL</ipxact:displayName>
          <ipxact:description>The subsystem reads MSIX address and Data information from table pointed by vector number in this register and generates MSIX interrupt. 
                       The subsystem implements one MSIX GEN CTRL register for each end point in a system.</ipxact:description>
          <ipxact:addressOffset>0xb8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of function generating Interrupt.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_active</ipxact:name>
            <ipxact:displayName>vf_active</ipxact:displayName>
            <ipxact:description>Indicates Virtual Function is generating Interrupt.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_number</ipxact:name>
            <ipxact:displayName>vf_number</ipxact:displayName>
            <ipxact:description>Indicates Virtual Function Number of Interrupt.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates Physical Function Number of Interrupt. 
                               Note: Current QPDS release limits to max 8 PFs only.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>msi_interrupt_gen</ipxact:name>
            <ipxact:displayName>msi_interrupt_gen</ipxact:displayName>
            <ipxact:description>Writing '1' to this bit Triggers Interrupt. 
                               Write to this bit is ignored if bit is already set. 
                               The subsystem generates interrupt and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSI_ADDRESS_LOWER</ipxact:name>
          <ipxact:displayName>MSI_ADDRESS_LOWER</ipxact:displayName>
          <ipxact:description>MSI Lower Address Register</ipxact:description>
          <ipxact:addressOffset>0xbc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>msi_address_lower</ipxact:name>
            <ipxact:displayName>msi_address_lower</ipxact:displayName>
            <ipxact:description>Indicates lower 32 bits of MSI Address.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSI_ADDRESS_UPPER</ipxact:name>
          <ipxact:displayName>MSI_ADDRESS_UPPER</ipxact:displayName>
          <ipxact:description>MSI Upper Address Register</ipxact:description>
          <ipxact:addressOffset>0xc0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>msi_address_upper</ipxact:name>
            <ipxact:displayName>msi_address_upper</ipxact:displayName>
            <ipxact:description>Indicates upper 32 bits of MSI Address.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSI_DATA</ipxact:name>
          <ipxact:displayName>MSI_DATA</ipxact:displayName>
          <ipxact:description>MSI Data Register</ipxact:description>
          <ipxact:addressOffset>0xc4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>msi_data</ipxact:name>
            <ipxact:displayName>msi_data</ipxact:displayName>
            <ipxact:description>Indicates Data to be sent with MSI command.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CFG_REG_IA_CTRL</ipxact:name>
          <ipxact:displayName>CFG_REG_IA_CTRL</ipxact:displayName>
          <ipxact:description>The details of configuration register indirect access control register.</ipxact:description>
          <ipxact:addressOffset>0xc8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>register_address</ipxact:name>
            <ipxact:displayName>register_address</ipxact:displayName>
            <ipxact:description>DWORD Address of Register.
				For each PF/VF, the address range starts from 0x0.
				For Misc HIP register access, addressing is as per HIP address map</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x3fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>byte_enable</ipxact:name>
            <ipxact:displayName>byte_enable</ipxact:displayName>
            <ipxact:description>Indicates Byte Enables of Write Operations. 
                                4'b0001: Write byte 0. 
                                4'b0010: Write byte 1. 
                                4'b0100: Write byte 2. 
                                4'b1000: Write byte 3. 
                                4'b1111: Write all bytes. 
                                Any Combinations of byte enables are valid, e.g 1010, 1011 etc.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>access_type</ipxact:name>
            <ipxact:displayName>access_type</ipxact:displayName>
            <ipxact:description>Indicates access type of operation. 
                               0 - Read Operation. 
                               1 - Write Operation</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>initiate_access</ipxact:name>
            <ipxact:displayName>initiate_access</ipxact:displayName>
            <ipxact:description>This bit should be set when a master-like interface wants to read from or write to PCIe configuration space register. 
                               The Sub-System performs read or write operation to a function pointed by IA_FN_NUM register when this bit is set and clears this bit indicating requested operation is complete. 
                               Master cannot initiate new transaction if this bit is set.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CFG_REG_IA_FN_NUM</ipxact:name>
          <ipxact:displayName>CFG_REG_IA_FN_NUM</ipxact:displayName>
          <ipxact:description>This register points to the function number of configuration register master is accessing through indirect access mechanism.</ipxact:description>
          <ipxact:addressOffset>0xcc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>The slot Number of register access.
				This field is Don't Care for Function Type = 010</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_number</ipxact:name>
            <ipxact:displayName>vf_number</ipxact:displayName>
            <ipxact:description>The VF Number of register access.
				This field is Don't Care for Function type = 010</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>The PF Number of register access. 
                                Note: Current QPDS release limits to max 8 PFs only, 
				This field is Don't Care for Function Type = 010</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>function_type</ipxact:name>
            <ipxact:displayName>function_type</ipxact:displayName>
            <ipxact:description>000 - Indicates Access Physical Function. 
                                001 - Indicates Access Virtual Function.
				010 - Indicates Access to user accessible Miscellaneous HIP registers. 
                               All others - Reserved.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CFG_REG_IA_FN_WRDATA</ipxact:name>
          <ipxact:displayName>CFG_REG_IA_FN_WRDATA</ipxact:displayName>
          <ipxact:description>This register points to the function number of configuration register master is accessing through indirect access mechanism.</ipxact:description>
          <ipxact:addressOffset>0xd0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>write_data</ipxact:name>
            <ipxact:displayName>write_data</ipxact:displayName>
            <ipxact:description>Data to be written into configuration register with write access. 
                               Master writes this register with required Data before Initiating Write Access.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CFG_REG_IA_FN_RDDATA</ipxact:name>
          <ipxact:displayName>CFG_REG_IA_FN_RDDATA</ipxact:displayName>
          <ipxact:description>This register holds read data from read operation initiated by master using indirect acces mechanism.</ipxact:description>
          <ipxact:addressOffset>0xd4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>read_data</ipxact:name>
            <ipxact:displayName>read_data</ipxact:displayName>
            <ipxact:description>Data read from configuration register with read access. 
                               Master reads this register after read operation completion indicated by Initiate Access bit in CFG IA CTRL register.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>PRS_CTRL</ipxact:name>
          <ipxact:displayName>PRS_CTRL</ipxact:displayName>
          <ipxact:description>Page Request Sercive Control. 
                       The subsystem generates Page Request Service (PRS) events to the QHIP based on the settings of this PRS CTRL register. 
                       Note: Usage of this control registers are applicable only when operating as Endpoint and with TLP Bypass disabled</ipxact:description>
          <ipxact:addressOffset>0xd8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of function generating Interrupt.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>stopped</ipxact:name>
            <ipxact:displayName>stopped</ipxact:displayName>
            <ipxact:description>Indicate that the function has completed all previously issued page requests and that it has stopped requests for additional pages. 
                                Only valid when the PRS enable bit is clear.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>unexpected_pg_req_index</ipxact:name>
            <ipxact:displayName>unexpected_pg_req_index</ipxact:displayName>
            <ipxact:description>Indicate that the function has received a response with Unexpected Page Request Group Index.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>response_failure</ipxact:name>
            <ipxact:displayName>response_failure</ipxact:displayName>
            <ipxact:description>Indicate that the function has received a PRG response failure.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates Physical Function Number of the PRS event 
                                Note: Current QPDS release limits to max 8 PFs only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen_prs_event</ipxact:name>
            <ipxact:displayName>gen_prs_event</ipxact:displayName>
            <ipxact:description>Writing '1' to this bit triggers PRS event. 
                                Write to this bit is ignored if bit is already set. 
                                The subsystem generates PRS event and clears this bit indicating requested operation complete.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSI_PENDING_CTRL</ipxact:name>
          <ipxact:displayName>MSI_PENDING_CTRL</ipxact:displayName>
          <ipxact:description>The application layer uses both MSI PENDING CTRL and MSI PENDING registers to update the MSI Pending Bits for each function.</ipxact:description>
          <ipxact:addressOffset>0xdc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of the update request.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_active</ipxact:name>
            <ipxact:displayName>vf_active</ipxact:displayName>
            <ipxact:description>Indicates Virtual Function is the targert of the update request.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_number</ipxact:name>
            <ipxact:displayName>vf_number</ipxact:displayName>
            <ipxact:description>Indicates Virtual Function Number of the update request.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates Physical Function Number of the update request. 
                                Note: Current QPDS release limits to max 8 PFs only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>update_msi_pending_bits</ipxact:name>
            <ipxact:displayName>update_msi_pending_bits</ipxact:displayName>
            <ipxact:description>Writing '1' to this bit causes an update to the MSI Pending Bits based on MSI PENDING value. 
                                Write to this bit is ignored if bit is already set. 
                                The subsystem clears this bit indicating the requested update is complete.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSI_PENDING_REG</ipxact:name>
          <ipxact:displayName>MSI_PENDING_REG</ipxact:displayName>
          <ipxact:description>MSI Pending Register.</ipxact:description>
          <ipxact:addressOffset>0xe0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>msi_pending_reg</ipxact:name>
            <ipxact:displayName>msi_pending_reg</ipxact:displayName>
            <ipxact:description>Indicates MSI Pending Bits value to be updated.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DSTATE_STS</ipxact:name>
          <ipxact:displayName>DSTATE_STS</ipxact:displayName>
          <ipxact:description>The application layer can use this register to obtain the D-State values of each function. 
                        It should write appropriate values to the PF Number, VF Number, VF Active and Slot Number first before issuing a read to obtain the D-State value of the corresponding function.</ipxact:description>
          <ipxact:addressOffset>0xe4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>dstate_value</ipxact:name>
            <ipxact:displayName>dstate_value</ipxact:displayName>
            <ipxact:description>Power Management D-State for each function per PF, VF, VF Active and Slot Number settings above.
                                0000: Uninitialized or Invalid
                                0001: D0
                                0010: D1
                                0100: D2
                                1000: D3</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of function generating Interrupt.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_active</ipxact:name>
            <ipxact:displayName>vf_active</ipxact:displayName>
            <ipxact:description>Indicates Virtual Function is generating Interrupt.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vf_number</ipxact:name>
            <ipxact:displayName>vf_number</ipxact:displayName>
            <ipxact:description>Indicates Virtual Function Number of Interrupt</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates Physical Function Number of Interrupt
                                Note: Current QPDS release limits to max 8 PFs only.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CFG_RETRY_CTRL</ipxact:name>
          <ipxact:displayName>CFG_RETRY_CTRL</ipxact:displayName>
          <ipxact:description>The application layer can use this register to update the per PF Config Retry Status Enable controls (CRS En Controls) driven to the HardIP Controller/SEP. 
                        All VFs will share the same control as their parent PF. When the corresponding PF's CRS En Control is asserted, HardIP Controller/SEP will respond to Configuration TLPs with a CRS (Config Retry Status) if it has not already responded to a Configuration TLP with non-CRS status since the last reset. User can use this to hold off on enumeration.
                        Note:	This register control allows the application layer to update 8 PFs at one time. If more than 8 PFs are used, the application layer needs to perform multiple updates by changing the PF Index field to point to the respective 8 PFs.
                        Note:	PCIe SS's parameter (CRS_EN_DEFAULT_VAL) will determine the default value of all the CRS En Controls driven to the HardIP Controller/SEP.</ipxact:description>
          <ipxact:addressOffset>0xe8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>crs_enable_control_value</ipxact:name>
            <ipxact:displayName>crs_enable_control_value</ipxact:displayName>
            <ipxact:description>Application can write to this register to drive crs enable to assert or deassert when update CRS En Control toggles.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates up-to 8 Physical Functions (one-hot) of the CRS En Controls to be updated.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_index</ipxact:name>
            <ipxact:displayName>pf_index</ipxact:displayName>
            <ipxact:description>Indicates which 8 Physical Functions of the CRS En Controls to be updated
                                00 - PF7:PF0
                                01 - PF15:PF8
                                10 - PF23:PF16
                                11 - PF31:PF24
                                Note: Current QPDS release limits to max 8 PFs only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>slot_number</ipxact:name>
            <ipxact:displayName>slot_number</ipxact:displayName>
            <ipxact:description>Indicates Slot Number of the CRS En Controls to be updated.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>update_crs_en_ctrl</ipxact:name>
            <ipxact:displayName>update_crs_en_ctrl</ipxact:displayName>
            <ipxact:description>Writing '1' to this bit causes the subsystem to update the corresponding CRS En Controls indicated by Slot Number, PF Index and PF Number.
                                The subsystem clears this bit when the update is complete.
                                Write to this bit is ignored if bit is already set.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>BUS_NUMBER</ipxact:name>
          <ipxact:displayName>BUS_NUMBER</ipxact:displayName>
          <ipxact:description>The application layer can use this register to obtain the bus number of each function. 
                        The default value of PF Number field is 0 which indicates PF 0, the bus number field will reflect bus number of PF 0 by default and will set Bus Number Valid to '1' when content of Bus Number is valid.
                        To obtain bus number of particular function, the application will update PF Number field with required function number. 
                        In response SS will update  bus number field with bus number of that function. Application must check the Bus Number Valid field to determine the validity of requested information. 
                        Application must not change the PF Number field before obtaining result for previous request, failure to do so may result into erroneous result</ipxact:description>
          <ipxact:addressOffset>0xec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bus_number</ipxact:name>
            <ipxact:displayName>bus_number</ipxact:displayName>
            <ipxact:description>Bus Number.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bus_number_valid</ipxact:name>
            <ipxact:displayName>bus_number_valid</ipxact:displayName>
            <ipxact:description>1.	Bus Number Field has valid information for requested function 
                                2.	This field will be cleared by SS when application writes this register.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pf_number</ipxact:name>
            <ipxact:displayName>pf_number</ipxact:displayName>
            <ipxact:description>Indicates Physical Function Number of request
                                Note: Current QPDS release limits to max 8 PFs only.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HIP_Status</ipxact:name>
          <ipxact:displayName>HIP_Status</ipxact:displayName>
          <ipxact:description>Hard IP Status Rgister</ipxact:description>
          <ipxact:addressOffset>0x400</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pnp_fifo_overflow</ipxact:name>
            <ipxact:displayName>pnp_fifo_overflow</ipxact:displayName>
            <ipxact:description>Indicates Overflow condition of P/NP FIFO in Data Mover block.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reordering_buffer_overflow</ipxact:name>
            <ipxact:displayName>reordering_buffer_overflow</ipxact:displayName>
            <ipxact:description>Indicates Overflow condition of Reordering Buffer in Data Mover block.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hip_buffer_overflow</ipxact:name>
            <ipxact:displayName>hip_buffer_overflow</ipxact:displayName>
            <ipxact:description>Indicates HIP Buffer Overflow Issue.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hip_in_error_mode</ipxact:name>
            <ipxact:displayName>hip_in_error_mode</ipxact:displayName>
            <ipxact:description>HIP Entered in Error Mode. 
                                0 - Normal Operation. 
                                1 - RAM ECC Error Detected by HIP.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pld_ready_indication</ipxact:name>
            <ipxact:displayName>pld_ready_indication</ipxact:displayName>
            <ipxact:description>HIP PLD Interface Ready Indication. 
                                0 - HIP PLD Interface not Ready. 
                                1 - HIP PLD Interface Ready.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hip_in_user_mode</ipxact:name>
            <ipxact:displayName>hip_in_user_mode</ipxact:displayName>
            <ipxact:description>User Mode. 
                                0 - HIP is in non user mode. 
                                1 - HIP in User Mode.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ltssm_state_indication</ipxact:name>
            <ipxact:displayName>ltssm_state_indication</ipxact:displayName>
            <ipxact:description>Indicates LTSSM State. 
                                6'h00: S_DETECT_QUIET. 
                                6'h01: S_DETECT_ACT. 
                                6'h02: S_POLL_ACTIVE. 
                                6'h03: S_POLL_COMPLIANCE. 
                                6'h04: S_POLL_CONFIG. 
                                6'h05: S_PRE_DETECT_QUIET. 
                                6'h06: S_DETECT_WAIT. 
                                6'h07: S_CFG_LINKWD_START. 
                                6'h08: S_CFG_LINKWD_ACCEPT. 
                                6'h09: S_CFG_LANENUM_WAIT. 
                                6'h0A: S_CFG_LANENUM_ACCEPT. 
                                6'h0B: S_CFG_COMPLETE. 
                                6'h0C: S_CFG_IDLE. 
                                6'h0D: S_RCVRY_LOCK. 
                                6'h0E: S_RCVRY_SPEED. 
                                6'h0F: S_RCVRY_RCVRCFG. 
                                6'h10: S_RCVRY_IDLE. 
                                6'h11: S_L0. 
                                6'h12: S_L0S. 
                                6'h13: S_L123_SEND_EIDLE. 
                                6'h14: S_L1_IDLE. 
                                6'h15: S_L2_IDLE. 
                                6'h16: S_L2_WAKE. 
                                6'h17: S_DISABLED_ENTRY. 
                                6'h18: S_DISABLED_IDLE. 
                                6'h19: S_DISABLED. 
                                6'h1A: S_LPBK_ENTRY. 
                                6'h1B: S_LPBK_ACTIVE. 
                                6'h1C: S_LPBK_EXIT. 
                                6'h1D: S_LPBK_EXIT_TIMEOUT. 
                                6'h1E: S_HOT_RESET_ENTRY. 
                                6'h1F: S_HOT_RESET. 
                                6'h20: S_RCVRY_EQ0. 
                                6'h21: S_RCVRY_EQ1. 
                                6'h22: S_RCVRY_EQ2. 
                                6'h23: S_RCVRY_EQ3.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>data_link_layer_active_indication</ipxact:name>
            <ipxact:displayName>data_link_layer_active_indication</ipxact:displayName>
            <ipxact:description>Data Link Layer Active Indication. 
                                0 - DL not Active. 
                                1 - DL Active.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>link_up_indication</ipxact:name>
            <ipxact:displayName>link_up_indication</ipxact:displayName>
            <ipxact:description>Link Up Indication. 
                                0 - Link Down. 
                                1 - Link up.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HIP_BP_CYCLES</ipxact:name>
          <ipxact:displayName>HIP_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because hip transmit interface was not ready to accept transaction.</ipxact:description>
          <ipxact:addressOffset>0x42c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HIA_BP_CYCLES</ipxact:name>
          <ipxact:displayName>HIA_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because hip interface adaptor transmit interface was not ready to accept transactions.</ipxact:description>
          <ipxact:addressOffset>0x430</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DM_BP_CYCLES</ipxact:name>
          <ipxact:displayName>DM_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because C2H transmit interface was not ready to accept transactions from application logic.</ipxact:description>
          <ipxact:addressOffset>0x434</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DMRD_BP_CYCLES</ipxact:name>
          <ipxact:displayName>DMRD_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because C2H read transmit interface was not ready to accept transaction from application logic.</ipxact:description>
          <ipxact:addressOffset>0x438</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow, cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>APP_BP_CYCLES</ipxact:name>
          <ipxact:displayName>APP_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because application logic connected to H2C block was not ready to accept transactions.</ipxact:description>
          <ipxact:addressOffset>0x43c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow, cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HIA_RX_BP_CYCLES</ipxact:name>
          <ipxact:displayName>HIA_RX_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because hip interface adaptor receive interface was not ready to accept transactions.</ipxact:description>
          <ipxact:addressOffset>0x440</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow, cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DM_RX_BP_CYCLES</ipxact:name>
          <ipxact:displayName>DM_RX_BP_CYCLES</ipxact:displayName>
          <ipxact:description>The register indicates back pressure cycles observed because C2H receive inteface was not ready to accept transactions from HIA logic.</ipxact:description>
          <ipxact:addressOffset>0x444</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>overflow_indication</ipxact:name>
            <ipxact:displayName>overflow_indication</ipxact:displayName>
            <ipxact:description>Indicates Overflow, cycle count reach 32'h7FFFFFFFF.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>back_pressure_cycle_count</ipxact:name>
            <ipxact:displayName>back_pressure_cycle_count</ipxact:displayName>
            <ipxact:description>Back Pressure Cycle Count.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>PM_STATE</ipxact:name>
          <ipxact:displayName>PM_STATE</ipxact:displayName>
          <ipxact:description>Power Management State</ipxact:description>
          <ipxact:addressOffset>0x450</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>pm_state</ipxact:name>
            <ipxact:displayName>pm_state</ipxact:displayName>
            <ipxact:description>Indicate the current power state.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IP_ERROR</ipxact:name>
          <ipxact:displayName>IP_ERROR</ipxact:displayName>
          <ipxact:description>IP error</ipxact:description>
          <ipxact:addressOffset>0x458</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_st_tlp_abort_1</ipxact:name>
            <ipxact:displayName>rx_st_tlp_abort_1</ipxact:displayName>
            <ipxact:description>By default, the PCIe Hard IP drops an errored TLP (a malformed TLP, or a TLP with an ECRC error or tag/requester ID (RID) mismatches). 
                               The PCIe Hard IP asserts rx_st_tlp_abort_o to notify the application an errored TLP has been dropped.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rx_st_tlp_abort_0</ipxact:name>
            <ipxact:displayName>rx_st_tlp_abort_0</ipxact:displayName>
            <ipxact:description>By default, the PCIe Hard IP drops an errored TLP (a malformed TLP, or a TLP with an ECRC error or tag/requester ID (RID) mismatches). 
                               The PCIe Hard IP asserts rx_st_tlp_abort_o to notify the application an errored TLP has been dropped.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tx_parity_error</ipxact:name>
            <ipxact:displayName>tx_parity_error</ipxact:displayName>
            <ipxact:description>When asserted, indicates a parity error in the PCIe Hard IP TX data path.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rx_parity_error</ipxact:name>
            <ipxact:displayName>rx_parity_error</ipxact:displayName>
            <ipxact:description>Indicates there is a parity error in the PCIe Hard IP RX data path.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>surprise_down_error</ipxact:name>
            <ipxact:displayName>surprise_down_error</ipxact:displayName>
            <ipxact:description>Asserted when a surprise down event is occurring in the controller.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>serr_out</ipxact:name>
            <ipxact:displayName>serr_out</ipxact:displayName>
            <ipxact:description>This is the system error detected signal. 
                               RP mode: A one-clock-cycle pulse on this signal occurs if any device in the system's hierarchy reports any of the following errors and the associated enable bit is set in the Root Control register: ERR_COR, ERR_FATAL, ERR_NONFATAL. 
                               This signal is also asserted when an internal error is detected. 
                               The source of the error is logged in the Root Port Error Status registers in the Port Configuration and Status registers. 
                               EP mode: The P-Tile IP core asserts this signal when the PCIe Hard IP sends a message of correctable/nonfatal/fatal error.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>INTERRUPT_STATUS</ipxact:name>
          <ipxact:displayName>INTERRUPT_STATUS</ipxact:displayName>
          <ipxact:description>Interrupt Status</ipxact:description>
          <ipxact:addressOffset>0x45c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>int_status</ipxact:name>
            <ipxact:displayName>int_status</ipxact:displayName>
            <ipxact:description>These signals drive legacy interrupts to the Application Layer in Root Port mode. 
                               The source of the interrupt will be logged in the Root Port Interrupt Status registers in the Port Configuration and Status registers.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>PERFMON_CTRL</ipxact:name>
          <ipxact:displayName>PERFMON_CTRL</ipxact:displayName>
          <ipxact:description>The register controls various performance monitor counters in subsystem.</ipxact:description>
          <ipxact:addressOffset>0x800</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>counting_duration</ipxact:name>
            <ipxact:displayName>counting_duration</ipxact:displayName>
            <ipxact:description>Counting Duration in seconds. 
                                9'h000 - No Limit. 
                                9'h001 - 1 seconds. 
                                9'h002 - 2 seconds. 
                                 . 
                                9'h1FF - 511 seconds.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>clear_counters</ipxact:name>
            <ipxact:displayName>clear_counters</ipxact:displayName>
            <ipxact:description>Clear Counters. 
                               1 - Clears all performance counters in a system. 
                               0 - No effect.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>global_enable</ipxact:name>
            <ipxact:displayName>global_enable</ipxact:displayName>
            <ipxact:description>Global Enable. 
                               1 - Turn On All Performance Counters. 
                               0 - Turn Off All Performance Counters.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_MRD_TLP</ipxact:name>
          <ipxact:displayName>TX_MRD_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of memory read TLPs transmitted by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x804</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_mem_rd_tlp_num</ipxact:name>
            <ipxact:displayName>tx_mem_rd_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Memory Read TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_MWR_TLP</ipxact:name>
          <ipxact:displayName>TX_MWR_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of memory write TLPs transmitted by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x808</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_mem_wr_tlp_num</ipxact:name>
            <ipxact:displayName>tx_mem_wr_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Memory Write TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_MSG_TLP</ipxact:name>
          <ipxact:displayName>TX_MSG_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of message TLPs transmitted by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x80c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_msg_wr_tlp_num</ipxact:name>
            <ipxact:displayName>tx_msg_wr_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Message Write TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_CFGWR_TLP</ipxact:name>
          <ipxact:displayName>TX_CFGWR_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of configuration write TLPs transmitted by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x810</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_cfg_wr_tlp_num</ipxact:name>
            <ipxact:displayName>tx_cfg_wr_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Configuration Write TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_CFGRD_TLP</ipxact:name>
          <ipxact:displayName>TX_CFGRD_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of configuration read TLPs transmitted by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x814</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_cfg_rd_tlp_num</ipxact:name>
            <ipxact:displayName>tx_cfg_rd_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Configuration Read TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_MRD_TLP</ipxact:name>
          <ipxact:displayName>RX_MRD_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of memory read TLPs received by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x818</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_mem_rd_tlp_num</ipxact:name>
            <ipxact:displayName>rx_mem_rd_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Memory Read TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_MWR_TLP</ipxact:name>
          <ipxact:displayName>RX_MWR_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of memory write TLPs received by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x81c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_mem_wr_tlp_num</ipxact:name>
            <ipxact:displayName>rx_mem_wr_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Memory Write TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_MSG_TLP</ipxact:name>
          <ipxact:displayName>RX_MSG_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of message TLPs received by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x820</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_msg_wr_tlp_num</ipxact:name>
            <ipxact:displayName>rx_msg_wr_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Message Write TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_CFGWR_TLP</ipxact:name>
          <ipxact:displayName>RX_CFGWR_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of configuration write TLPs received by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x824</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_cfg_wr_tlp_num</ipxact:name>
            <ipxact:displayName>rx_cfg_wr_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Configuration Write TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_CFGRD_TLP</ipxact:name>
          <ipxact:displayName>RX_CFGRD_TLP</ipxact:displayName>
          <ipxact:description>The register indicates number of configuration read TLPs received by subsystem.</ipxact:description>
          <ipxact:addressOffset>0x828</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_cfg_rd_tlp_num</ipxact:name>
            <ipxact:displayName>rx_cfg_rd_tlp_num</ipxact:displayName>
            <ipxact:description>Number of Configuration Read TLPs.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_MEM_DATA</ipxact:name>
          <ipxact:displayName>TX_MEM_DATA</ipxact:displayName>
          <ipxact:description>The register indicates data transmitted by a subsystem for memory write operation.</ipxact:description>
          <ipxact:addressOffset>0x82c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_mem_data_byte</ipxact:name>
            <ipxact:displayName>tx_mem_data_byte</ipxact:displayName>
            <ipxact:description>Bytes Transferred. 
                                32'h00000000 - No bytes. 
                                32'h00000001 - 1 KB. 
                                32'h00000002 - 2 KB. 
                                 . 
                                32'hFFFFFFFF - 4 TB.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>TX_CPL_DATA</ipxact:name>
          <ipxact:displayName>TX_CPL_DATA</ipxact:displayName>
          <ipxact:description>The register indicates completion data transmitted by a subsystem.</ipxact:description>
          <ipxact:addressOffset>0x830</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tx_cpl_data_byte</ipxact:name>
            <ipxact:displayName>tx_cpl_data_byte</ipxact:displayName>
            <ipxact:description>Bytes Transferred. 
                                32'h00000000 - No bytes. 
                                32'h00000001 - 1 KB. 
                                32'h00000002 - 2 KB. 
                                 . 
                                32'hFFFFFFFF - 4 TB.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_MEM_DATA</ipxact:name>
          <ipxact:displayName>RX_MEM_DATA</ipxact:displayName>
          <ipxact:description>The register indicates data received by a subsystem for memory write operation.</ipxact:description>
          <ipxact:addressOffset>0x834</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_mem_data_byte</ipxact:name>
            <ipxact:displayName>rx_mem_data_byte</ipxact:displayName>
            <ipxact:description>Bytes Transferred. 
                                32'h00000000 - No bytes. 
                                32'h00000001 - 1 KB. 
                                32'h00000002 - 2 KB. 
                                 . 
                                32'hFFFFFFFF - 4 TB.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RX_CPL_DATA</ipxact:name>
          <ipxact:displayName>RX_CPL_DATA</ipxact:displayName>
          <ipxact:description>The register indicates completion data received by a subsystem.</ipxact:description>
          <ipxact:addressOffset>0x838</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rx_cpl_data_byte</ipxact:name>
            <ipxact:displayName>rx_cpl_data_byte</ipxact:displayName>
            <ipxact:description>Bytes Transferred. 
                                32'h00000000 - No bytes. 
                                32'h00000001 - 1 KB. 
                                32'h00000002 - 2 KB. 
                                 . 
                                32'hFFFFFFFF - 4 TB.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_DFH_LOWER</ipxact:name>
          <ipxact:displayName>X_FEATURE_DFH_LOWER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_DFH_LOWER.</ipxact:description>
          <ipxact:addressOffset>0x13000</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>next_dfh_byte_offset_lower</ipxact:name>
            <ipxact:displayName>next_dfh_byte_offset_lower</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_NEXT_BYTE_OFFSET.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dfh_major_version_no_field</ipxact:name>
            <ipxact:displayName>dfh_major_version_no_field</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_MAJOR_VER.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>feature_id</ipxact:name>
            <ipxact:displayName>feature_id</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_FID.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_DFH_UPPER</ipxact:name>
          <ipxact:displayName>X_FEATURE_DFH_UPPER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_DFH_UPPER.</ipxact:description>
          <ipxact:addressOffset>0x13004</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>feature_type</ipxact:name>
            <ipxact:displayName>feature_type</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_FEATURE_TYPE.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dfh_version</ipxact:name>
            <ipxact:displayName>dfh_version</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_VER.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dfh_minor_revision</ipxact:name>
            <ipxact:displayName>dfh_minor_revision</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_MINOR_REV.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>end_of_list</ipxact:name>
            <ipxact:displayName>end_of_list</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_END, if true set to '1' else set to '0'.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_dfh_byte_offset_upper</ipxact:name>
            <ipxact:displayName>next_dfh_byte_offset_upper</ipxact:displayName>
            <ipxact:description>Set by GUI Parameter DFH_NEXT_BYTE_OFFSET.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_GUID_L_LOWER</ipxact:name>
          <ipxact:displayName>X_FEATURE_GUID_L_LOWER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_GUID_L_LOWER.</ipxact:description>
          <ipxact:addressOffset>0x13008</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>lower_64b_of_guid_lower</ipxact:name>
            <ipxact:displayName>lower_64b_of_guid_lower</ipxact:displayName>
            <ipxact:description>Set by invisible GUI parameter.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xdf63cd30</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_GUID_L_UPPER</ipxact:name>
          <ipxact:displayName>X_FEATURE_GUID_L_UPPER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_GUID_L_UPPER.</ipxact:description>
          <ipxact:addressOffset>0x1300c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>lower_64b_of_guid_upper</ipxact:name>
            <ipxact:displayName>lower_64b_of_guid_upper</ipxact:displayName>
            <ipxact:description>Set by invisible GUI parameter.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x9fc421cd</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_GUID_H_LOWER</ipxact:name>
          <ipxact:displayName>X_FEATURE_GUID_H_LOWER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_GUID_H_LOWER.</ipxact:description>
          <ipxact:addressOffset>0x13010</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>upper_64b_of_guid_lower</ipxact:name>
            <ipxact:displayName>upper_64b_of_guid_lower</ipxact:displayName>
            <ipxact:description>Set by invisible GUI parameter.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x33684a28</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_GUID_H_UPPER</ipxact:name>
          <ipxact:displayName>X_FEATURE_GUID_H_UPPER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_GUID_H_UPPER.</ipxact:description>
          <ipxact:addressOffset>0x13014</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>upper_64b_of_guid_upper</ipxact:name>
            <ipxact:displayName>upper_64b_of_guid_upper</ipxact:displayName>
            <ipxact:description>Set by invisible GUI parameter.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb5632d82</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_CSR_ADDR_LOWER</ipxact:name>
          <ipxact:displayName>X_FEATURE_CSR_ADDR_LOWER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_CSR_ADDR_LOWER.</ipxact:description>
          <ipxact:addressOffset>0x13018</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_addr_lower</ipxact:name>
            <ipxact:displayName>csr_addr_lower</ipxact:displayName>
            <ipxact:description>set to 60h.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000060</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>address</ipxact:name>
            <ipxact:displayName>address</ipxact:displayName>
            <ipxact:description>0- Relative Address
                                1 - Absolute Address
                                Set to 0b.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_CSR_ADDR_UPPER</ipxact:name>
          <ipxact:displayName>X_FEATURE_CSR_ADDR_UPPER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_CSR_ADDR_UPPER.</ipxact:description>
          <ipxact:addressOffset>0x1301c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_addr_upper</ipxact:name>
            <ipxact:displayName>csr_addr_upper</ipxact:displayName>
            <ipxact:description>set to 60h.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_CSR_SIZE_GROUP_LOWER</ipxact:name>
          <ipxact:displayName>X_FEATURE_CSR_SIZE_GROUP_LOWER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_CSR_SIZE_GROUP_LOWER.</ipxact:description>
          <ipxact:addressOffset>0x13020</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>param_exists_or_not</ipxact:name>
            <ipxact:displayName>param_exists_or_not</ipxact:displayName>
            <ipxact:description>set to 0b.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>grp_features_n_interfaces</ipxact:name>
            <ipxact:displayName>grp_features_n_interfaces</ipxact:displayName>
            <ipxact:description>set to 0h.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x7fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>inst_id</ipxact:name>
            <ipxact:displayName>inst_id</ipxact:displayName>
            <ipxact:description>Set by GUI parameter INST_ID.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>X_FEATURE_CSR_SIZE_GROUP_UPPER</ipxact:name>
          <ipxact:displayName>X_FEATURE_CSR_SIZE_GROUP_UPPER</ipxact:displayName>
          <ipxact:description>DFH CSR - X_FEATURE_CSR_SIZE_GROUP_UPPER.</ipxact:description>
          <ipxact:addressOffset>0x13024</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_size</ipxact:name>
            <ipxact:displayName>csr_size</ipxact:displayName>
            <ipxact:description>set to 0h.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>pcie_ctrltop_x4_u0__pcie_ctl_x4_u0__u_core4__u_ip__u_cfg__u_cfg_port_regs__u_sm_hssi_pcie_cfg_port_csr__sm_hssi_pcie_cfg_port_csr_block</ipxact:name>
        <ipxact:description>Configuration and status registers for PCIE Port module are defined in this register map.</ipxact:description>
        <ipxact:baseAddress>0x14000</ipxact:baseAddress>
        <ipxact:range>0x280</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>register</ipxact:usage>
        <ipxact:access>read-write</ipxact:access>
        <ipxact:register>
          <ipxact:name>reset_ctrl_0</ipxact:name>
          <ipxact:description>Reset Control 0</ipxact:description>
          <ipxact:addressOffset>0x0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x1fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_write_mask_ctl</ipxact:name>
            <ipxact:description>mask to enable avmm warm reset</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0x3ffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>18</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>reset_ctrl_1</ipxact:name>
          <ipxact:description>Reset Control 1</ipxact:description>
          <ipxact:addressOffset>0x4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_rstctl_timer_a</ipxact:name>
            <ipxact:description>reset timer for core_rst_n after ip_rst_n</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_rstctl_timer_b</ipxact:name>
            <ipxact:description>timer for delaying warm reset rdy, one count stands for 16clk</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_wait_pld_warm_rst_rdy</ipxact:name>
            <ipxact:description>By default, if warm reset happens when user_mode is zero. If set, it will make reset controller wait until fabric is ready</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_update_no_reset</ipxact:name>
            <ipxact:description>Suppress assertion of pld_rst_n_o during cvp update</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_clrhip_not_rst_sticky</ipxact:name>
            <ipxact:description>If set, enabled enable pldclrhip_n reset from hrc</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>clk_ctrl</ipxact:name>
          <ipxact:description>Clock control</ipxact:description>
          <ipxact:addressOffset>0x8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x3fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_pldif_fifo_clk_en</ipxact:name>
            <ipxact:description>Let user to enable clock for pldif tx and rx segment 1 datapath for non-power saving mode in controller x4 only</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dyngate_vfspfnum_core_clk_dis</ipxact:name>
            <ipxact:description>Disable SRIOV vfspfnum clock gating</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbg_clk_en</ipxact:name>
            <ipxact:description>Enable core_clk and pld_clk in debug block</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dyngate_sriov_clk_dis</ipxact:name>
            <ipxact:description>Disable SRIOV dynamic clock gating</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_sriov_clk_en</ipxact:name>
            <ipxact:description>Enable core_clk in sriov block</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_gate_radm_clk_dis</ipxact:name>
            <ipxact:description>Disable core_clk gating to radm module</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_gate_clk_in_reset_dis</ipxact:name>
            <ipxact:description>Disable stopping core clock in reset asserting edge</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_pld_clk_dis</ipxact:name>
            <ipxact:description>Disabling pld_clk</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD3</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tx_fifo_ctrl</ipxact:name>
          <ipxact:description>TX_FIFO CTRL register</ipxact:description>
          <ipxact:addressOffset>0xc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_tx_fifo_full_threshold</ipxact:name>
            <ipxact:description>TX FIFO full threshold</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x29</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_fifo_empty_threshold_1</ipxact:name>
            <ipxact:description>TX FIFO empty threshold in G1 speed</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x03</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_fifo_empty_threshold_2</ipxact:name>
            <ipxact:description>TX FIFO empty threshold in G2 speed</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0c</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_fifo_empty_threshold_3</ipxact:name>
            <ipxact:description>TX FIFO empty threshold in G3 speed</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0f</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_fifo_empty_threshold_4</ipxact:name>
            <ipxact:description>TX FIFO empty threshold in G4 speed</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x02</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_cdts_rst</ipxact:name>
            <ipxact:description>Initialize TX credit limit signals</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_fifo_dyn_empty_dis</ipxact:name>
            <ipxact:description>Disabling tx_fifo_empty threshold switching when PCIe speed changes.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>rx_fifo_ctrl</ipxact:name>
          <ipxact:description>RX_FIFO CTRL register</ipxact:description>
          <ipxact:addressOffset>0x10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_rxbuf_pfull_th</ipxact:name>
            <ipxact:description>RX FIFO full threshold</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x10</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x3fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_rxbuf_limit_bypass</ipxact:name>
            <ipxact:description>Ignore rx_buffer_limit_i signal when PCIe HIP send RX TLP to the user interface</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_rxbuf_limit_init</ipxact:name>
            <ipxact:description>Initialize RX buffer limit signals. It shall be cleared by SW after initializing.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_0</ipxact:name>
          <ipxact:description>cvp_ctrl_0 register</ipxact:description>
          <ipxact:addressOffset>0x14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_vsec_id</ipxact:name>
            <ipxact:description>VSEC ID - This will be a user configurable VSEC ID. Refer to section 5.1.1.3.2.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_vsec_rev</ipxact:name>
            <ipxact:description>VSEC - User configurable VSEC revision. Refer to section 5.1.1.3.2.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_mode</ipxact:name>
            <ipxact:description>CVP_MODE controls whether the HIP is in CVP_MODE or normal mode. Refer to section 5.1.1.3.7.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_clksel</ipxact:name>
            <ipxact:description>PLD_DISABLE (was HIP_CLK_SEL in NF) &#x2013; Enables/Disables the PLD interface. Refer to section 5.1.1.3.7.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_encryped</ipxact:name>
            <ipxact:description>CVP data should be encrypted. Refer to section 5.1.1.3.6.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_compressed</ipxact:name>
            <ipxact:description>CVP data should be compressed. Refer to section 5.1.1.3.6.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_hrbypass</ipxact:name>
            <ipxact:description>Hard Reset Controller Bypass in Nightfury. Refer to section 5.1.1.3.7.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_ungate_cvp_mode</ipxact:name>
            <ipxact:description>1: Don&#x2019;t gate CVP mode. 0: legacy mode
Under legal mode and ~cvp_en, it set some bits of CVP Mode Control register to read only.  Refer to section 5.1.1.3.7.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_blocking_dis</ipxact:name>
            <ipxact:description>1: CVP configuration command (CVP mode/programming control registers) blocking is disabled. 0: blocking is enabled. Refer to section 5.1.1.3.7 &amp; 5.1.1.3.10.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_avmm_warm_rst_req_ena</ipxact:name>
            <ipxact:description>1: cvp avmm warm reset request enable. 0: cvp avmm warm reset request disable. 
        The cvp_hip_avmm_rst_req_o will keep in request state when it is triggered by link_req_rst_not_i until this bit is deasserted .
		The cvp_hip_avmm_rst_req_o will keep in non-request state if this bit is deasserted.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_warm_reset_rdy_override</ipxact:name>
            <ipxact:description>[30]: force warm reset ready signal to &#x2018;1&#x2019;. 
[29]: force warm reset ready signal to &#x2018;0&#x2019;. 
The warm reset ready signal will be sent to reset controller.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_1</ipxact:name>
          <ipxact:description>cvp_ctrl_1 register</ipxact:description>
          <ipxact:addressOffset>0x18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_jtag_id_0</ipxact:name>
            <ipxact:description>JTAG_ID[31:0]. Refer to section 5.1.1.3.4.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_2</ipxact:name>
          <ipxact:description>cvp_ctrl_2 register</ipxact:description>
          <ipxact:addressOffset>0x1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_devbrd_type</ipxact:name>
            <ipxact:description>User configurable specific device or board type ID. Refer to section 5.1.1.3.5.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_vsec_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset. Refer to section 5.1.1.3.1.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_3</ipxact:name>
          <ipxact:description>cvp_ctrl_3 register</ipxact:description>
          <ipxact:addressOffset>0x20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_jtag_id_1</ipxact:name>
            <ipxact:description>JTAG_ID[63:32]. Refer to section 5.1.1.3.4.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_4</ipxact:name>
          <ipxact:description>cvp_ctrl_4 register</ipxact:description>
          <ipxact:addressOffset>0x24</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_jtag_id_2</ipxact:name>
            <ipxact:description>JTAG_ID[95:64]. Refer to section 5.1.1.3.4.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_5</ipxact:name>
          <ipxact:description>cvp_ctrl_5 register</ipxact:description>
          <ipxact:addressOffset>0x28</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_jtag_id_3</ipxact:name>
            <ipxact:description>JTAG_ID[127:96]. Refer to section 5.1.1.3.4.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cvp_ctrl_6</ipxact:name>
          <ipxact:description>cvp_ctrl_6 register</ipxact:description>
          <ipxact:addressOffset>0x2c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_intel_marker</ipxact:name>
            <ipxact:description>Intel Marker. Refer to section 5.1.1.3.3.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_0</ipxact:name>
          <ipxact:description>cfg_ctrl 0 register</ipxact:description>
          <ipxact:addressOffset>0x30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf0_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0xfffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_1</ipxact:name>
          <ipxact:description>cfg_ctrl_1 register</ipxact:description>
          <ipxact:addressOffset>0x34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf1_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF1</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf1_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_2</ipxact:name>
          <ipxact:description>cfg_ctrl_2 register</ipxact:description>
          <ipxact:addressOffset>0x38</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf2_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf2_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF2</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_3</ipxact:name>
          <ipxact:description>cfg_ctrl_3 register</ipxact:description>
          <ipxact:addressOffset>0x3c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf3_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF3</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf3_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_4</ipxact:name>
          <ipxact:description>cfg_ctrl_4 register</ipxact:description>
          <ipxact:addressOffset>0x40</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf4_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf4_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF4</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_5</ipxact:name>
          <ipxact:description>cfg_ctrl_5 register</ipxact:description>
          <ipxact:addressOffset>0x44</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf5_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF5</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf5_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_6</ipxact:name>
          <ipxact:description>cfg_ctrl_6 register</ipxact:description>
          <ipxact:addressOffset>0x48</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf6_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf6_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF6</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_7</ipxact:name>
          <ipxact:description>cfg_ctrl_7 register</ipxact:description>
          <ipxact:addressOffset>0x4c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dbi_pf7_table_size</ipxact:name>
            <ipxact:description>The allocated size of configuration RAM for PF7</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_pf7_start_addr</ipxact:name>
            <ipxact:description>The starting address of configuration RAM for PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cfg_ctrl_8</ipxact:name>
          <ipxact:description>cfg_ctrl_8 register</ipxact:description>
          <ipxact:addressOffset>0x50</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cvp_irq_en</ipxact:name>
            <ipxact:description>enable IRQ signaling cvp_hip_interrupt_out[6:4] whenever CVP cmd/ctrl bits change in the SSM&#x2019;s shadow reg.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_irq_misc_ctrl</ipxact:name>
            <ipxact:description>5 : ~k_pcie_irq_ena
mask cvp_hip_interrupt_out[0]
4 : ~k_pld_irq_ena
mask cvp_hip_interrupt_out[1]
3 : ~k_cfg_blk_irq_ena
mask cvp_hipinterrupt_out[2]
2: ~k_warmreset_irq_ena
mask cvp_hip_interrupt_out[7]
1: ~k_dl_update_irq_ena
mask cvp_hip_interrupt_out[3]
0: k_cvp_irq2_mode
If set, trigger cvp_hip_interrupt_out[6] when ANY CVP command bit toggles. cvp_hip_interrupt_out[6] shall be gated by k_cvp_irq_en again.
If cleared, trigger cvp_hip_interrupt_out[6] when FULL_CONFIG assert events only.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>hip_ctrl</ipxact:name>
          <ipxact:description>hip_ctrl register</ipxact:description>
          <ipxact:addressOffset>0x54</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_device_width</ipxact:name>
            <ipxact:description>2&#x2019;b00 : X8
2&#x2019;b01 : X4
2&#x2019;b10 : X2
2&#x2019;b11 : X1</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_ep_signal_mask</ipxact:name>
            <ipxact:description>Mask endpoint only signals for port0/1 in 4x4 mode to prevent unexpected behavior due to the sharing of AIB pins with other port's signals</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_dbi_ro_wr_disable</ipxact:name>
            <ipxact:description>1 : MISC_CONTROL_1_OFF.DBI_RO_WR_EN register field is forced 0 and is read-only</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_device_type</ipxact:name>
            <ipxact:description>Device/port type. Indicates the specific type of this PCI Express function. It is also used to set the &#x2018;Device/Port Type&#x2019; field of the &#x2018;PCI express Capability Register&#x2019;. The controller uses this input to determine the operating mode of the controller at run time. It will drive device_type input of HIP PCIe IP.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_margining_ready</ipxact:name>
            <ipxact:description>Margining ready</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_margining_software_ready</ipxact:name>
            <ipxact:description>Margining software ready</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_sris_mode</ipxact:name>
            <ipxact:description>SRIS operating mode (0b: non SRIS mode, 1b: SRIS mode)</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_err_tlp_bypass</ipxact:name>
            <ipxact:description>In TLP bypass mode (0b: normal EP/RP mode, 1b: TLP bypass mode) it will control functionality of signal serr_err_o which will toggle one of tlpbypass_err_status</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_ecrc_strip</ipxact:name>
            <ipxact:description>It will strip off the ECRC field at the end of TLP payload when TD bit is set. It shall be cleared in TLPBYPASS mode</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD3</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_user_mode_del_count</ipxact:name>
            <ipxact:description>Define how many fref cycles of delay to hold user_mode  from the SSM.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_ram_ecc_gen_disable</ipxact:name>
            <ipxact:description>Disable ECC generation for configuration RAM.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_ram_ecc_chk_val</ipxact:name>
            <ipxact:description>Enable ECC checking for configuration RAM.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_pld_aib_loopback_en</ipxact:name>
            <ipxact:description>Enable loopback TX data from the PLD back to the PLD.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_device_pld_intf_mode</ipxact:name>
            <ipxact:description>For PLD interface mode
3&#x2019;b100 = 1:4 mode
3&#x2019;b010 = 1:2 mode
3&#x2019;b001 = 1:1 mode</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvd</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_crs_override</ipxact:name>
            <ipxact:description>If it is set, CFG request will be responsed with SC or CRS depending on the k_crs_override_value setting.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_crs_override_value</ipxact:name>
            <ipxact:description>valid only when k_crs_override is set to 1. If k_crs_override_value is set, HIP will defer incoming CFG requests until initialization is complete. After k_crs_override_value is cleared, enumeration process can continue.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_pld_crs_en</ipxact:name>
            <ipxact:description>If it is set, app_req_retry_en can defer incoming CFG requests. If k_crs_override is enabled, it won&#x2019;t be affective.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_blk_crs_en</ipxact:name>
            <ipxact:description>If it is set, configuration block can defer incoming per-PF CFG requests especially when configuration loading is in progress for FLR</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_rx_lane_flip_en</ipxact:name>
            <ipxact:description>Performs manual lane reversal for RX lanes. For use when automatic lane reversal does not occur because lane 0 is not detected.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_lane_flip_en</ipxact:name>
            <ipxact:description>Performs manual lane reversal for TX lanes. For use when automatic lane reversal does not occur because lane 0 is not detected.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>vsec_ctrl</ipxact:name>
          <ipxact:description>vsec_ctrl register</ipxact:description>
          <ipxact:addressOffset>0x58</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_gpio_irq</ipxact:name>
            <ipxact:description>[7] : use pld_gp_status[7] inputs as an interrupt source for cvp_hip_interrupt_out[1]
[6:0] : unused</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_test_in_override</ipxact:name>
            <ipxact:description>If set, control test muxing with k_test_in register instead of test_in input from the PLD.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>reserved_0</ipxact:name>
          <ipxact:description>reserved_0 register</ipxact:description>
          <ipxact:addressOffset>0x5c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvd1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>reserved_1</ipxact:name>
          <ipxact:description>reserved_1 register</ipxact:description>
          <ipxact:addressOffset>0x60</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvd1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>reserved_2</ipxact:name>
          <ipxact:description>reserved_2 register</ipxact:description>
          <ipxact:addressOffset>0x64</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvd1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>user_avmm_ctrl</ipxact:name>
          <ipxact:description>user_avmm_ctrl register</ipxact:description>
          <ipxact:addressOffset>0x68</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_vsec_select</ipxact:name>
            <ipxact:description>If set, it allows the acess to Intel VSEC registers</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_shadow_select</ipxact:name>
            <ipxact:description>Valid only when d_vsec_select is zero.
If set, it allows the access to shadow registers in PCIe configuration space.
If cleared, it allows the access to standard PCIe configuration registers.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x7fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_vf_select</ipxact:name>
            <ipxact:description>To access the virtual function registers, this bit should be set to one.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_vf</ipxact:name>
            <ipxact:description>Select the virtual function number</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>rev_id_0</ipxact:name>
          <ipxact:description>Revision ID field of VF attached to PF0-PF3</ipxact:description>
          <ipxact:addressOffset>0x6c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf0</ipxact:name>
            <ipxact:description>Revision ID of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf1</ipxact:name>
            <ipxact:description>Revision ID of PF1</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf2</ipxact:name>
            <ipxact:description>Revision ID of PF2</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf3</ipxact:name>
            <ipxact:description>Revision ID of PF3</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>rev_id_1</ipxact:name>
          <ipxact:description>Revision ID field of VF attached to PF4-PF7</ipxact:description>
          <ipxact:addressOffset>0x70</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf4</ipxact:name>
            <ipxact:description>Revision ID of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf5</ipxact:name>
            <ipxact:description>Revision ID of PF5</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf6</ipxact:name>
            <ipxact:description>Revision ID of PF6</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_revisionid_pf7</ipxact:name>
            <ipxact:description>Revision ID of PF7</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>subsys_id_0</ipxact:name>
          <ipxact:description>Subsytem ID field of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0x74</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf0</ipxact:name>
            <ipxact:description>Subsystem ID of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf1</ipxact:name>
            <ipxact:description>Subsystem ID of PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>subsys_id_1</ipxact:name>
          <ipxact:description>Subsytem ID field of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0x78</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf2</ipxact:name>
            <ipxact:description>Subsystem ID of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf3</ipxact:name>
            <ipxact:description>Subsystem ID of PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>subsys_id_2</ipxact:name>
          <ipxact:description>Subsytem ID field of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0x7c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf4</ipxact:name>
            <ipxact:description>Subsystem ID of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf5</ipxact:name>
            <ipxact:description>Subsystem ID of PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>subsys_id_3</ipxact:name>
          <ipxact:description>Subsytem ID field of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0x80</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf6</ipxact:name>
            <ipxact:description>Subsystem ID of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_subsysid_pf7</ipxact:name>
            <ipxact:description>Subsystem ID of PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>type0_np_0</ipxact:name>
          <ipxact:description>Type0 Header Capability Next pointer field of VF attached to PF0-PF3</ipxact:description>
          <ipxact:addressOffset>0x84</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf0</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf1</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf2</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf3</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>type0_np_1</ipxact:name>
          <ipxact:description>Type0 Header Capability Next pointer field of VF attached to PF4-PF7</ipxact:description>
          <ipxact:addressOffset>0x88</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf4</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf5</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf6</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_type0cap_nxtptr_pf7</ipxact:name>
            <ipxact:description>Type0 Header Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pcie_np_0</ipxact:name>
          <ipxact:description>PCIE Capability Next pointer field of VF attached to PF0-PF3</ipxact:description>
          <ipxact:addressOffset>0x8c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf0</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf1</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf2</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf3</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pcie_np_1</ipxact:name>
          <ipxact:description>PCIE Capability Next pointer field of VF attached to PF4-PF7</ipxact:description>
          <ipxact:addressOffset>0x90</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf4</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf5</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf6</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_pciecap_nxtptr_pf7</ipxact:name>
            <ipxact:description>PCIE capability Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xb0</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ari_np_0</ipxact:name>
          <ipxact:description>ARI Capability Next pointer field of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0x94</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf0</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf1</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ari_np_1</ipxact:name>
          <ipxact:description>ARI Capability Next pointer field of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0x98</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf2</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf3</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ari_np_2</ipxact:name>
          <ipxact:description>ARI Capability Next pointer field of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0x9c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf4</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf5</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ari_np_3</ipxact:name>
          <ipxact:description>ARI Capability Next pointer field of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0xa0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf6</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_nxtptr_pf7</ipxact:name>
            <ipxact:description>ARI capability Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x110</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_tsize_0</ipxact:name>
          <ipxact:description>MSIX Table Size field of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0xa4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf0</ipxact:name>
            <ipxact:description>MSIX Table Size of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf1</ipxact:name>
            <ipxact:description>MSIX Table Size of PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_tsize_1</ipxact:name>
          <ipxact:description>MSIX Table Size field of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0xa8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf2</ipxact:name>
            <ipxact:description>MSIX Table Size of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf3</ipxact:name>
            <ipxact:description>MSIX Table Size of PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_tsize_2</ipxact:name>
          <ipxact:description>MSIX Table Size field of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0xac</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf4</ipxact:name>
            <ipxact:description>MSIX Table Size of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf5</ipxact:name>
            <ipxact:description>MSIX Table Size of PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_tsize_3</ipxact:name>
          <ipxact:description>MSIX Table Size field of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0xb0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf6</ipxact:name>
            <ipxact:description>MSIX Table Size of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_tablesize_pf7</ipxact:name>
            <ipxact:description>MSIX Table Size of PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_0</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF0</ipxact:description>
          <ipxact:addressOffset>0xb4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf0</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf0</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_1</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF1</ipxact:description>
          <ipxact:addressOffset>0xb8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf1</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf1</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_2</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF2</ipxact:description>
          <ipxact:addressOffset>0xbc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf2</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf2</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_3</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF3</ipxact:description>
          <ipxact:addressOffset>0xc0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf3</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf3</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_4</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF4</ipxact:description>
          <ipxact:addressOffset>0xc4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf4</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf4</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_5</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF5</ipxact:description>
          <ipxact:addressOffset>0xc8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf5</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf5</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_6</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF6</ipxact:description>
          <ipxact:addressOffset>0xcc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf6</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf6</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_toffset_7</ipxact:name>
          <ipxact:description>MSIX Table offset field of VF attached to PF7</ipxact:description>
          <ipxact:addressOffset>0xd0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_bir_pf7</ipxact:name>
            <ipxact:description>MSIX Table BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixtable_offset_pf7</ipxact:name>
            <ipxact:description>MSIX Table Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_0</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF0</ipxact:description>
          <ipxact:addressOffset>0xd4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf0</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf0</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_1</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF1</ipxact:description>
          <ipxact:addressOffset>0xd8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf1</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf1</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_2</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF2</ipxact:description>
          <ipxact:addressOffset>0xdc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf2</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf2</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_3</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF3</ipxact:description>
          <ipxact:addressOffset>0xe0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf3</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf3</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_4</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF4</ipxact:description>
          <ipxact:addressOffset>0xe4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf4</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf4</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_5</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF5</ipxact:description>
          <ipxact:addressOffset>0xe8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf5</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf5</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_6</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF6</ipxact:description>
          <ipxact:addressOffset>0xec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf6</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf6</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_poffset_7</ipxact:name>
          <ipxact:description>MSIX PBA offset field of VF attached to PF7</ipxact:description>
          <ipxact:addressOffset>0xf0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_bir_pf7</ipxact:name>
            <ipxact:description>MSIX PBA BIR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixpba_offset_pf7</ipxact:name>
            <ipxact:description>MSIX PBA Offset</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_np_0</ipxact:name>
          <ipxact:description>MSIX Capability Next pointer field of VF attached to PF0-PF3</ipxact:description>
          <ipxact:addressOffset>0xf4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf0</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf1</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf2</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf3</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>msix_np_1</ipxact:name>
          <ipxact:description>MSIX Capability Next pointer field of VF attached to PF4-PF7</ipxact:description>
          <ipxact:addressOffset>0xf8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf4</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf5</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf6</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msix_nxtptr_pf7</ipxact:name>
            <ipxact:description>MSIX capability Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_np_0</ipxact:name>
          <ipxact:description>TPH Capability Next pointer field of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0xfc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf0</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf1</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_np_1</ipxact:name>
          <ipxact:description>TPH Capability Next pointer field of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0x100</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf2</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf3</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_np_2</ipxact:name>
          <ipxact:description>TPH Capability Next pointer field of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0x104</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf4</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf5</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_np_3</ipxact:name>
          <ipxact:description>TPH Capability Next pointer field of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0x108</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf6</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_nxtptr_pf7</ipxact:name>
            <ipxact:description>TPH Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x19c</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_ctrl_0</ipxact:name>
          <ipxact:description>TPH Requester capability field of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0x10c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf0</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf0</ipxact:name>
            <ipxact:description>TPH device specific mode of PF0</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf0</ipxact:name>
            <ipxact:description>TPH requester enable of PF0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf0</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf0</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF0</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf1</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf1</ipxact:name>
            <ipxact:description>TPH device specific mode of PF1</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf1</ipxact:name>
            <ipxact:description>TPH requester enable of PF1</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf1</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF1</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf1</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF1</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_ctrl_1</ipxact:name>
          <ipxact:description>TPH Requester capability field of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0x110</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf2</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf2</ipxact:name>
            <ipxact:description>TPH device specific mode of PF2</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf2</ipxact:name>
            <ipxact:description>TPH requester enable of PF2</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf2</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF2</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf2</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF2</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf3</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf3</ipxact:name>
            <ipxact:description>TPH device specific mode of PF3</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf3</ipxact:name>
            <ipxact:description>TPH requester enable of PF3</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf3</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF3</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf3</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF3</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_ctrl_2</ipxact:name>
          <ipxact:description>TPH Requester capability field of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0x114</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf4</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf4</ipxact:name>
            <ipxact:description>TPH device specific mode of PF4</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf4</ipxact:name>
            <ipxact:description>TPH requester enable of PF4</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf4</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF4</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf4</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF4</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf5</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf5</ipxact:name>
            <ipxact:description>TPH device specific mode of PF5</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf5</ipxact:name>
            <ipxact:description>TPH requester enable of PF5</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf5</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF5</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf5</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF5</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tph_ctrl_3</ipxact:name>
          <ipxact:description>TPH Requester capability field of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0x118</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf6</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf6</ipxact:name>
            <ipxact:description>TPH device specific mode of PF6</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf6</ipxact:name>
            <ipxact:description>TPH requester enable of PF6</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf6</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF6</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf6</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF6</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_intvecmode_pf7</ipxact:name>
            <ipxact:description>TPH interrupt vector mode of PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_devspecificmode_pf7</ipxact:name>
            <ipxact:description>TPH device specific mode of PF7</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_exttphrequester_pf7</ipxact:name>
            <ipxact:description>TPH requester enable of PF7</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablelocation_pf7</ipxact:name>
            <ipxact:description>TPH ST Table Location of PF7</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tph_sttablesize_pf7</ipxact:name>
            <ipxact:description>TPH ST Table Size of PF7</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ats_np_0</ipxact:name>
          <ipxact:description>ATS Capability Next pointer field of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0x11c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf0</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf1</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ats_np_1</ipxact:name>
          <ipxact:description>ATS Capability Next pointer field of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0x120</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf2</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf3</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ats_np_2</ipxact:name>
          <ipxact:description>ATS Capability Next pointer field of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0x124</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf4</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf5</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ats_np_3</ipxact:name>
          <ipxact:description>ATS Capability Next pointer field of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0x128</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf6</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_nxtptr_pf7</ipxact:name>
            <ipxact:description>ATS Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x200</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ats_ctrl_0</ipxact:name>
          <ipxact:description>ATS capability field of VF attached to PF0-PF3</ipxact:description>
          <ipxact:addressOffset>0x12c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf0</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf0</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF0</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf0</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf1</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF1</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf1</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF1</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf1</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF1</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf2</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF2</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf2</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF2</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf2</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF2</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf3</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF3</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf3</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF3</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf3</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF3</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD3</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ats_ctrl_1</ipxact:name>
          <ipxact:description>ATS capability field of VF attached to PF4-PF7</ipxact:description>
          <ipxact:addressOffset>0x130</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf4</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf4</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF4</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf4</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF4</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf5</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF5</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf5</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF5</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf5</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF5</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf6</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF6</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf6</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF6</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf6</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF6</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_globalinvalidate_pf7</ipxact:name>
            <ipxact:description>ATS global invalidate field of PF7</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_pagealignreq_pf7</ipxact:name>
            <ipxact:description>ATS pagealign request field of PF7</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_ats_invalidateqdepth_pf7</ipxact:name>
            <ipxact:description>ATS invalidate Q Depth of PF7</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD3</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>acs_ctrl_0</ipxact:name>
          <ipxact:description>ACS Capability Control of VF attached to PF0-PF1</ipxact:description>
          <ipxact:addressOffset>0x134</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf0</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf0</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF0</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf1</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF1</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf1</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF1</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>acs_ctrl_1</ipxact:name>
          <ipxact:description>ACS Capability Control of VF attached to PF2-PF3</ipxact:description>
          <ipxact:addressOffset>0x138</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf2</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF2</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf2</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF2</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf3</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF3</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf3</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF3</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>acs_ctrl_2</ipxact:name>
          <ipxact:description>ACS Capability Control of VF attached to PF4-PF5</ipxact:description>
          <ipxact:addressOffset>0x13c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf4</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF4</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf4</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF4</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf5</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF5</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf5</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF5</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>acs_ctrl_3</ipxact:name>
          <ipxact:description>ACS Capability Control of VF attached to PF6-PF7</ipxact:description>
          <ipxact:addressOffset>0x140</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf6</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF6</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf6</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF6</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acs_nxtptr_pf7</ipxact:name>
            <ipxact:description>ACS Next Pointer of PF7</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_acscap_enable_pf7</ipxact:name>
            <ipxact:description>ACS Capability Enabled For PF7</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>sriov_misc_ctrl</ipxact:name>
          <ipxact:description>Controls SRIOV Config Space Misc Functionality</ipxact:description>
          <ipxact:addressOffset>0x144</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_enable_poison_nf</ipxact:name>
            <ipxact:description>Enables Poison TLP logging as Non-Fatal</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_disable_ur_nf</ipxact:name>
            <ipxact:description>Disable UR logging as Non-Fatal</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_disable_ct_ur</ipxact:name>
            <ipxact:description>Disable Completion Timeout logging as Non-Fatal</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_disable_msg_ur</ipxact:name>
            <ipxact:description>Disable Detection of MSG TLP for UR logging</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_nonsriov_mode</ipxact:name>
            <ipxact:description>Use PF in non SRIOV mode</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xff</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0xfffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>vfcap_present</ipxact:name>
          <ipxact:description>VF capability present for each PF</ipxact:description>
          <ipxact:addressOffset>0x148</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_exvf_aricap_enable</ipxact:name>
            <ipxact:description>Indicates ARI capability enabled for corresponding PF. 1 Bits per PF. WHR supports 8 PF</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xff</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_msixcap_enable</ipxact:name>
            <ipxact:description>Indicates MSIX capability enabled for corresponding PF. 1 Bits per PF. WHR supports 8 PF</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xff</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_tphcap_enable</ipxact:name>
            <ipxact:description>Indicates TPH capability enabled for corresponding PF. 1 Bits per PF. WHR supports 8 PF</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xff</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_exvf_atscap_enable</ipxact:name>
            <ipxact:description>Indicates ATS capability enabled for corresponding PF. 1 Bits per PF. WHR supports 8 PF</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xff</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>root_port_irq_status</ipxact:name>
          <ipxact:description>Root Port Interrupt Status fields</ipxact:description>
          <ipxact:addressOffset>0x14c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>inta</ipxact:name>
            <ipxact:description>Set when RC INTA assertion message is received, cleared by SW write 1</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>intb</ipxact:name>
            <ipxact:description>Set when RC INTB assertion message is received, cleared by SW write 1</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>intc</ipxact:name>
            <ipxact:description>Set when RC INTC assertion message is received, cleared by SW write 1</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>intd</ipxact:name>
            <ipxact:description>Set when RC INTD assertion message is received, cleared by SW write 1</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_aer_rc_err_int</ipxact:name>
            <ipxact:description>Set when a reported error condition causes a bit to be set in the Root Error Status register and the associated error message reporting enable bit is set in the Root Error Command register. This happens when the RC internally generates an error or when an error message is received by the RC.
HW self clear or SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_pme_int</ipxact:name>
            <ipxact:description>Set when following condition meets:
The INTx Assertion Disable bit in the Command register is 0.
The PME Interrupt Enable bit in the Root Control register is set to 1.
The PME Status bit in the Root Status register is set to 1.
HW self clear or SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hp_int</ipxact:name>
            <ipxact:description>Set when all the following conditions are true:
The INTx Assertion Disable bit in the Command register is 0.
Hot-Plug interrupts are enabled in the Slot Control register.
Any bit in the Slot Status register is equal to 1, and the associated event notification is enabled in the Slot Control register
HW self clear or SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hp_pme</ipxact:name>
            <ipxact:description>Set when all the following conditions are true:
The PME Enable bit in the Power Management Control and Status register is set to 1.
Any bit in the Slot Status register transitions from 0 to 1 and the associated event notification is enabled in the Slot Control register.
HW self clear or SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_link_auto_bw_int</ipxact:name>
            <ipxact:description>The controller asserts cfg_link_auto_bw_int when all of the following conditions are true:
The INTx assertion disable bit in the Command register is 0, and
The Link Autonomous Bandwidth Interrupt Enable bit in the Link Control register is set to 1, and
The Link Autonomous Bandwidth Interrupt Status bit in the Link Status register is set to 1.
SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_bw_mgt_int</ipxact:name>
            <ipxact:description>The controller asserts cfg_bw_mgt_int when all of the following conditions are true:
The INTx Assertion Disable bit in the Command register is 0, and
The Bandwidth Management Interrupt Enable bit in the Link Control register is set to 1, and
The Bandwidth Management Interrupt Status bit in the Link Status register is set to 1
SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_link_eq_req_int</ipxact:name>
            <ipxact:description>Interrupt indicating to your application that the Link Equalization Request bit in the Link Status 2 Register has been set and the Link Equalization Request Interrupt Enable (Link Control 3 Register bit 1) is set.
SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x1fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>21</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>root_port_irq_enable</ipxact:name>
          <ipxact:description>Root Port Interrupt Enable fields</ipxact:description>
          <ipxact:addressOffset>0x150</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>inta_en</ipxact:name>
            <ipxact:description>Enable for inta interrupt</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>intb_en</ipxact:name>
            <ipxact:description>Enable for intb interrupt</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>intc_en</ipxact:name>
            <ipxact:description>Enable for intc interrupt</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>intd_en</ipxact:name>
            <ipxact:description>Enable for intd interrupt</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_aer_rc_err_int_en</ipxact:name>
            <ipxact:description>Enable for cfg_aer_rc_err_int interrupt</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_pme_int_en</ipxact:name>
            <ipxact:description>Enable for cfg_pme_int interrupt</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hp_int_en</ipxact:name>
            <ipxact:description>Enable for hp_int interrupt</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hp_pme_en</ipxact:name>
            <ipxact:description>Enable for hp_pme interrupt</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_link_auto_bw_int_en</ipxact:name>
            <ipxact:description>Enable for cfg_link_auto_bw_int interrupt</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_bw_mgt_int_en</ipxact:name>
            <ipxact:description>Enable for cfg_bw_mgt_int interrupt</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_link_eq_req_int_en</ipxact:name>
            <ipxact:description>Enable for cfg_link_eq_req_int interrupt</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x1fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>21</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>root_port_err_status</ipxact:name>
          <ipxact:description>Root Port Error Status fields</ipxact:description>
          <ipxact:addressOffset>0x154</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>correct_err</ipxact:name>
            <ipxact:description>Set when RC received correctable error message, SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>nonfatal_err</ipxact:name>
            <ipxact:description>Set when RC received non-fatal error message, SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>fatal_err</ipxact:name>
            <ipxact:description>Set when RC received fatal error message, SW write 1 to clear</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>root_port_err_enable</ipxact:name>
          <ipxact:description>Root Port Error Status Enable</ipxact:description>
          <ipxact:addressOffset>0x158</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>correct_err_en</ipxact:name>
            <ipxact:description>Enable for correct_err interrupt</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>nonfatal_err_en</ipxact:name>
            <ipxact:description>Enable for nonfatal_err interrupt</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>fatal_err_en</ipxact:name>
            <ipxact:description>Enable for fatal_err interrupt</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pciecsr_snapshot</ipxact:name>
          <ipxact:description>PCIe configuration regster backup</ipxact:description>
          <ipxact:addressOffset>0x15c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>pciecsr_snapshot</ipxact:name>
            <ipxact:description>The PCIe configuration register accessed through DBI get a shadow copy so that user can the 4 bytes data can read at different time</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pcie_dskw_clr</ipxact:name>
          <ipxact:description>PCIe deskew clear</ipxact:description>
          <ipxact:addressOffset>0x160</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_pcie_dskw_clr</ipxact:name>
            <ipxact:description>Global synchronous clear for pcie_deskew.Writing '1' clears the deskew state machine and restarts the deskew process</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_dskw_mon_err_status</ipxact:name>
            <ipxact:description>Deskew monitor error</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_pcie_parity_bypass</ipxact:name>
            <ipxact:description>Instead of generating parity from the deskew module, take parity from the fabric. It is engineering mode and available only when AIB ECC is off</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pcie_dskw_force_done</ipxact:name>
          <ipxact:description>PCIe deskew force done state</ipxact:description>
          <ipxact:addressOffset>0x164</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_pcie_dskw_force_done</ipxact:name>
            <ipxact:description>Force deskew state machine out of error state for troubleshooting. 
'1': After successful deskew, force SM to stay in DESKEW_DONE state (valid=1) regardless of monitor_err
'0': After successful deskew, force SM to go to DESKEW_ERROR state (valid=0) when a monitor_error occurs</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pcie_dskw_mon_err</ipxact:name>
          <ipxact:description>PCIe deskew module error monitor</ipxact:description>
          <ipxact:addressOffset>0x168</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_dskw_monitor_err</ipxact:name>
            <ipxact:description>If change-in-skew is detected after deskew valid being asserted, 1 bit per chan of this status indicates which channels detected deskew markers before all channels received markers</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pcie_dskw_act_chan</ipxact:name>
          <ipxact:description>PCIe deskew module active channels</ipxact:description>
          <ipxact:addressOffset>0x16c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_dskw_act_chan</ipxact:name>
            <ipxact:description>Real time signal indicating channels for which deskew marker has been received (one bit per channel)</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_cfg_blk_sel</ipxact:name>
          <ipxact:description>CFG Block Debug Group Select</ipxact:description>
          <ipxact:addressOffset>0x170</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cfg_dbg_sel</ipxact:name>
            <ipxact:description>CFG Block Debug Group Select Signals; CFG block can have upto 32 debug groups with 32 signals per group.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0x7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_sriov_blk_sel</ipxact:name>
          <ipxact:description>SRIOV Block Debug Group Select</ipxact:description>
          <ipxact:addressOffset>0x174</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_sriov_dbg_sel</ipxact:name>
            <ipxact:description>SRIOV Block Debug Group Select Signals; SRIOV block can have upto 32 debug groups with 32 signals per group.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0x7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_cvp_blk_sel</ipxact:name>
          <ipxact:description>CVP Block Debug Group Select</ipxact:description>
          <ipxact:addressOffset>0x178</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cvp_dbg_sel</ipxact:name>
            <ipxact:description>CVP Block Debug Group Select Signals; CVP block can have upto 32 debug groups with 32 signals per group.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0x7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_rstgen_blk_sel</ipxact:name>
          <ipxact:description>RSTGEN Block Debug Group Select</ipxact:description>
          <ipxact:addressOffset>0x17c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_rstgen_dbg_sel</ipxact:name>
            <ipxact:description>RSTGEN Block Debug Group Select Signals; RSTGEN block can have upto 32 debug groups with 32 signals per group.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0x7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_pldif_blk_sel</ipxact:name>
          <ipxact:description>PLDIF Block Debug Group Select</ipxact:description>
          <ipxact:addressOffset>0x180</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_pldif_dbg_sel</ipxact:name>
            <ipxact:description>PLDIF Block Debug Group Select Signals; PLDIF block can have upto 32 debug groups with 32 signals per group.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0x7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_dwc_blk_sel</ipxact:name>
          <ipxact:description>DWC Block Debug Group Select For each FIFO Group</ipxact:description>
          <ipxact:addressOffset>0x184</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dwc_dbg_sel</ipxact:name>
            <ipxact:description>[19:15] - DWC Debug Group Select Signals for FIFO3, 
[14:10] - DWC Debug Group Select Signals for FIFO2, 
[9:5]   - DWC Debug Group Select Signals for FIFO1, 
[4:0]   - DWC Debug Group Select Signals for FIFO0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0xfffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dbg_ip_blk_sel</ipxact:name>
          <ipxact:description>IP Block Select For Each FIFO Group</ipxact:description>
          <ipxact:addressOffset>0x188</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_ip_blk_dbg_sel</ipxact:name>
            <ipxact:description>[15] - FIFO3 Group Valid,
[14:12] - IP Block Select Signals for FIFO3,
[11] - FIFO2 Group Valid,
[10:8] - IP Block Select Signals for FIFO2,
[7] - FIFO1 Group Valid,
[6:4] - IP Block Select Signals for FIFO1,
[3] - FIFO0 Group Valid,
[2:0] - IP Block Select Signals for FIFO0,</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>dfd_trig_event_setup</ipxact:name>
          <ipxact:description>TRIG Event Setup For DFD Interface</ipxact:description>
          <ipxact:addressOffset>0x18c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dfd_trig_event_setup</ipxact:name>
            <ipxact:description>[7] - Enabling the LTSSM Trig Event defined by bit[6:0],
[6] - 1'b0: Entering the specified LTSSM State,
    - 1'b1: Exiting the specified LTSSM State,
[5:0] - LTSSM State</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tlpbypass_err_status</ipxact:name>
          <ipxact:description>Error Status for TLP bypass mode</ipxact:description>
          <ipxact:addressOffset>0x190</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cfg_ecrc_err_sts</ipxact:name>
            <ipxact:description>ECRC error</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_rcvr_err_sts</ipxact:name>
            <ipxact:description>Receiver error</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_bad_tlp_err_sts</ipxact:name>
            <ipxact:description>Bad TLP error</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_bad_dllp_err_sts</ipxact:name>
            <ipxact:description>Bad DLLP error</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_replay_timer_timeout_err_sts</ipxact:name>
            <ipxact:description>Replay timer timeout error</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_replay_number_rollover_err_sts</ipxact:name>
            <ipxact:description>Replay number rollover error</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_dl_protocol_err_sts</ipxact:name>
            <ipxact:description>Data link protocol error</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_surprise_down_err_sts</ipxact:name>
            <ipxact:description>Surprise down error</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_mlf_tlp_err_sts</ipxact:name>
            <ipxact:description>Malformed TLP error</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_fc_protocol_err_sts</ipxact:name>
            <ipxact:description>Flow control protocol error</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_rcvr_overflow_err_sts</ipxact:name>
            <ipxact:description>Receiver overflow error</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_corrected_internal_err_sts</ipxact:name>
            <ipxact:description>Corrected internal error</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_uncor_internal_err_sts</ipxact:name>
            <ipxact:description>Uncorrectable internal error</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>tlpbypass_err_en</ipxact:name>
          <ipxact:description>Enable error reporting to serr_out_o in TLP bypass mode</ipxact:description>
          <ipxact:addressOffset>0x194</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cfg_ecrc_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for ECRC error</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_rcvr_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for receiver error</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_bad_tlp_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for bad TLP error</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_bad_dllp_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for bad DLLP error</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_replay_timer_timeout_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for replay timer timeout error</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_replay_number_rollover_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for replay number rollover error</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_dl_protocol_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for data link protocol error</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_surprise_down_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for surprise down error</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_mlf_tlp_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for malformed TLP error</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_fc_protocol_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for flow control protocol error</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_rcvr_overflow_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for receiver overflow error</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_corrected_internal_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for corrected internal error</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_uncor_internal_err_sts_en</ipxact:name>
            <ipxact:description>Enable error reporting to serr_out_o for uncorrectable internal error</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>scratchpad0</ipxact:name>
          <ipxact:description>scratch pad register 0</ipxact:description>
          <ipxact:addressOffset>0x198</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>scratch_pad_0</ipxact:name>
            <ipxact:description>Scratch pad 0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>scratchpad1</ipxact:name>
          <ipxact:description>scratch pad register 1</ipxact:description>
          <ipxact:addressOffset>0x19c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>scratch_pad_1</ipxact:name>
            <ipxact:description>Scratch pad 1</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ptm_local_clock_adj_lsb</ipxact:name>
          <ipxact:description>Time adjustment (32bits LSB) to ptm_local_clock reported from DWIP</ipxact:description>
          <ipxact:addressOffset>0x1a0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cfg_ptm_local_clock_adj_lsb</ipxact:name>
            <ipxact:description>Time adjustment (32bits LSB) to ptm_local_clock reported from DWIP</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ptm_local_clock_adj_msb</ipxact:name>
          <ipxact:description>Time adjustment (32bits MSB to ptm_local_clock reported from DWIP</ipxact:description>
          <ipxact:addressOffset>0x1a4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cfg_ptm_local_clock_adj_msb</ipxact:name>
            <ipxact:description>Time adjustment (32bits MSB) to ptm_local_clock reported from DWIP</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ptm_sts</ipxact:name>
          <ipxact:description>Error Status for PTM Requester mode</ipxact:description>
          <ipxact:addressOffset>0x1a8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cfg_ptm_req_response_timeout_sts</ipxact:name>
            <ipxact:description>PTM Requester Response Timeout</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_ptm_req_replay_tx_sts</ipxact:name>
            <ipxact:description>PTM Requester Replay Sent</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_ptm_req_dup_rx_sts</ipxact:name>
            <ipxact:description>PTM Requester Duplicate Received</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ptm_ctrl</ipxact:name>
          <ipxact:description>PTM control to DWIP</ipxact:description>
          <ipxact:addressOffset>0x1ac</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cfg_ptm_auto_update_signal</ipxact:name>
            <ipxact:description>Indicates that the controller should update the PTM Requester Context and Clock automatically every 10ms</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pld_interface_ctrl</ipxact:name>
          <ipxact:description>To control the CDC FIFO threshold for absorbing the skids from the phase FIFO at PLD_CLK domain</ipxact:description>
          <ipxact:addressOffset>0x1b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_rx_cdcfifo_threshold</ipxact:name>
            <ipxact:description>To control the CDC FIFO threshold for absorbing the skids from the phase FIFO at PLD_CLK domainTo control the CDC FIFO threshold for absorbing the skids from the phase FIFO at PLD_CLK domain. Does not require much tuning and should be fixed to 3 most of the time</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tx_cdcfifo_threshold</ipxact:name>
            <ipxact:description>To control the CDC FIFO threshold for absorbing the skids from the phase FIFO at PLD_CLK domain.Depend on the end-to-end latency and number of pipelines between Fabric to the PLDIF TX FIFO</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x03</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_pld_fdbk_tready_qual_en</ipxact:name>
            <ipxact:description>This policy bit when set, qualifies the feedback tready when accepting data on the AXI-S Interface. HSD: 15011919112</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_pld_rx_halt_bypass</ipxact:name>
            <ipxact:description>When set, we ignore the halt bit received on the interface.This bit when set ignores all the halt bit interaction on the avst interface for posted, non-posted, and completion TLP</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x3fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>14</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_ctrl0</ipxact:name>
          <ipxact:description>csb_ctrl0</ipxact:description>
          <ipxact:addressOffset>0x1b4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_dest_id</ipxact:name>
            <ipxact:description>CSB Destination ID, RBC is unconstrained(open to customer)</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_source_id</ipxact:name>
            <ipxact:description>CSB Source ID, RBC is unconstrained(open to customer)</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_mcred</ipxact:name>
            <ipxact:description>CSB Credit,  RBC unconstrained during ENG_MODE.Master sideband credits available. Use only when k_fixedcred=1.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_fixedcred</ipxact:name>
            <ipxact:description>RBC unconstrained during ENG_MODE.Chicken bit to enable fixed credit deposit, bypasses credit initialization. Master credit value is obtained from the register k_mcred</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_reloadcred</ipxact:name>
            <ipxact:description>RBC unconstrained during ENG_MODE.Chicken bit to enable credit reinitialization, triggered by Master</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cfg_sys_serr_dis</ipxact:name>
            <ipxact:description>RBC unconstrained during ENG_MODE.Chicken bit to disable generating SERR CSB message from cfg_sys_err_rc.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_tlp_serr_dis</ipxact:name>
            <ipxact:description>RBC unconstrained during ENG_MODE.Chicken bit to disable generating SERR CSB message from tlp bypass interrupt.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_reg_rd</ipxact:name>
          <ipxact:description>csb_reg_rd</ipxact:description>
          <ipxact:addressOffset>0x1b8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB custom register read opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x61</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_reg_wr</ipxact:name>
          <ipxact:description>csb_reg_wr</ipxact:description>
          <ipxact:addressOffset>0x1bc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB custom register write opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x62</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_mmio_rd</ipxact:name>
          <ipxact:description>csb_mmio_rd</ipxact:description>
          <ipxact:addressOffset>0x1c0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB MMIO read opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6e</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_mmio_wr</ipxact:name>
          <ipxact:description>csb_mmio_wr</ipxact:description>
          <ipxact:addressOffset>0x1c4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB MMIO write opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6f</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_flr_received</ipxact:name>
          <ipxact:description>csb_flr_received</ipxact:description>
          <ipxact:addressOffset>0x1c8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB FLR received opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x70</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_flr_completed</ipxact:name>
          <ipxact:description>csb_flr_completed</ipxact:description>
          <ipxact:addressOffset>0x1cc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB FLR completed opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x69</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_cfg_update</ipxact:name>
          <ipxact:description>csb_cfg_update</ipxact:description>
          <ipxact:addressOffset>0x1d0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB configuration update opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6a</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_cpl_to</ipxact:name>
          <ipxact:description>csb_cpl_to</ipxact:description>
          <ipxact:addressOffset>0x1d4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB completion timeout opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6b</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cpl_to_fifo_overflow</ipxact:name>
            <ipxact:description>Completion timeout FIFO overflow. Status reg from HW side. Sticky</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x7fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>23</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_err_report</ipxact:name>
          <ipxact:description>csb_err_report</ipxact:description>
          <ipxact:addressOffset>0x1d8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB error reporting opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6c</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_custom_cpl</ipxact:name>
          <ipxact:description>csb_custom_cpl</ipxact:description>
          <ipxact:addressOffset>0x1dc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB posted completion opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6d</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_prs</ipxact:name>
          <ipxact:description>csb_prs</ipxact:description>
          <ipxact:addressOffset>0x1e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB PRS opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x71</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_vferr_tx</ipxact:name>
          <ipxact:description>csb_vferr_tx</ipxact:description>
          <ipxact:addressOffset>0x1e4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB TX VF Error opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x72</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_vferr_rx</ipxact:name>
          <ipxact:description>csb_vferr_rx</ipxact:description>
          <ipxact:addressOffset>0x1e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB RX VF Error opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x73</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_msi_int</ipxact:name>
          <ipxact:description>csb_msi_int</ipxact:description>
          <ipxact:addressOffset>0x1ec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB MSI interrupt pending opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x74</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_cii_rd</ipxact:name>
          <ipxact:description>csb_cii_rd</ipxact:description>
          <ipxact:addressOffset>0x1f0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB CII Read Request opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x75</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_cii_wr</ipxact:name>
          <ipxact:description>csb_cii_wr</ipxact:description>
          <ipxact:addressOffset>0x1f4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB CII Write Request opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x76</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_cii_cpl</ipxact:name>
          <ipxact:description>csb_cii_cpl</ipxact:description>
          <ipxact:addressOffset>0x1f8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB CII request completion opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x77</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_pci_rd</ipxact:name>
          <ipxact:description>csb_pci_rd</ipxact:description>
          <ipxact:addressOffset>0x1fc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB PCI VirtIO config Read Request opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x78</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_pci_wr</ipxact:name>
          <ipxact:description>csb_pci_wr</ipxact:description>
          <ipxact:addressOffset>0x200</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB PCI VirtIO config Write Request opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x79</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_pci_cpl</ipxact:name>
          <ipxact:description>csb_pci_cpl</ipxact:description>
          <ipxact:addressOffset>0x204</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB PCI VirtIO config request completion opcode. Sticky. Locked by opcode_lock bit. RBC Constrain to default</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7a</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_tlb_err</ipxact:name>
          <ipxact:description>csb_tlb_err</ipxact:description>
          <ipxact:addressOffset>0x208</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB TLP bypass Error Reporting opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x90</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_hot_plug</ipxact:name>
          <ipxact:description>csb_hot_plug</ipxact:description>
          <ipxact:addressOffset>0x20c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB Hot Plug opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x91</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_tx_credit</ipxact:name>
          <ipxact:description>csb_tx_credit</ipxact:description>
          <ipxact:addressOffset>0x210</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB TX Credit opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x93</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_absolute_crdt</ipxact:name>
            <ipxact:description>Chicken bit. When set to '1', select to send absolute credit to PLD side(Expose during eng_mode)</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x7fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>23</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_rst_event</ipxact:name>
          <ipxact:description>csb_rst_event</ipxact:description>
          <ipxact:addressOffset>0x214</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB Reset Event opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x95</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_rst_ack</ipxact:name>
          <ipxact:description>csb_rst_ack</ipxact:description>
          <ipxact:addressOffset>0x218</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode</ipxact:name>
            <ipxact:description>CSB Reset Acknowledge opcode. Sticky. Locked by opcode_lock bit</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x96</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_afull_threshold</ipxact:name>
          <ipxact:description>csb_afull_threshold</ipxact:description>
          <ipxact:addressOffset>0x21c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_afull_threshold</ipxact:name>
            <ipxact:description>CSB in queue almost full threshold</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1c</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0xffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_opcode_ctrl</ipxact:name>
          <ipxact:description>csb_opcode_ctrl</ipxact:description>
          <ipxact:addressOffset>0x220</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>lock</ipxact:name>
            <ipxact:description>Write 1 to LOCK. SSM Write Once, Sticky. Prevent software write to change opcode values.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_error_payload</ipxact:name>
          <ipxact:description>csb_error_payload</ipxact:description>
          <ipxact:addressOffset>0x224</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>length_mismatch</ipxact:name>
            <ipxact:description>The first Dword of target CSB message being dropped due to EOM length mismatch. Little endian, where LSB is the oldest Sideband flit.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_error_payload2</ipxact:name>
          <ipxact:description>csb_error_payload2</ipxact:description>
          <ipxact:addressOffset>0x228</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>clear</ipxact:name>
            <ipxact:description>Write 1 to set, auto clear by hardware. This clears the csb_error_payload length_mismatch field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x7fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_error_type</ipxact:name>
          <ipxact:description>csb_error_type</ipxact:description>
          <ipxact:addressOffset>0x22c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>opcode1</ipxact:name>
            <ipxact:description>&lt;b&gt;AR: Expand Description: P3520=Read, 1=Write&#x2026;.., endian for the payload, Manual code the IRQ in the CSB &lt;/b&gt;
                                &lt;ul&gt;  Each bit indicate target CSB message with specific opcode matched but dropped due to unsupported EOM length.
                                        Bit mapping to opcode:
                                        [0] = Custom register read
                                        [1] = Custom register write
                                        [2] = MMIO read
                                        [3] = MMIO write
                                        [4] = FLR completed
                                        [5] = Error reporting message
                                        [6] = PRS message
                                        [7] = TX VF Error
                                        [8] = MSI interrupt
                                        [9] = legacy sys_int interrupt
				        [10] = PCIe Power Management Message
                                        [11] = CII request completion
                                        [12] = PCI VirtIO request completion
                                        [13} = Virtual Wire
					[14] = Hot Plug
					[15] = Reset Ack
                                &lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>csb_mmio_access_ctrl</ipxact:name>
          <ipxact:description>csb_mmio_access_ctrl</ipxact:description>
          <ipxact:addressOffset>0x230</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>grant</ipxact:name>
            <ipxact:description>&lt;b&gt;Access grant to MMIO to access port CSR and SRAM region.&lt;/b&gt;
&lt;ul&gt; &lt;li&gt;Bit 0 = 000 - 03F (PORT_CSR)
       &lt;li&gt;Bit 1 = 040 - 07F (PORT_CSR)
       &lt;li&gt;Bit 2 = 080 - 08F (PORT_CSR)
       &lt;li&gt;Bit 3 = 090 - 0BF (PORT_CSR)
       &lt;li&gt;Bit 4 = 0C0 - 0FF (PORT_CSR)
       &lt;li&gt;Bit 5 = 100 - 14F (PORT_CSR)
       &lt;li&gt;Bit 6 = 150 - 18F (PORT_CSR)
       &lt;li&gt;Bit 7 = 190 - 19F (PORT_CSR)
       &lt;li&gt;Bit 8 = 200 - 23F (PORT_CSR)
       &lt;li&gt;Bit 9 = 240 - 3FF (PORT_CSR)
       &lt;li&gt;Bit 10 = 400 - 41F (PORT_CSR)
       &lt;li&gt;Bit 11 = 420 - 483 (PORT_CSR)
       &lt;li&gt;Bit 12 = 4A0 - FFF (PORT_CSR)
       &lt;li&gt;Bit 13 = 1000 - 3FFF/1FFF (RAM)
       &lt;li&gt;Bit 14 = RESERVED
       &lt;li&gt;Bit 15 = RESERVED
       &lt;li&gt;Bit 16 = 0000 - 0FFF (DWIP)
       &lt;li&gt;Bit 17 = 1000 - 103F (USER_UPPER)
       &lt;li&gt;Bit 18 = 1040 - 107F (USER_UPPER)
       &lt;li&gt;Bit 19 = 1080 - 1157 (USER_UPPER)
       &lt;li&gt;Bit 20 = 1158 - 115B (USER_UPPER)
       &lt;li&gt;Bit 21 = 115c - 12FF (USER_UPPER)
       &lt;li&gt;Bit 22 = 1300 - 130F (USER_UPPER)
       &lt;li&gt;Bit 23 = 1310 - 1317 (USER_UPPER)
       &lt;li&gt;Bit 24 = 1318 - 131F (USER_UPPER)
       &lt;li&gt;Bit 25 = 1320 - 13FF (USER_UPPER)
       &lt;li&gt;Bit 26 = 1400 - 17FF (USER_UPPER)
       &lt;li&gt;Bit 27 = 1800 - 1FFF (USER_UPPER)
       &lt;li&gt;Bit 28 = RESERVED
       &lt;li&gt;Bit 29 = RESERVED
       &lt;li&gt;Bit 30 = RESERVED
       &lt;li&gt;Bit 31 = RESERVED
&lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_0</ipxact:name>
          <ipxact:description>cii_range_0</ipxact:description>
          <ipxact:addressOffset>0x234</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size0</ipxact:name>
            <ipxact:description>Physical Functions that is subject to Configuration Cycles to be intercept/halt. Each bit refers to 1 PF. Together with '*cii_addr_size' and '*cii_start_addr' it define the range for CII to take effect. User can define up to 8 address range for CII. This is for range 0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr0</ipxact:name>
            <ipxact:description>Starting Address for Configuration Cycles to be intercept/halt. Together with '*cii_addr_size' and '*cii_pf_en' it define the range for CII to take effect. User can define up to 8 address range for CII. This is for range 0.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en0</ipxact:name>
            <ipxact:description>Address Size for Configuration Cycles to be intercept/halt. Together with '*cii_start_addr' and '*cii_pf_en' it define the range for CII to take effect. User can define up to 8 address range for CII. This is for range 0.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_1</ipxact:name>
          <ipxact:description>cii_range_1</ipxact:description>
          <ipxact:addressOffset>0x238</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size1</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 1.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr1</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 1.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en1</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 1.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_2</ipxact:name>
          <ipxact:description>cii_range_2</ipxact:description>
          <ipxact:addressOffset>0x23c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size2</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 2.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr2</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 2.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en2</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 2.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_3</ipxact:name>
          <ipxact:description>cii_range_3</ipxact:description>
          <ipxact:addressOffset>0x240</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size3</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 3.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr3</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 3.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en3</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 3.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_4</ipxact:name>
          <ipxact:description>cii_range_4</ipxact:description>
          <ipxact:addressOffset>0x244</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size4</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 4.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr4</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 4.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en4</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 4.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_5</ipxact:name>
          <ipxact:description>cii_range_5</ipxact:description>
          <ipxact:addressOffset>0x248</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size5</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 5.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr5</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 5.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en5</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 5.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_6</ipxact:name>
          <ipxact:description>cii_range_6</ipxact:description>
          <ipxact:addressOffset>0x24c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size6</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 6.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr6</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 6.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en6</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 6.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>cii_range_7</ipxact:name>
          <ipxact:description>cii_range_7</ipxact:description>
          <ipxact:addressOffset>0x250</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_addr_size7</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 7.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_start_addr7</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 7.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_pf_en7</ipxact:name>
            <ipxact:description>Similar to cii_range_0. This is for range 7.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pciss_dfd_ltssm_logger</ipxact:name>
          <ipxact:description>pciss_dfd_ltssm_logger</ipxact:description>
          <ipxact:addressOffset>0x254</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_ctrl_mask_vec</ipxact:name>
            <ipxact:description>masks mac_phy_rate [8:6] ltssm_state [5:0]</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x7fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_ctrl_start</ipxact:name>
            <ipxact:description>when set, LTSSM logger freezes  - resets (sync)  some of the block features</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_ctrl_clear</ipxact:name>
            <ipxact:description>when set, LTSSM logger is being cleared</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_ctrl_dis_wa</ipxact:name>
            <ipxact:description>1: Record first NUM_OFLOGGED_STATE,  0: record last NUM_OFLOGGED_STATE changes</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_rd_req</ipxact:name>
            <ipxact:description>user requests to read from logger memory</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x1fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pciss_dfd_ltssm_logger_strt</ipxact:name>
          <ipxact:description>pciss_dfd_ltssm_logger_strt</ipxact:description>
          <ipxact:addressOffset>0x258</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_strt_acnfg</ipxact:name>
            <ipxact:description>&lt;b&gt;SELA : 0 - manual [set=1], &lt;/b&gt;
                                &lt;ul&gt; 1 - Rate match event using pciss_dfd_ltssm_logger_strt_RATE_MTCH [2:0] to call the rate to be matched, 
                                       2 - State match event using pciss_dfd_ltssm_logger_strt_STATE_MTCH [5:0] to call the state to be matched
				&lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_strt_bcnfg</ipxact:name>
            <ipxact:description>&lt;b&gt; SELB : 0 - manual [set=1] &lt;/b&gt;
                                &lt;ul&gt; 1 - Rate match event using pciss_dfd_ltssm_logger_strt_RATE_MTCH [2:0] to call the rate to be matched, 
                                       2 - State match event using pciss_dfd_ltssm_logger_strt_STATE_MTCH [5:0] to call the state to be matched
				&lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_strt_xcnfg</ipxact:name>
            <ipxact:description>boolean function between SELA/B</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_strt_rate_mtch</ipxact:name>
            <ipxact:description>when pciss_dfd_ltssm_logger_strt_ACNFG/PCISS_DFD_LTSSM_LOGGER_STRT_BCNFG = 2, assert start trigger when rate match</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_strt_state_mtch</ipxact:name>
            <ipxact:description>when pciss_dfd_ltssm_logger_strt_ACNFG/PCISS_DFD_LTSSM_LOGGER_STRT_BCNFG = 1, assert start trigger when rate match</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_strt_delay_reg</ipxact:name>
            <ipxact:description>delay start trigger by N clock cycles</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pciss_dfd_ltssm_logger_stp</ipxact:name>
          <ipxact:description>pciss_dfd_ltssm_logger_stp</ipxact:description>
          <ipxact:addressOffset>0x25c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_stp_acnfg</ipxact:name>
            <ipxact:description>&lt;b&gt;SELA : 0 - manual [set=1], &lt;/b&gt;
                                &lt;ul&gt; 1 - Rate match event using pciss_dfd_ltssm_logger_stp_RATE_MTCH [2:0] to call the rate to be matched, 
                                       2 - State match event using pciss_dfd_ltssm_logger_stp_STATE_MTCH [5:0] to call the state to be matched
				&lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_stp_bcnfg</ipxact:name>
            <ipxact:description>&lt;b&gt; SELB : 0 - manual [set=1] &lt;/b&gt;
                                &lt;ul&gt; 1 - Rate match event using pciss_dfd_ltssm_logger_stp_RATE_MTCH [2:0] to call the rate to be matched, 
                                       2 - State match event using pciss_dfd_ltssm_logger_stp_STATE_MTCH [5:0] to call the state to be matched
				&lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_stp_xcnfg</ipxact:name>
            <ipxact:description>boolean function between SELA/B</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_stp_rate_mtch</ipxact:name>
            <ipxact:description>when pciss_dfd_ltssm_logger_stp_ACNFG/PCISS_DFD_LTSSM_LOGGER_STP_BCNFG = 2, assert start trigger when rate match</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_stp_state_mtch</ipxact:name>
            <ipxact:description>when pciss_dfd_ltssm_logger_stp_ACNFG/PCISS_DFD_LTSSM_LOGGER_STP_BCNFG = 1, assert start trigger when rate match</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_stp_delay_reg</ipxact:name>
            <ipxact:description>delay start trigger by N clock cycles</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pciss_dfd_ltssm_logger_rd</ipxact:name>
          <ipxact:description>pciss_dfd_ltssm_logger_rd</ipxact:description>
          <ipxact:addressOffset>0x260</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>pciss_dfd_ltssm_logger_rd_data</ipxact:name>
            <ipxact:description>data from logger memory only, valid when pciss_dfd_ltssm_logger_ack is set</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xdeadbeef</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ab_sel</ipxact:name>
          <ipxact:description>ab_sel</ipxact:description>
          <ipxact:addressOffset>0x264</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_a_mux_sel</ipxact:name>
            <ipxact:description>selects the signal to propagate through the stretch sub block to the output signal ev_sel_a</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_a_bus_mux_sel</ipxact:name>
            <ipxact:description>controls the bus to enter the equator with CSR_BUS_MTCH</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_bus_mtch</ipxact:name>
            <ipxact:description>value to match with the selected bus by CSR_A_BUS_MUX_SEL</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_b_mux_sel</ipxact:name>
            <ipxact:description>selects the signal to propagate through the stretch sub block to the output signal ev_sel_b</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>ab_strtch</ipxact:name>
          <ipxact:description>ab_strtch</ipxact:description>
          <ipxact:addressOffset>0x268</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_a_strtch</ipxact:name>
            <ipxact:description>&lt;b&gt;calls the number of CC for the signal to be stretched &lt;/b&gt;
	&lt;ul&gt; -0x00: no stretch
               -0x3F: pulse to level &#x2013; on first pulse the output signal will be level infinitely (high or low depends on CSR_A_STRTCH_LOW) until next clear
        &lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_a_strtch_low</ipxact:name>
            <ipxact:description>when set, stretch output low if negedge input</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_a_strtch_clear</ipxact:name>
            <ipxact:description>used to unset stretch and output</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_b_strtch</ipxact:name>
            <ipxact:description>&lt;b&gt;calls the number of CC for the signal to be stretched&lt;/b&gt;
&lt;ul&gt; -0x00: no stretch
       -0x3F: pulse to level &#x2013; on first pulse the output signal will be level infinitely (high or low depends on CSR_B_STRTCH_LOW) until next clear
&lt;/ul&gt;</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_b_strtch_low</ipxact:name>
            <ipxact:description>when set, stretch output low if negedge input</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_b_strtch_clear</ipxact:name>
            <ipxact:description>used to unset stretch and output</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>c_lvl1_upper</ipxact:name>
          <ipxact:description>c_lvl1_upper</ipxact:description>
          <ipxact:addressOffset>0x26c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_10</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_11</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_12</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_13</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_14</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_15</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x3fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>14</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>c_lvl1_lower</ipxact:name>
          <ipxact:description>c_lvl1_lower</ipxact:description>
          <ipxact:addressOffset>0x270</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_0</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_1</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_2</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_3</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_4</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_5</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_6</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_7</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_8</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl1_mux_sel_9</ipxact:name>
            <ipxact:description>creates a bus of 16 signals (out of 128) that enters the next C mux bus level (LVL2). The bus name is mux_c_lvl1_out</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>c_lvl2</ipxact:name>
          <ipxact:description>c_lvl2</ipxact:description>
          <ipxact:addressOffset>0x274</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>csr_c_lvl2_mux_sel_0</ipxact:name>
            <ipxact:description>selects one of the bits in the bus created by level 1 to be on each bit of ev_sel_c_bus</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl2_mux_sel_1</ipxact:name>
            <ipxact:description>selects one of the bits in the bus created by level 1 to be on each bit of ev_sel_c_bus</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl2_mux_sel_2</ipxact:name>
            <ipxact:description>selects one of the bits in the bus created by level 1 to be on each bit of ev_sel_c_bus</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl2_mux_sel_3</ipxact:name>
            <ipxact:description>selects one of the bits in the bus created by level 1 to be on each bit of ev_sel_c_bus</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl2_mux_sel_4</ipxact:name>
            <ipxact:description>selects one of the bits in the bus created by level 1 to be on each bit of ev_sel_c_bus</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>csr_c_lvl2_mux_sel_5</ipxact:name>
            <ipxact:description>selects one of the bits in the bus created by level 1 to be on each bit of ev_sel_c_bus</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pld_error_ctrl_log_reg</ipxact:name>
          <ipxact:description>pld_error_ctrl_log_reg</ipxact:description>
          <ipxact:addressOffset>0x278</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>serr_parity_err_resp_en</ipxact:name>
            <ipxact:description>Enables SERR to be sent for Parity Error</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x7fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>header_parity_err_det</ipxact:name>
            <ipxact:description>Header Parity Error is Detected</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>data_parity_err_det</ipxact:name>
            <ipxact:description>Data Parity Error is Detected</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tlast_err_det</ipxact:name>
            <ipxact:description>Tlast is not detected for more than 1 MPS</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_2</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x1fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>virtio_cii_ctrl</ipxact:name>
          <ipxact:description>virtio_cii_ctrl</ipxact:description>
          <ipxact:addressOffset>0x27c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>k_cii_en</ipxact:name>
            <ipxact:description>Configuration Intercept Interface enable. Depending on decoding range set in 'TBD', Configuration access targeting a specific address range will be intercept(halt) and override if needed.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>k_cii_monitor</ipxact:name>
            <ipxact:description>If set, CSB message will be generated if there is config write request</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x3fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>30</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>pcie_ctrltop_x4_u0__pcie_ctl_x4_u0__u_core4__u_mem_top__u_sm_hssi_pcie_mem_x4_1__u_mem_x4_cfg__sm_hssi_pcie_ip4_dbi_inst__sm_hssi_pcie_ip4_dbi_block</ipxact:name>
        <ipxact:description>Both non-PCIe visible and PCIe MMIO accessible CSRs</ipxact:description>
        <ipxact:baseAddress>0x80000</ipxact:baseAddress>
        <ipxact:range>0x33ec</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>register</ipxact:usage>
        <ipxact:access>read-write</ipxact:access>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_device_id_vendor_id_reg</ipxact:name>
          <ipxact:description>This register holds the device ID, next offset pointer for RCRB mode and vendor ID.</ipxact:description>
          <ipxact:addressOffset>0x0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_type0_vendor_id</ipxact:name>
            <ipxact:description>Vendor ID.
The Vendor ID register identifies the manufacturer of the Function. Valid vendor identifiers are allocated by the PCI-SIG to ensure uniqueness. It is not permitted to populate this register with a value of FFFFh, which is an invalid value for Vendor ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x8086</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_type0_device_id</ipxact:name>
            <ipxact:description>- DEVICE_ID [31:16]
 - The Device ID register identifies the particular Function for PCIe Type0 and Type1 configuration header. This identifier is allocated by the vendor.
Databook.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_class_code_revision_id</ipxact:name>
          <ipxact:description>This register specifies the class code and revision ID of a function.</ipxact:description>
          <ipxact:addressOffset>0x8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>revision_id</ipxact:name>
            <ipxact:description>Revision ID.
The value in this register specifies a Function specific revision identifier. The value is chosen by the vendor. Zer is an acceptable value. The Revision ID should be viewed as a vendor defined extension to the Device ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>program_interface</ipxact:name>
            <ipxact:description>Prgramming Interface.
This field identifies a specific register-level prgramming interface (if any) so that device independent software can interact with the Function.
Encodings for interface are prvided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subclass_code</ipxact:name>
            <ipxact:description>Sub-Class Code.
Specifies a base class sub-class, which identifies more specifically the operation of the Function.
Encodings for sub-class are prvided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>base_class_code</ipxact:name>
            <ipxact:description>Base Class Code.
A code that bradly classifies the type of operation the Function performs.
Encodings for base class, are prvided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bist_header_type_latency_cache_line_size_reg</ipxact:name>
          <ipxact:description>This register provides the status and controls BIST. It also holds information regarding the header layout, latency timer, and cache line size.</ipxact:description>
          <ipxact:addressOffset>0xc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_type</ipxact:name>
            <ipxact:description>Header Layout.
This field identifies the layout of the second part of the predefined header.
The contrller uses 000 0000b encoding.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>multi_func</ipxact:name>
            <ipxact:description>Multi-Function Device.
Except where stated otherwise, it is recommended that this bit be set if there are multiple Functions, and clear if there is only one Function.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bar0_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar0_mem_io</ipxact:name>
            <ipxact:description>- BAR0 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_type</ipxact:name>
            <ipxact:description>-  BAR0 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_prefetch</ipxact:name>
            <ipxact:description>- BAR0 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_start</ipxact:name>
            <ipxact:description>- BAR0_START. BAR0 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bar1_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar1_mem_io</ipxact:name>
            <ipxact:description>- BAR1 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_type</ipxact:name>
            <ipxact:description>- BAR1 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_prefetch</ipxact:name>
            <ipxact:description>- BAR1 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_start</ipxact:name>
            <ipxact:description>- BAR1 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bar2_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar2_mem_io</ipxact:name>
            <ipxact:description>BAR2 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_type</ipxact:name>
            <ipxact:description>BAR2 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_prefetch</ipxact:name>
            <ipxact:description>BAR2 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_start</ipxact:name>
            <ipxact:description>BAR2 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bar3_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar3_mem_io</ipxact:name>
            <ipxact:description>BAR3 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_type</ipxact:name>
            <ipxact:description>BAR3 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_prefetch</ipxact:name>
            <ipxact:description>BAR3 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_start</ipxact:name>
            <ipxact:description>BAR3 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bar4_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar4_mem_io</ipxact:name>
            <ipxact:description>BAR4 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_type</ipxact:name>
            <ipxact:description>BAR4 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_prefetch</ipxact:name>
            <ipxact:description>BAR4 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_start</ipxact:name>
            <ipxact:description>BAR4 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_bar5_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x24</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar5_mem_io</ipxact:name>
            <ipxact:description>BAR5 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_type</ipxact:name>
            <ipxact:description>BAR5 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_prefetch</ipxact:name>
            <ipxact:description>BAR5 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_start</ipxact:name>
            <ipxact:description>BAR5 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_cardbus_cis_ptr_reg</ipxact:name>
          <ipxact:description>This register holds the CardBus CIS pointer.</ipxact:description>
          <ipxact:addressOffset>0x28</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cardbus_cis_pointer</ipxact:name>
            <ipxact:description>CardBus CIS Pointer.
Its functionality does not apply to PCI Express. It must be hardwired to 0000 0000h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_subsystem_id_subsystem_vendor_id_reg</ipxact:name>
          <ipxact:description>These registers are used to uniquely identify the add-in card or subsystem where the PCI Express component resides. They provide a mechanism for vendors to distinguish their products from one another even though the assemblies may have the same PCI Express component on them (and, therefore, the same Vendor ID and Device ID).</ipxact:description>
          <ipxact:addressOffset>0x2c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>subsys_vendor_id</ipxact:name>
            <ipxact:description>Subsystem Vendor ID.
Subsystem Vendor IDs can be obtained frm the PCI SIG and are used to identify the vendor of the add-in card or subsystem. Values for the Subsystem ID are vendor-specific.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subsys_dev_id</ipxact:name>
            <ipxact:description>Subsystem ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_exp_rom_base_addr_reg</ipxact:name>
          <ipxact:description>This register handles the base address and size information for this expansion ROM.</ipxact:description>
          <ipxact:addressOffset>0x30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rom_bar_enable</ipxact:name>
            <ipxact:description>Expansion rM Enable.
This bit contrls whether or not the Function accepts accesses to its expansion rM.
The Memory Space Enable bit in the Command register has precedence over the Expansion rM Enable bit. A Function must claim accesses to its expansion rM only if both the Memory Space Enable bit and the Expansion rM Enable bit are set.


Note: The access attributes of this field are as follows:
 - Wire: if (EXP_rM_BAR_MASK_REG.rM_BAR_ENABLED == 1) then R/W else R 
 - Dbi: if (EXP_rM_BAR_MASK_REG.rM_BAR_ENABLED == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_pci_cap_ptr_reg</ipxact:name>
          <ipxact:description>This register is used to point to a linked list of capabilities implemented by a Function.</ipxact:description>
          <ipxact:addressOffset>0x34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_pointer</ipxact:name>
            <ipxact:description>Capabilities Pointer. This register points to a valid capability structure. Either this structure is the PCI Express Capability structure, or a subsequent list item points to the PCI Express Capability structure. The bottom tw bits are reserved, the contrller sets it to 00b. Software must mask these bits off before using this register as a pointer in Configuration Space to the first entry of a linked list of new capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type1_hdr_type1_exp_rom_base_reg</ipxact:name>
          <ipxact:addressOffset>0x38</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rom_bar_enable</ipxact:name>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>exp_rom_base_address</ipxact:name>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x1fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>21</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_type0_hdr_max_latency_min_grant_interrupt_pin_interrupt_line_reg</ipxact:name>
          <ipxact:description>The Interrupt Line register communicates interrupt line routing information. The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses.</ipxact:description>
          <ipxact:addressOffset>0x3c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>int_pin</ipxact:name>
            <ipxact:description>Interrupt Pin.
The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses. All encodings other than the defined encodings are reserved.
PCI Express defines one legacy interrupt Message for a single Function device and up to four legacy interrupt Messages for a multi-Function device. For a single Function device, only INTA may be used.

Any Function on a multi-Function device can use any of the INTx Messages. If a device implements a single legacy interrupt Message, it must be INTA; if it implements tw legacy interrupt Messages, they must be INTA and INTB; and so forth.
For a multi-Function device, all Functions may use the same INTx Message or each may have its own (up to a maximum of four Functions) or any combination thereof. A single Function can never generate an interrupt request on more than one INTx Message.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pm_cap_cap_id_nxt_ptr_reg</ipxact:name>
          <ipxact:description>This register provides information refarding the Power Management Capabilities.</ipxact:description>
          <ipxact:addressOffset>0x40</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pm_next_pointer</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field prvides an offset into the function's configuration space pointing to the location of next item in the capabilities list. If there are no additional items in the capabilities list, this field is set to 00h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pm_spec_ver</ipxact:name>
            <ipxact:description>Version.
This field prvides the Power Management specification version. The contrller hardwires this field to 011b for functions compliant to PCI Express Base Specification, Revision 4.0, Version 1.0&gt;.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_clk</ipxact:name>
            <ipxact:description>PME Clock.
Does not apply to PCI Express, the contrller hardwires it to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsi</ipxact:name>
            <ipxact:description>Device Specific Initialization.
The DSI bit indicates whether special initialization of this function is required.

When set, indicates that the function requires a device specific initialization sequence following a transition to the D0uninitialized state.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>aux_curr</ipxact:name>
            <ipxact:description>Aux_Current.
This 3 bit field reports the Vaux auxiliary current requirements for the function.

If this function implements the Data Register, the contrller hardwires this field to 000b.

If PME_Support is 0 xxxxb (PME assertion frm D3cold is not supported), the contrller hardwires this field to 0000b.

For functions where PME_Support is 1 xxxxb (PME assertion frm D3cold is supported), and which do not implement the Data field, the encodings defined in Values: apply:


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d1_support</ipxact:name>
            <ipxact:description>D1_Support.
If this bit is set, this function supports the D1 Power Management state. Functions that do not support D1 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d2_support</ipxact:name>
            <ipxact:description>D2_Support.
If this bit is set, this function supports the D2 Power Management state. Functions that do not support D2 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_support</ipxact:name>
            <ipxact:description>PME_Support.
This 5-bit field indicates the power states in which the function may generate a PME and/or forward PME messages.
A value of 0b for any bit indicates that the function is not capable of asserting PME while in that power state.
 - bit(27) X XXX1b - PME can be generated frm D0
 - bit(28) X XX1Xb - PME can be generated frm D1
 - bit(29) X X1XXb - PME can be generated frm D2
 - bit(30) X 1XXXb - PME can be generated frm D3hot
 - bit(31) 1 XXXXb - PME can be generated frm D3cold
Bit 31 (PME can be asserted frm D3cold) represents a special case. Functions that set this bit require some sort of auxiliary power source. Implementation specific mechanisms are recommended to validate that the power source is available before setting this bit.

Each bit that corresponds to a supported D-state must be set for PCI-PCI Bridge structures representing Ports on rot Complexes/Switches to indicate that the Bridge will forward PME Messages. Bit 31 must only be set if the Port is still able to forward PME Messages when main power is not available.

The read value frm this field is the write value &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where D1_SUPPORT and D2_SUPPORT are fields in this register.

The reset value PME_SUPPORT_n &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where PME_SUPPORT_n is a configuration parameter.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pm_cap_con_status_reg</ipxact:name>
          <ipxact:description>This register is used to manage the PCI function's power management state as well as to enable/monitor PMEs.</ipxact:description>
          <ipxact:addressOffset>0x44</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>power_state</ipxact:name>
            <ipxact:description>PowerState.
This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state.
You can write to this register; however, the read-back value is the actual power state, not the write value. If you attempt to write an unsupported, optional state to this field, the write operation completes normally; however, the data is discarded and no state change occurs.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>no_soft_rst</ipxact:name>
            <ipxact:description>No_Soft_Reset.
This bit indicates the state of the function after writing the PowerState field to transition the function frm D3hot to D0.
 - When set, this transition preserves internal function state. The function is in D0Active and no additional software intervention is required.
 - When clear, this transition results in undefined internal function state.
Regardless of this bit, functions that transition frm D3hot to D0 by Fundamental Reset will return to D0Uninitialized with only PME context preserved if PME is supported and enabled.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_4</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_msi_cap_pci_msi_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This register holds MSI Capability Header information and controls the MSI behaviour.</ipxact:description>
          <ipxact:addressOffset>0x50</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msi_cap_next_offset</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_enable</ipxact:name>
            <ipxact:description>MSI Enable.
 - If set and the MSI-X Enable bit in the MSI-X Message Contrl register is clear, the function is permitted to use MSI to request service and is prhibited frm using INTx interrupts. System configuration software sets this bit to enable MSI. A device driver is prhibited frm writing this bit to mask a function's service request. For more information on contrl of INTx interrupts, see section 7.5.1.1 of PCI Express Base Specification.
 - If clear, the function is prhibited frm using MSI to request service.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_cap</ipxact:name>
            <ipxact:description>Multiple Message Capable.
System software reads this field to determine the number of requested vectors. The number of requested vectors must be aligned to a power of tw (if a function requires three vectors, it requests four by initializing this field to 010b). All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_en</ipxact:name>
            <ipxact:description>Multiple Message Enable.
Software writes to this field to indicate the number of allocated vectors (equal to or less than the number of requested vectors). The number of allocated vectors is aligned to a power of tw. If a function requests four vectors (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, tw, or one vector by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a function will be allocated at least 1 vector. All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_64_bit_addr_cap</ipxact:name>
            <ipxact:description>64 bit address capable.
This bit must be set if the function is a PCI Express Endpoint.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_pvm_support</ipxact:name>
            <ipxact:description>Per-Vector Masking Capable.
 - If set, the function supports MSI Per-Vector Masking.
 - If clear, the function does not support MSI Per-Vector Masking.
This bit must be set if the function is a PF or VF within an SR-IOV Device.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_cap</ipxact:name>
            <ipxact:description>Extended Message Data Capable.
 - If set, the function is capable of prviding Extended Message Data.
 - If clear, the function does not support prviding Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_en</ipxact:name>
            <ipxact:description>Extended Message Data Enable.
 - If set, the function is enabled to prvide Extended Message Data.
 - If clear, the function is not enabled to prvide Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP ? rw : r 
 - Dbi: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP  ? rw : r</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_pcie_cap_id_pcie_next_cap_ptr_pcie_cap_reg</ipxact:name>
          <ipxact:description>This is the PCI Express Capabilities, ID, and Next Pointer Register.</ipxact:description>
          <ipxact:addressOffset>0x70</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer. This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_slot_imp</ipxact:name>
            <ipxact:description>Slot Implemented. When set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled). This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_int_msg_num</ipxact:name>
            <ipxact:description>PCIE Interrupt Message Number.
Interrupt Message Number. This field indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.

For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Contrl register.

For MSI-X, the value in this field indicates which MSI-X Table entry is used to generate the interrupt message. The entry must be one of the first 32 entries even if the Function implements more than 32 entries. For a given MSI-X implementation, the entry must remain constant.

If both MSI and MSI-X are implemented, they are permitted to use different vectors, though software is permitted to enable only one mechanism at a time. If MSI-X is enabled, the value in this field must indicate the vector for MSI-X. If MSI is enabled or neither is enabled, the value in this field must indicate the vector for MSI. If software enables both MSI and MSI-X at the same time, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvd</ipxact:name>
            <ipxact:description>Reserved.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_31</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_device_capabilities_reg</ipxact:name>
          <ipxact:description>The Device Capabilities register identifies PCI Express device function specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x74</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_payload_size</ipxact:name>
            <ipxact:description>Max_Payload_Size Supported.
This field indicates the maximum payload size that the function can support for TLPs.
All encodings other than the defined encodings are reserved.
The functions of a Multi-Function Device are permitted to report different values for this field.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_support</ipxact:name>
            <ipxact:description>Phantom Functions Supported.
This field indicates the support for use of unclaimed function numbers to extend the number of outstanding transactions allowed by logically combining unclaimed function numbers (called Phantom Functions) with the Tag identifier (see Section 2.2.6.2 of PCI Express Base Specification for a description of Tag Extensions).

With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI Multi-Function Devices.

This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
Note: Phantom Function support for the function must be enabled by the Phantom Functions Enable field in the Device Contrl register before the Function is permitted to use the Function Number field in the Requester ID for Phantom Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_supp</ipxact:name>
            <ipxact:description>Extended Tag Field Supported.
This bit, in combination with the 10-Bit Tag Requester Supported bit in the Device Capabilities 2 register, indicates the maximum supported size of the Tag field as a Requester. This bit must be set if the 10-Bit Tag Requester Supported bit is set.
Note: 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Contrl register of the Requester Function before 8-bit Tags can be generated by the Requester. See Section 2.2.6.2 of PCI Express Base Specification for interactions with enabling the use of 10-Bit Tags.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l0s_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L0s Acceptable Latency. This field indicates the acceptable total latency that an Endpoint can withstand due to the transition frm L0s state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.

Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path frm this Endpoint to the rot Complex rot Port to determine whether ASPM L0s entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the contrller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l1_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L1 Acceptable Latency. This field indicates the acceptable latency that an Endpoint can withstand due to the transition frm L1 state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.
Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path frm this Endpoint to the rot Complex rot Port to determine whether ASPM L1 entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the contrller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W (Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_role_based_err_report</ipxact:name>
            <ipxact:description>rle-Based Errr Reporting. When set, this bit indicates that the function implements the functionality originally defined in the Errr Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1. This bit must be set by all functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_16</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_flr_cap</ipxact:name>
            <ipxact:description>Function Level Reset Capability. A value of 1b indicates the function supports the optional Function Level Reset mechanism described in section 6.6.2 of the PCI Express Base Specification.

This bit applies to Endpoints only. For all other function types the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_29</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_device_control_device_status</ipxact:name>
          <ipxact:description>This register controls PCI Express device specific parameters and provides information about PCI Express device (function) specific parameters.</ipxact:description>
          <ipxact:addressOffset>0x78</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_en</ipxact:name>
            <ipxact:description>Extended Tag Field Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Contrl 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If the Extended Tag Field Enable bit is set, the function is permitted to use an 8-bit Tag field as a Requester
 - If the Extended Tag Field Enable bit is clear, the Function is restricted to a 5-bit Tag field
See section 2.2.6.2 of PCI Express Base Specification for required behavior when the 10-Bit Tag Requester Enable bit is set.

If software changes the value of the Extended Tag Field Enable bit while the function has outstanding Non-Posted Requests, the result is undefined.

For functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? rw : r  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? rw : r</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_en</ipxact:name>
            <ipxact:description>Phantom Functions Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Contrl 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If this bit is set, it enables a function to use unclaimed functions as Phantom functions to extend the number of outstanding transaction identifiers
 - If this bit is clear, the function is not allowed to use Phantom functions
For more information, see section 2.2.6.2 of PCI Express Base Specification.

Software should not change the value of this bit while the function has outstanding Non-Posted Requests; otherwise, the result is undefined.

For functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? rw : r  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? rw : r</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aux_power_pm_en</ipxact:name>
            <ipxact:description>Aux Power PM Enable.
This bit is derived by sampling the sys_aux_pwr_det input.
When set this bit, enables a function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements. Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Contrl/Status register (PMCSR). For Multi-Function devices, a component is allowed to draw Aux power if at least one of the functions has this bit set.
Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such functions, this bit is not modified by Conventional Reset.

For functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_no_snoop</ipxact:name>
            <ipxact:description>Enable No Snoop.
If this bit is set, the function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency (see section 2.2.6.5 in PCI Express Base Specification).
Note: Setting this bit to 1b should not cause a function to set the No Snoop attribute on all transactions that it initiates. Even when this bit is set, a function is only permitted to set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.

The contrller hardwires this bit 0b if a function wuld never set the No Snoop attribute in transactions it initiates.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_read_req_size</ipxact:name>
            <ipxact:description>Max_Read_Request_Size.
This field sets the maximum Read Request size for the function as a Requester. The function must not generate Read Requests with a size exceeding the set value.
For functions that do not generate Read Requests larger than 128 bytes and functions that do not generate Read Requests on their own behalf, the contrller implements this field as Read Only (r) with a value of 000b.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_initiate_flr</ipxact:name>
            <ipxact:description>Initiate Function Level Reset (applicable to Endpoints with Function Level Reset Capability set to 1b).
A write of 1b initiates Function Level Reset to the Function. The value read by software frm this bit is always 0b.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_link_capabilities_reg</ipxact:name>
          <ipxact:description>The Link Capabilities register identifies PCI Express Link specific capabilities and CXL-RCRB link specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x7c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_speed</ipxact:name>
            <ipxact:description>Max Link Speed.
This field indicates the maximum Link speed of the associated Port.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed. All encodings other than the defined encodings are reserved.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_width</ipxact:name>
            <ipxact:description>Maximum Link Width.
This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes ruted to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
All encodings other than the defined encodings are reserved.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x04</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_support</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Support.
This field indicates the level of ASPM supported on the given PCI Express Link. For more information on ASPM support requirements, see section 5.4.1 of PCI Express Base Specification.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l0s_exit_latency</ipxact:name>
            <ipxact:description>L0s Exit Latency.
This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition frm L0s to L0. If L0s is not supported, the value is undefined; however, see the Implementation Note Potential Issues With Legacy Software When L0s is Not Supported in section 5.4.1.1 of PCI Express Base Specification for the recommended value.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are tw each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG) determines which one is used by the contrller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the contrller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the contrller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l1_exit_latency</ipxact:name>
            <ipxact:description>L1 Exit Latency. This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition frm ASPM L1 to L0. If ASPM L1 is not supported, the value is undefined.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are tw each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG) determines which one is used by the contrller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the contrller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the contrller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_clock_power_man</ipxact:name>
            <ipxact:description>Clock Power Management.
For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) thrugh the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2/L3 Ready Link states. A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.

L1 PM Substates defines other semantics for the CLKREQ# signal, which are managed independently of Clock Power Management.

This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.

For a Multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all functions of the Multi-Function device indicate a 1b in this bit. For ARI Devices, all Functions must indicate the same value in this bit.

For Downstream Ports, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_surprise_down_err_rep_cap</ipxact:name>
            <ipxact:description>Surprise Down Errr Reporting Capable.
For a Downstream Port, this bit must be set if the component supports the optional capability of detecting and reporting a Surprise Down errr condition.

For Upstream Ports and components that do not support this optional capability, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active_rep_cap</ipxact:name>
            <ipxact:description>Data Link Layer Link Active Reporting Capable.
For a Downstream Port, the contrller hardwires this bit to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Contrl and Management State Machine. For a hot-plug capable Downstream Port (as indicated by the Hot-Plug Capable bit of the Slot Capabilities register) or a Downstream Port that supports Link speeds greater than 5.0 GT/s, the contrller hardwires this bit to 1b.

For Upstream Ports and components that do not support this optional capability, the contrller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_not_cap</ipxact:name>
            <ipxact:description>Link Bandwidth Notification Capability.
A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms. This capability is required for all rot Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.

This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aspm_opt_compliance</ipxact:name>
            <ipxact:description>ASPM Optionality Compliance.
This field must be set to 1b in all functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.

Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_port_num</ipxact:name>
            <ipxact:description>Port Number.
This field indicates the PCI Express Port number for the given PCI Express Link.
Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_link_control_link_status_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters.</ipxact:description>
          <ipxact:addressOffset>0x80</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_control</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Contrl.
This field contrls the level of ASPM enabled on the given PCI Express Link. See section 5.4.1.3 of PCI Express Base Specification for requirements on when and how to enable ASPM.

Note: L0s Entry Enabled enables the Transmitter to enter L0s. If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled frm entering L0s (00b or 10b).

ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link. When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.

For Multi-Function Devices (including ARI Devices), it is recommended that software prgram the same value for this field in all Functions. For non-ARI Multi-Function Devices, only capabilities enabled in all Functions are enabled for the component as a whole.

For ARI Devices, ASPM Contrl is determined solely by the setting in Function0, regardless of Function 0's D-state. The settings in the other Functions always return whatever value software prgrammed for each, but otherwise are ignored by the component.

Software must not enable L0s in either direction on a given Link unless components on both sides of the Link each support L0s; otherwise, the result is undefined.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_rcb</ipxact:name>
            <ipxact:description>Read Completion Boundary (RCB).


rot Ports:
Indicates the RCB value for the rot Port. Refer to section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB.
The contrller hardwires this bit for a rot Port and returns its RCB support capabilities.



Endpoints and Bridges:
Optionally set by configuration software to indicate the RCB value of the rot Port Upstream frm the Endpoint or Bridge. Refer to Section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB is same as rot Port.
Configuration software must only set this bit if the rot Port Upstream frm the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
For functions that do not implement this feature, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_disable</ipxact:name>
            <ipxact:description>Link Disable.
This bit disables the Link by directing the LTSSM to the Disabled state when set; this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Writes to this bit are immediately reflected in the value read frm the bit, regardless of actual Link state.

After clearing this bit, software must honor timing requirements defined in Section 6.6.1 with respect to the first Configuration Read following a Conventional Reset.

In a DSP that supports crsslink, the contrller gates the write value with the CrSS_LINK_EN field in PORT_LINK_CTRL_OFF.


Note: The access attributes of this field are as follows:
 - Wire: CX_CrSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CrSS_LINK_EN=1||CX_CrSSLINK_ENABLE=0 &amp;&amp; dsp=1 ? rw : r 
 - Dbi: CX_CrSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CrSS_LINK_EN=1||CX_CrSSLINK_ENABLE=0 &amp;&amp; dsp=1? rw : r</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retrain_link</ipxact:name>
            <ipxact:description>Retrain Link.
A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. If the Port is in DPC when a write of 1b to this bit occurs, the result is undefined. Reads of this bit always return 0b.

It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in prgress.

This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

This bit always returns 0b when read.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_common_clk_config</ipxact:name>
            <ipxact:description>Common Clock Configuration. When set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.

A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchrnous reference clock.

For non-ARI Multi-Function Devices, software must prgram the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.

For ARI Devices, Common Clock Configuration is determined solely by the setting in Function 0. The settings in the other Functions always return whatever value software prgrammed for each, but otherwise are ignored by the component.

Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.

After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_extended_synch</ipxact:name>
            <ipxact:description>Extended Synch. When set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state (see section 4.2.4.5 of PCI Express Base Specification) and when in the Recovery state (see section 4.2.6.4.1 of PCI Express Base Specification). This mode prvides external devices (for example, logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.

For Multi-Function devices if any function has this bit set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_clk_power_man</ipxact:name>
            <ipxact:description>Enable Clock Power Management.
Applicable only for Upstream Ports and with form factors that support a Clock Request (CLKREQ#) mechanism, this bit operates as follows:
For a non-ARI Multi-Function Device, power-management-configuration software must only Set this bit if all Functions of the Multi-Function Device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.

For ARI Devices, Clock Power Management is enabled solely by the setting in Function 0. The settings in the other Functions always return whatever value software prgrammed for each, but otherwise are ignored by the component.
The CLKREQ# signal may also be contrlled thrugh the L1 PM Substates mechanism. Such contrl is not affected by the setting of this bit.

For Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register), the contrller hardwires this bit to 0b.

The write value is gated with the PCIE_CAP_CLOCK_POWER_MAN field in LINK_CAPABILITIES_REG.

Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? rwS : rS 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? rwS : rS 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_int_en</ipxact:name>
            <ipxact:description>Link Bandwidth Management Interrupt Enable. When set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r  
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_int_en</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Management Interrupt Enable.
When set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_nego_link_width</ipxact:name>
            <ipxact:description>Negotiated Link Width. This field indicates the negotiated width of the given PCI Express Link.
All encodings other than the defined encodings are reserved.
The value in this field is undefined when the Link is not up.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_training</ipxact:name>
            <ipxact:description>Link Training. This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches, and the contrller hardwires it to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_slot_clk_config</ipxact:name>
            <ipxact:description>Slot Clock Configuration. This bit indicates that the component uses the same physical reference clock that the platform prvides on the connector. If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.

For a Multi-Function Device, each Function must report the same value for this bit.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active</ipxact:name>
            <ipxact:description>Data Link Layer Link Active. This bit indicates the status of the Data Link Contrl and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.

This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, the contrller hardwires it to 0b.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_status</ipxact:name>
            <ipxact:description>Link Bandwidth Management Status. This bit is set by hardware to indicate that either of the following has occurred without the Port transitioning thrugh DL_Down status:

 A Link retraining has completed following a write of 1b to the Retrain Link bit.

Note: This bit is set following any write of 1b to the Retrain Link bit, including when the Link is in the prcess of retraining for some other reason.

 Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either thrugh an LTSSM timeout or a higher level prcess.

 This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.
The default value of this bit is 0b.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_status</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Status. This bit is set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning thrugh DL_Down status, for reasons other than to attempt to correct unreliable Link operation.

This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_slot_capabilities_reg</ipxact:name>
          <ipxact:addressOffset>0x84</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_attention_indicator_button</ipxact:name>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_power_controller</ipxact:name>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_mrl_sensor</ipxact:name>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_attention_indicator</ipxact:name>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_power_indicator</ipxact:name>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_hot_plug_surprise</ipxact:name>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_hot_plug_capable</ipxact:name>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_slot_power_limit_value</ipxact:name>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_slot_power_limit_scale</ipxact:name>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_electromech_interlock</ipxact:name>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_no_cmd_cpl_support</ipxact:name>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phy_slot_num</ipxact:name>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x1fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_root_control_root_capabilities_reg</ipxact:name>
          <ipxact:addressOffset>0x8c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_crs_sw_visibility</ipxact:name>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_17</ipxact:name>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x7fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_device_capabilities2_reg</ipxact:name>
          <ipxact:description>This register identifies PCI Express device specific capabilities; in addition to the Device Capabilities Register.</ipxact:description>
          <ipxact:addressOffset>0x94</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_range</ipxact:name>
            <ipxact:description>Completion Timeout Ranges Supported. This field indicates device Function support for the optional Completion Timeout prgrammability mechanism. This mechanism allows system software to modify the Completion Timeout value.
This field is applicable only to rot Ports, Endpoints that issue Requests on their own behalf, and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express. For all other Functions this field is Reserved and must be hardwired to 0000b.
Four time value ranges are defined:
 - Range A: 50 us to 10 ms
 - Range B: 10 ms to 250 ms
 - Range C: 250 ms to 4 s
 - Range D: 4 s to 64 s
Bits are set according to the list below to show timeout value ranges supported.
All encodings other than the defined encodings are reserved.
It is strngly recommended that the Completion Timeout mechanism not expire in less than 10 ms.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xf</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_disable_support</ipxact:name>
            <ipxact:description>Completion Timeout Disable Supported. A value of 1b indicates support for the Completion Timeout Disable mechanism.
The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.

This mechanism is optional for rot Ports.

For all other Functions this field is Reserved and the contrller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ari_forward_support</ipxact:name>
            <ipxact:description>ARI Forwarding Supported. Applicable only to Switch Downstream Ports and rot Ports; must be 0b for other Function types. This bit must be set to 1b if a Switch Downstream Port or rot Port supports this optional capability. For more information, see section 6.13 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_atomic_routing_supp</ipxact:name>
            <ipxact:description>AtomicOp ruting Supported. Applicable only to Switch Upstream Ports, Switch Downstream Ports, and rot Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_32_atomic_cpl_supp</ipxact:name>
            <ipxact:description>32-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all rot Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_64_atomic_cpl_supp</ipxact:name>
            <ipxact:description>64-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all rot Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_128_cas_cpl_supp</ipxact:name>
            <ipxact:description>128-bit CAS Completer Supported. Applicable to Functions with Memory Space BARs as well as all rot Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_no_ro_en_pr2pr_par</ipxact:name>
            <ipxact:description>No r-enabled PR-PR Passing. If this bit is set, the ruting element never carries out the passing permitted by Table 2-39 of PCI Express Base Specification entry A2b that is associated with the Relaxed Ordering Attribute field being Set.
This bit applies only for Switches and RCs that support peer-to-peer traffic between rot Ports. This bit applies only to Posted Requests being forwarded thrugh the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
For all other functions, this bit must be 0b.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ltr_supp</ipxact:name>
            <ipxact:description>LTR Mechanism Supported. A value of 1b indicates support for the optional Latency Tolerance Reporting (LTR) mechanism.
rot Ports, Switches and Endpoints are permitted to implement this capability.
For a Multi-Function Device associated with an Upstream Port, each Function must report the same value for this bit.
For Bridges and other Functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_0</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 0.
Value of this bit along with TPH Completer Supported Bit 1 indicates Completer support for TPH or Extended TPH. Applicable only to rot Ports and Endpoints. For all other Functions, this field is Reserved.
For more information, see section 6.17 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_1</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 1.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_ln_sys_cls</ipxact:name>
            <ipxact:description>LN System CLS.
Applicable only to rot Ports and RCRBs; must be 00b for all other Function types. This field indicates if the rot Port or RCRB supports LN prtocol as an LN Completer, and if so, what cacheline size is in effect.
All encodings other than the defined encodings are reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_comp_support</ipxact:name>
            <ipxact:description>10-Bit Tag Completer Supported. If this bit is set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_req_support</ipxact:name>
            <ipxact:description>10-Bit Tag Requester Supported. If this bit is set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.

This bit must not be set if the 10-Bit Tag Completer Supported bit is clear.

Note: 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Contrl 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_extnd_fmt_support</ipxact:name>
            <ipxact:description>Extended Fmt Field Supported. If set, the Function supports the 3-bit definition of the Fmt field. If clear, the Function supports a 2-bit definition of the Fmt field. For more information, see section 2.2 of PCI Express Base Specification.

Must be set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.

It is strngly recommended that Functions support the 3-bit definition of the Fmt field.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_end2end_tlp_prfx_support</ipxact:name>
            <ipxact:description>End-End TLP Prefix Supported. Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
All Ports of a Switch must have the same value for this bit.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_max_end2end_tlp_prfxs</ipxact:name>
            <ipxact:description>Max End-End TLP Prefixes.
Indicates the maximum number of End-End TLP Prefixes supported by this Function. For more information,  see Section 2.2.10.2 of PCI Express Base Specification.
If End-End TLP Prefix Supported is clear, this field is RsvdP.

Different rot Ports that have the End-End TLP Prefix Supported bit set are permitted to report different values for this field.

For Switches where End-End TLP Prefix Supported is set, this field must be 00b indicating support for up to four End-End TLP Prefixes.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pcie_cap_link_control2_link_status2_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters; in addition to the Link Control and Link Status Register.</ipxact:description>
          <ipxact:addressOffset>0xa0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_target_link_speed</ipxact:name>
            <ipxact:description>Target Link Speed. For Downstream Ports, this field sets an upper limit on Link operational speed by restricting the values advertised by the Upstream component in its training sequences.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
All encodings other than the defined encodings are reserved.

If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.

If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.

The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform/form factor requires a different default value.

For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.

For Upstream Ports, if the Enter Compliance bit is Clear, this field is permitted to have no effect.

For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this field to 0000b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_compliance</ipxact:name>
            <ipxact:description>Enter Compliance. Software is permitted to force a Link to enter Compliance mode (at the speed indicated in the Target Link Speed field and the de-emphasis/preset level indicated by the Compliance Preset/De-emphasis field) by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.

Default value of this bit following Fundamental Reset is 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_hw_auto_speed_disable</ipxact:name>
            <ipxact:description>Hardware Autonomous Speed Disable. When set, this bit disables hardware frm changing the Link speed for device-specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_sel_deemphasis</ipxact:name>
            <ipxact:description>Selectable De-emphasis. When the Link is operating at 5.0 GT/s speed, this bit is used to contrl the transmit de-emphasis of the link in specific situations. For more information, see section 4.2.6 of PCI Express Base Specification.
When the Link is not operating at 5.0 GT/s speed, the setting of this bit has no effect. Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tx_margin</ipxact:name>
            <ipxact:description>Transmit Margin, This field contrls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration substate (see Chapter 4 of PCI Express Base Specification for details of how the Transmitter voltage level is determined in various states).
 - 001b-111b: As defined in Section 8.3.4 not all encodings are required to be implemented.
For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

For components that support only the 2.5 GT/s speed, the contrller hardwires this bit to 000b.

This field is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_modified_compliance</ipxact:name>
            <ipxact:description>Enter Modified Compliance. When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance substate.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_sos</ipxact:name>
            <ipxact:description>Compliance SOS. When set to 1b, the LTSSM is required to send SKP Ordered Sets between sequences when sending the Compliance Pattern or Modified Compliance Pattern.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is applicable when the Link is operating at 2.5 GT/s or 5.0 GT/s data rates only.

For components that support only the 2.5 GT/s speed, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_preset</ipxact:name>
            <ipxact:description>Compliance Preset/De-emphasis.
 - For 8.0 GT/s and higher Data Rate: This field sets the Transmitter Preset in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b. The encodings are defined in section 4.2.3.2 of PCI Express Base Specification . Results are undefined if a reserved preset encoding is used when entering Polling.Compliance in this way.
 - For 5.0 GT/s Data Rate: This field sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
 - When the Link is operating at 2.5 GT/s, the setting of this field has no effect. Components that support only 2.5 GT/s speed are permitted to hardwire this field to 0000b.
 - For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.
 - This field is intended for debug and compliance testing purposes. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.
Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_curr_deemphasis</ipxact:name>
            <ipxact:description>Current De-emphasis Level. When the Link is operating at 5.0 GT/s speed, this bit reflects the level of de-emphasis.
The value in this bit is undefined when the Link is not operating at 5.0 GT/s speed.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.
For components that support speeds greater than 2.5 GT/s, Multi-Function Devices associated with an Upstream Port must report the same value in this field for all Functions of the Port.

 In C-PCIe mode, its contents are derived by sampling the PIPE.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Complete. When set to 1b, this bit indicates that the Transmitter Equalization prcedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p1</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 1 Successful. When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization prcedure has successfully completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p2</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 2 Successful. When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization prcedure has successfully completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p3</ipxact:name>
            <ipxact:description>EEqualization 8.0 GT/s Phase 3 Successful. When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization prcedure has successfully completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_eq_req</ipxact:name>
            <ipxact:description>Link Equalization Request 8.0 GT/s. This bit is set by hardware to request the 8.0 GT/s Link equalization prcess to be performed on the Link. For more information, see sections 4.2.3 and 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retimer_pre_det</ipxact:name>
            <ipxact:description>Retimer Presence Detected. When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1 of PCI Express Base Specification.

This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

For Ports that have the Retimer Presence Detect Supported bit set to 0b, the contrller hardwires this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_two_retimers_pre_det</ipxact:name>
            <ipxact:description>Tw Retimers Presence Detected. When set to 1b, this bit indicates that tw Retimers were present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1  of PCI Express Base Specification.

This bit is required for Ports that have the Tw Retimers Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

Ports that have the Tw Retimers Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_crosslink_resolution</ipxact:name>
            <ipxact:description>Crsslink Resolution. This field indicates the state of the Crsslink negotiation. It must be implemented if Crsslink Supported is Set and the Port supports 16.0 GT/s or higher data rate. It is permitted to be implemented in all other Ports. If Crsslink Supported is clear, the contrller hardwires this field to 01b or 10b.
Once a value of 01b or 10b is returned in this field, that value must continue to be returned while the Link is Up.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_msix_cap_pci_msix_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This Register holds MSI-X Capability ID, Next Capability pointer. It also controls the MSI-X behaviour.</ipxact:description>
          <ipxact:addressOffset>0xb0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_cap_next_offset</ipxact:name>
            <ipxact:description>MSI-X Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_size</ipxact:name>
            <ipxact:description>MSI-X Table Size.
System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Size (PCI_MSIX_TABLE_SIZE field in SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_SIZE field in the PF PCI_MSIX_CAP_ID_NEXT_CTRL_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_function_mask</ipxact:name>
            <ipxact:description>Function Mask.
If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
If Clear, each vector's Mask bit determines whether the vector is masked or not.
Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_enable</ipxact:name>
            <ipxact:description>MSI-X Enable.
If Set and the MSI Enable bit in the MSI Message Contrl Register for MSI is Clear, the Function is permitted to use MSI-X to request service and is prhibited frm using INTx interrupts (if implemented).
System configuration software Sets this bit to enable MSI-X. A device driver is prhibited frm writing this bit to mask a Function's service request.
If Clear, the Function is prhibited frm using MSI-X to request service.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_msix_cap_msix_table_offset_reg</ipxact:name>
          <ipxact:description>This register provides Table BIR and MSI-x Table offset select.</ipxact:description>
          <ipxact:addressOffset>0xb4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_bir</ipxact:name>
            <ipxact:description>MSI-X Table BAR Indicator Register Field.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI , is used to map the Function's MSI-X Table into Memory Space.
All encodings other than the defined encodings are reserved.
For a 64-bit Base Address Register , the Table BIR indicates the lower DwRD. For Functions with Type 1 Configuration Space headers, BIR values 2 thrugh 5 are also Reserved.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table BAR Indicator Register (PCI_MSIX_BIR field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_BIR field in the PF MSIX_TABLE_OFFSET_REG register.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_offset</ipxact:name>
            <ipxact:description>MSI-X Table Offset.
Used as an offset frm the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X Table.
The lower 3 Table BIR bits are masked off (set to zer) by software to form a 32-bit QwRD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Offset (PCI_MSIX_TABLE_OFFSET field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_OFFSET field in the PF MSIX_TABLE_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_msix_cap_msix_pba_offset_reg</ipxact:name>
          <ipxact:description>This register provides PBA Offset and PBA BIR value.</ipxact:description>
          <ipxact:addressOffset>0xb8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_bir</ipxact:name>
            <ipxact:description>MSI-X PBA BIR.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
The PBA BIR value definitions are identical to those for the Table BIR .

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA BIR (PCI_MSIX_PBA_BIR field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_BIR field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_offset</ipxact:name>
            <ipxact:description>MSI-X PBA Offset.
Used as an offset frm the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X PBA.
The lower 3 PBA BIR bits are masked off (set to zer) by software to form a 32-bit QwRD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA Offset (PCI_MSIX_PBA_OFFSET field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_OFFSET field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000002</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_aer_cap_aer_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>Advanced Error Reporting Extended Capability Header provides information about Capability ID, Version, and next offset.</ipxact:description>
          <ipxact:addressOffset>0x100</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field must be 2h if the End-End TLP Prefix Supported bit is set and must be 1h or 2h otherwise.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and
thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_aer_cap_root_err_status_off</ipxact:name>
          <ipxact:addressOffset>0x130</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0xfffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>adv_err_int_msg_num</ipxact:name>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_vc_cap_vc_base</ipxact:name>
          <ipxact:description>This Register provides Capability Id, Capability version, and next offset of VC Extended Capability Structure.</ipxact:description>
          <ipxact:addressOffset>0x148</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>vc_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sn_cap_sn_base</ipxact:name>
          <ipxact:description>The Device Serial Number Extended Capability is an optional Extended Capability that may be implemented by any PCI Express device Function.
This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x164</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sn_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sn_cap_ser_num_reg_dw_1</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x168</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_1_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 1).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sn_cap_ser_num_reg_dw_2</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x16c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_2_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 2).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ari_cap_ari_base</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x174</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ari_cap_cap_reg</ipxact:name>
          <ipxact:description>This Register provides information regarding supported ARI Capability, and controls that capability.</ipxact:description>
          <ipxact:addressOffset>0x178</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_mfvc_fun_grp_cap</ipxact:name>
            <ipxact:description>Multi Functional Virtual Channel (MFVC) Function Grups Capability.
Applicable only for Function 0; must be 0b for all other Functions.
If 1b, indicates that the ARI Device supports Function Grup level arbitration thrugh its Multi-Function Virtual Channel (MFVC) Capability structure.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_acs_fun_grp_cap</ipxact:name>
            <ipxact:description>ACS Function Grups Capability.
Applicable only for Function 0; must be 0b for all other Functions.
If 1b, indicates that the ARI Device supports Function Grup level granularity for ACS P2P Egress Contrl thrugh its ACS Capability structures.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_next_fun_num</ipxact:name>
            <ipxact:description>Next Function Number.
This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions.
Function 0 starts this linked list of Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1 ) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_18</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_fun_grp</ipxact:name>
            <ipxact:description>Function Grup.
Assigns a Function Grup Number to this Function.
Must be hardwired to 000b by the contrller if in Function 0, the MFVC Function Grups Capability bit and ACS Function Grups Capability bit are both 0b.


Note: The access attributes of this field are as follows:
 - Wire: CAP_REG.ARI_ACS_FUN_GRP_CAP ? rw : r  
 - Dbi: CAP_REG.ARI_ACS_FUN_GRP_CAP ? rw : r</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_spcie_cap_spcie_cap_header_reg</ipxact:name>
          <ipxact:description>This Register provides Capability Id, Capability Version, and next Offset of SPCIE Structure.</ipxact:description>
          <ipxact:addressOffset>0x184</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_spcie_cap_spcie_cap_off_0ch_reg</ipxact:name>
          <ipxact:description>This register provides Transmitter Preset and Receiver Preset Hint for Downstream Port and Upstream Port.</ipxact:description>
          <ipxact:addressOffset>0x190</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>dsp_tx_preset0</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Transmitter Preset 0.
Transmitter preset 0 value used for 8.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_rx_preset_hint0</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Receiver Preset Hint 0.
Receiver preset hint 0 value that may be used as a suggested setting for 8.0 GT/s receiver equalization by this Port when the Port is operating as a Downstream Port.
This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_tx_preset0</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Transmitter Preset 0.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Transmitter preset 0 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_rx_preset_hint0</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Receiver Preset Hint 0.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Receiver preset hint 0 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_15</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_tx_preset1</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Transmitter Preset 1.
Transmitter preset 1 value used for 8.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_rx_preset_hint1</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Receiver Preset Hint 1.
Receiver preset hint 1 value that may be used as a suggested setting for 8.0 GT/s receiver equalization by this Port when the Port is operating as a Downstream Port.
This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_tx_preset1</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Transmitter Preset 1.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Transmitter preset 1 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_rx_preset_hint1</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Receiver Preset Hint 1.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Receiver preset hint 1 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_31</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_spcie_cap_spcie_cap_off_10h_reg</ipxact:name>
          <ipxact:description>The function of this register is dependent on your actual configuration.
 - Gen3: LEC or RSVD depending on the value of CX_NL.
 - Gen4: LEC or LEC2 or RSVD depending on the value of CX_NL.
This register provides Transmitter Preset and Receiver Preset Hint for Downstream Port and Upstream Port.</ipxact:description>
          <ipxact:addressOffset>0x194</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>dsp_tx_preset2</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Transmitter Preset2.
Transmitter preset 2 value used for 8.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_rx_preset_hint2</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Receiver Preset Hint2.
Receiver preset hint 2 value that may be used as a suggested setting for 8.0 GT/s receiver equalization by this Port when the Port is operating as a Downstream Port.
This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_tx_preset2</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Transmitter Preset2.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Transmitter preset 2 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_rx_preset_hint2</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Receiver Preset Hint2.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Receiver preset hint 2 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_15</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_tx_preset3</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Transmitter Preset3.
Transmitter preset 3 value used for 8.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_rx_preset_hint3</ipxact:name>
            <ipxact:description>Downstream Port 8.0 GT/s Receiver Preset Hint3.
Receiver preset hint 3 value that may be used as a suggested setting for 8.0 GT/s receiver equalization by this Port when the Port is operating as a Downstream Port.
This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_tx_preset3</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Transmitter Preset3.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Transmitter preset 3 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_rx_preset_hint3</ipxact:name>
            <ipxact:description>Upstream Port 8.0 GT/s Receiver Preset Hint3.

The write value is gated with the PCIE_CAP_CrSS_LINK_SUPPORT field of LINK_CAPABILITIES2_REG.
Field contains the Receiver preset hint 3 value sent or received during 8.0 GT/s Link Equalization.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field representss the value sent on Lane 0 during 8.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_31</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pl16g_cap_pl16g_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>Physical Layer 16.0 GT/s Extended Capability Header provides information about Capability ID, Version, and next offset.</ipxact:description>
          <ipxact:addressOffset>0x1a4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This bit depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pl16g_cap_pl16g_cap_off_20h_reg</ipxact:name>
          <ipxact:description>This Equalization Control register consists of control fields required for Lane 0-3 16.0 GT/s equalization.</ipxact:description>
          <ipxact:addressOffset>0x1c4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>dsp_16g_tx_preset0</ipxact:name>
            <ipxact:description>Downstream Port 16.0 GT/s Transmitter Preset0.
Transmitter Preset of Lane 0 used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_16g_tx_preset0</ipxact:name>
            <ipxact:description>Upstream Port 16.0 GT/s Transmitter Preset0.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field represents the value sent on Lane 0 during 16.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 0 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_16g_tx_preset1</ipxact:name>
            <ipxact:description>Downstream Port 16.0 GT/s Transmitter Preset1.
Transmitter Preset of Lane 1 used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_16g_tx_preset1</ipxact:name>
            <ipxact:description>Upstream Port 16.0 GT/s Transmitter Preset1.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field represents the value sent on Lane 1 during 16.0 GT/s equalization.
 - CaseB: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 1 during Link Equalization.
Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_16g_tx_preset2</ipxact:name>
            <ipxact:description>Downstream Port 16.0 GT/s Transmitter Preset2.
Transmitter Preset of Lane 2 used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_16g_tx_preset2</ipxact:name>
            <ipxact:description>Upstream Port 16.0 GT/s Transmitter Preset2.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field represents the value sent on Lane 2 during 16.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 2 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsp_16g_tx_preset3</ipxact:name>
            <ipxact:description>Downstream Port 16.0 GT/s Transmitter Preset3.
Transmitter Preset of Lane 3 used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
For an Upstream Port if Crsslink Supported is 0b, this field is RsvdP. Otherwise, this field is HwInit.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: RSVDP</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_16g_tx_preset3</ipxact:name>
            <ipxact:description>Upstream Port 16.0 GT/s Transmitter Preset3.
 - Case A: When Operating port is Downstream port and whether the Crsslink is supported or not, this field represents the value sent on Lane 3 during 16.0 GT/s equalization.
 - Case B: When Operating port is Upstream port and Crsslink Supported bit is 0, this field is intended for debug and diagnostics. It contains the value captured frm Lane 3 during Link Equalization.
 - Case C: When Operating port is Upstream port and Crsslink Supported bit is 1, Field is not used or affected by the current Link Equalization. Field value will be used if a future crsslink negotiation switches the Operating Port Direction so that case A applies.
For case A and C, Field is HwInit. For case B, Field is r.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_margin_cap_margin_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides capbility ID, capability version and next offset value for Margining Extended Capability.</ipxact:description>
          <ipxact:addressOffset>0x1c8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greaterthan 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_base_reg</ipxact:name>
          <ipxact:description>SR-IOV Extended Capability Header provides information about Capability ID, Version, and Next Offset.</ipxact:description>
          <ipxact:addressOffset>0x1e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This bit depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_total_vfs_initial_vfs_reg</ipxact:name>
          <ipxact:description>This Register provides value of TotalVFs and InitialVFs.</ipxact:description>
          <ipxact:addressOffset>0x1ec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_initial_vfs</ipxact:name>
            <ipxact:description>InitialVFs.
InitialVFs indicates to SR-PCIM the number of VFs that are initially associated with the PF. The minimum value of InitialVFs is 0.
For Devices operating in Single-rot mode, this field is HwInit and must contain the same value as TotalVFs. And for Devices operating in Multi-rot mode, the value of this field may be changed by MRPCIM when VF Enable is Clear.
If VF Migration Enable is Set and VF Enable is Cleared and then Set, the value of InitialVFs may change. This is necessary since some VFs may have been migrated to other PFs and may no longer be available to this PF.
There are tw InitialVFs registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit (SRIOV_ARI_CAPABLE_HIER) of the PF0 SR-IOV Contrl Register (STATUS_CONTrL_REG) determines which one is used by the contrller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x003f</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_vf_offset_position</ipxact:name>
          <ipxact:description>This Register contains value of VF Stride and First VFs Offset.</ipxact:description>
          <ipxact:addressOffset>0x1f4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_offset</ipxact:name>
            <ipxact:description>First VF Offset.
First VF Offset is a constant and defines the ruting ID offset of the first VF that is associated with the PF that contains this Capability structure.
The first VF's 16-bit ruting ID is calculated by adding the contents of this field to the ruting ID of the PF containing this field ignoring any carry, using unsigned, 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
First VF Offset is unused if NumVFs is 0. If NumVFs is greater than 0, First VF Offset must not be zer.
There are tw First VF Offset registers at this address location; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Contrl Register determines which one is used by the contrller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_stride</ipxact:name>
            <ipxact:description>VF Stride.
VF Stride defines the ruting ID offset frm one VF to the next one for all VFs associated with the PF that contains this Capability structure.
The next VF's 16-bit ruting ID is calculated by adding the contents of this field to the ruting ID of the current VF, ignoring any carry, using unsigned 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
VF Stride is unused if NumVFs is 0 or 1. If NumVFs is greater than 1, VF Stride must not be zer.
There are tw VF Stride registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Contrl Register. determines which one is used by the contrller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_vf_device_id_reg</ipxact:name>
          <ipxact:description>VF Device ID may be different from the PF Device ID. A VF Device ID must be managed by the vendor. The vendor must ensure that the chosen VF Device ID does not result in the use of an incompatible device driver.</ipxact:description>
          <ipxact:addressOffset>0x1f8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_device_id</ipxact:name>
            <ipxact:description>VF Device ID.
This field contains the Device ID that should be presented for every VF to the SI.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sup_page_sizes_reg</ipxact:name>
          <ipxact:description>This Register provides the page sizes supported by the PF.
This PF supports a page size of 2^(n+12), if bit n is Set. For example, if bit 0 is Set, the PF supports 4-KB page sizes.</ipxact:description>
          <ipxact:addressOffset>0x1fc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_sup_page_size</ipxact:name>
            <ipxact:description>Page Sizes Supported by VF.
This field indicates the page sizes supported by the PF. This PF supports a page size of 2^(n +12) if bit n is Set.
For example, if bit 0 is Set, the PF supports 4-KB page sizes. PFs are required to support 4-KB, 8-KB, 64-KB, 256-KB, 1-MB, and 4-MB page sizes. All other page sizes are optional.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000553</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_bar0_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR0 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x204</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_type</ipxact:name>
            <ipxact:description>VF BAR0 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_prefetch</ipxact:name>
            <ipxact:description>VF BAR0 Prefetchable.
This field prvides whether BAR0 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_start</ipxact:name>
            <ipxact:description>VF BAR0 Base Address.
This field prvides starting address of BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_bar1_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR1 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x208</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar1</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_type</ipxact:name>
            <ipxact:description>VF BAR1 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_prefetch</ipxact:name>
            <ipxact:description>VF BAR1 Prefetchable.
This field prvides whether BAR1 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_start</ipxact:name>
            <ipxact:description>VF BAR1 Base Address.
This field prvides starting address of BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_bar2_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR2 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x20c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_type</ipxact:name>
            <ipxact:description>VF BAR2 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_prefetch</ipxact:name>
            <ipxact:description>VF BAR2 Prefetchable.
This field prvides whether BAR2 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_start</ipxact:name>
            <ipxact:description>VF BAR2 Base Address.
This field prvides starting address of BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_bar3_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR3 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x210</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_type</ipxact:name>
            <ipxact:description>VF BAR3 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_prefetch</ipxact:name>
            <ipxact:description>VF BAR3 Prefetchable.
This field prvides whether BAR3 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_start</ipxact:name>
            <ipxact:description>VF BAR3 Base Address.
This field prvides starting address of BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_bar4_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR4 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x214</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_type</ipxact:name>
            <ipxact:description>VF BAR4 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_prefetch</ipxact:name>
            <ipxact:description>VF BAR4 Prefetchable.
This field prvides whether BAR4 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_start</ipxact:name>
            <ipxact:description>VF BAR4 Base Address.
This field prvides starting address of BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_sriov_cap_sriov_bar5_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR5 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x218</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar5</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_type</ipxact:name>
            <ipxact:description>VF BAR5 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_prefetch</ipxact:name>
            <ipxact:description>VF BAR5 Prefetchable.
This field prvides whether BAR5 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_start</ipxact:name>
            <ipxact:description>VF BAR5 Base Address.
This field prvides starting address of BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_tph_cap_tph_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability Revision, and Next offset of structure Extended Capability Register.</ipxact:description>
          <ipxact:addressOffset>0x220</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_cap_ver</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_tph_cap_tph_req_cap_reg_reg</ipxact:name>
          <ipxact:description>This register gives information about No ST mode support, Intrrupt Vector mode, Device specific mode, Extended TPH requester support, ST table location and size.

SRIOV Note: All VFs in a single PF have the same values for VF_TPH_REQ_CAP_REG_REG. To write this common register, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PF TPH_REQ_CAP_REG_REG register.</ipxact:description>
          <ipxact:addressOffset>0x224</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_no_st_mode</ipxact:name>
            <ipxact:description>No ST Mode Supported.
set indicates that the Function supports the No ST Mode of operation.
This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_int_vec</ipxact:name>
            <ipxact:description>Interrupt Vector Mode Supported.
If set indicates that the Function supports the Interrupt Vector Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_device_spec</ipxact:name>
            <ipxact:description>Device Specific Mode Supported.
If set indicates that the Function supports the Device Specific Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_extended_tph</ipxact:name>
            <ipxact:description>Extended TPH Requester Supported.
If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix .


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_0</ipxact:name>
            <ipxact:description>ST Table Location Bit 0.
If this field is set, ST Table is Located in the TPH Requester Extended Capability structure.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_1</ipxact:name>
            <ipxact:description>ST Table Location Bit 1.
If this field is set, ST Table is Located in the MSI-X Table.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_11</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_size</ipxact:name>
            <ipxact:description>ST Table Size.
This field indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1.
For example, a returned value of 000 0000 0011b indicates a table size of four entries.
There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Extended Capability structure. When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ats_cap_ats_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides value of Capability ID, Capability version, and next offset of Extended capability structure.</ipxact:description>
          <ipxact:addressOffset>0x2ac</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ats_cap_ats_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register provides value of Invalidate queue depth, Page alignment request, and Global Invalidate support. It also controls Cache translation and Smallest Translate Unit.</ipxact:description>
          <ipxact:addressOffset>0x2b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>invalidate_q_depth</ipxact:name>
            <ipxact:description>Invalidate Queue Depth.
The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>page_aligned_req</ipxact:name>
            <ipxact:description>Page Aligned Request.
If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended.
This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>global_inval_spprtd</ipxact:name>
            <ipxact:description>Global Invalidate Supported.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_acs_cap_acs_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides capability ID, capability version, and next offset value.</ipxact:description>
          <ipxact:addressOffset>0x2bc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field indicates the version of present capability structure. It is a PCI-SIG defined version number.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h, if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_acs_cap_acs_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register is Access Control Services Capability and Control Register.</ipxact:description>
          <ipxact:addressOffset>0x2c0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>acs_src_valid</ipxact:name>
            <ipxact:description>ACS Source Validation Capable.
Required for rot Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Source Validation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_at_block</ipxact:name>
            <ipxact:description>ACS Translation Blocking Capable.
Required for rot Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Translation Blocking.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_req_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Request Redirect Capable.
Required for rot Ports that support peer-to-peer traffic with other rot Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_cpl_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Completion Redirect Capable.
Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_usp_forwarding</ipxact:name>
            <ipxact:description>ACS Upstream forwarding Capable.
Required for rot Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_egress_control</ipxact:name>
            <ipxact:description>ACS Egress Contrl.
Optional for rot Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Contrl.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_direct_translated_p2p</ipxact:name>
            <ipxact:description>ACS Direct Translated Peer-to-Peer Capable.
Required for rot Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other rot Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; the contrller must be hardwired to 0b otherwise.
If 1b, indicates that the component implements ACS Direct Translated P2P.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_egress_ctrl_size</ipxact:name>
            <ipxact:description>ACS Egress contrl vector size.
Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Contrl Vector; the encoding 00h indicates 256 bits.
If the ACS_P2P_EGRESS_CONTrL bit is 0b, the value of the size field is undefined, and the Egress Contrl Vector register is not required to be present.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x08</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_prs_ext_cap_prs_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability version, and Next Offset value of Page Request Service Capability Structure.</ipxact:description>
          <ipxact:addressOffset>0x2c8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_cap_version</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>prs_next_offset</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Next Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_prs_ext_cap_prs_req_capacity_reg</ipxact:name>
          <ipxact:description>This register contains the number of outstanding page request messages the associated Page Request Interface physically supports.</ipxact:description>
          <ipxact:addressOffset>0x2d0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_outstanding_capacity</ipxact:name>
            <ipxact:description>Page Request Services Outstanding Capacity value.
This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000001</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ltr_cap_ltr_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides capbility ID, capability version and next offset value for LTR(Latency Tolerance Reporting).</ipxact:description>
          <ipxact:addressOffset>0x2d8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pasid_cap_pasid_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability Version, and Next offset of capability structure.</ipxact:description>
          <ipxact:addressOffset>0x2e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_pasid_cap_pasid_cap_cntrl_reg</ipxact:name>
          <ipxact:description>This register provides value of capability like Execute Permission support, Privileged Mode support, and width of PASID. Also this register controls PASID Enable, Execute Permission Enable, as well as Privileged mode Enable.</ipxact:description>
          <ipxact:addressOffset>0x2e4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>execute_permission_supported</ipxact:name>
            <ipxact:description>Execute Permission Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>privileged_mode_supported</ipxact:name>
            <ipxact:description>Privileged Mode Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>max_pasid_width</ipxact:name>
            <ipxact:description>Max PASID Width.
Indicates the width of the PASID field supported by the Endpoint. The value n indicates support for PASID values 0 thrugh (2^n) - 1 (inclusive). This field must be between '0' and '20' (inclusive).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_13</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ras_des_cap_ras_des_cap_header_reg</ipxact:name>
          <ipxact:description>The Vendor-Specific Extended Capability (VSEC Capability) is an optional Extended Capability that is permitted to be implemented by any PCI Express Function or RCRB.
This Register contains Capability Id, Capability Version and Next Offset value for Vendor-Specific Extended Capability.</ipxact:description>
          <ipxact:addressOffset>0x2e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
Value of this field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ras_des_cap_event_counter_control_reg</ipxact:name>
          <ipxact:description>This is a viewport control register.
- Setting the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register determine the Event Counter data returned by the EVENT_COUNTER_DATA_REG viewport register.
- Setting the EVENT_COUNTER_ENABLE field in this register enables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Setting the EVENT_COUNTER_CLEAR field in this register clears the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Reading the EVENT_COUNTER_STATUS field in this register returns the Enable status of the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.</ipxact:description>
          <ipxact:addressOffset>0x2f0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>event_counter_enable</ipxact:name>
            <ipxact:description>Event Counter Enable.
Enables/disables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
By default, all event counters are disabled.
You can enable/disable a specific Event Counter by writing the 'per event off' or 'per event on' codes.
You can enable/disable all event counters by writing the 'all on' or 'all off' codes.
The read value is always '0'.
For other values no change.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>event_counter_event_select</ipxact:name>
            <ipxact:description>Event Counter Data Select.
This field in conjunction with the EVENT_COUNTER_LANE_SELECT field indexes the Event Counter data returned by the EVENT_COUNTER_DATA_REG register.
 - 27-24: Grup number(4-bit: 0..0x7)
 - 23-16: Event number(8-bit: 0..0x13) within the Grup
 - ..
For detailed definitions of Grup number and Event number, see the RAS DES chapter in the Databook.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_vsecras_cap_rasdp_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>This Register provides capability ID, Capability version, and Next capability offset for PCIe Extended capability stucture.</ipxact:description>
          <ipxact:addressOffset>0x3e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
A version of the specification that changes the Extended Capability in a way that is not otherwise identifiable (e.g., thrugh a new Capability field) is permitted to increment this field.
All such changes to the Capability structure must be software-compatible.
Software must check for Capability Version numbers that are greater than or equal to the highest number defined when the software is written, as Functions reporting any such Capability Version numbers will contain a Capability structure that is compatible with that piece of software.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_dlink_cap_data_link_feature_ext_hdr_off</ipxact:name>
          <ipxact:description>This register provides capability ID, capability version, and next offset value.</ipxact:description>
          <ipxact:addressOffset>0x420</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>dlink_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dlink_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h, if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_cap_ptm_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Cabability Version, and Next Offset of Precision Time Measurement Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x42c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_cap_version</ipxact:name>
            <ipxact:description>Precision Time Measurement PCI Express Extended Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This bit depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_next_offset</ipxact:name>
            <ipxact:description>Precision Time Measurement PCI Express Extended Capability Next Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_cap_ptm_cap_off</ipxact:name>
          <ipxact:description>This register describes a Function's support for Precision Time Measurement. Not all fields within this register apply to all Functions capable of implementing PTM.</ipxact:description>
          <ipxact:addressOffset>0x430</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_req_capable</ipxact:name>
            <ipxact:description>PTM Requester Capable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_res_capable</ipxact:name>
            <ipxact:description>PTM Responder Capable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_root_capable</ipxact:name>
            <ipxact:description>PTM rot Capable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_req_cap_ptm_req_cap_hdr_off</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Cabability Version, and Next Offset of Precision Time Measurement Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x438</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_req_ext_cap_ver</ipxact:name>
            <ipxact:description>Precision Time Measurement Requester VSEC Version.
For more information, see the PTM section in the Databook.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_req_ext_cap_next_offs</ipxact:name>
            <ipxact:description>Precision Time Measurement Requester VSEC Next Pointer.
For more information, see the PTM section in the Databook.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_req_cap_ptm_req_control_off</ipxact:name>
          <ipxact:description>For more information, see the PTM section in the Databook.</ipxact:description>
          <ipxact:addressOffset>0x440</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_req_auto_update_enabled</ipxact:name>
            <ipxact:description>PTM Requester Auto Update Enabled.
For more information, see the PTM section in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_req_start_update</ipxact:name>
            <ipxact:description>PTM Requester Start Update.
For more information, see the PTM section in the Databook.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_req_fast_timers</ipxact:name>
            <ipxact:description>PTM Fast Timers (Debug mode for PTM Timers). The 100us timer output will go high at 30us and the 10ms timer output will go high at 100us (the Long Timer Value is ignored). There is no change to the 1us timer. The requester operation will otherwise remain the same.
For more information, see the PTM section in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ptm_req_long_timer</ipxact:name>
            <ipxact:description>PTM Requester Long Timer. Determines the period between each auto update PTM Dialogue in miliseconds. Update period is the register value +1 milisecond. For the Switch prduct this value must not be set larger than 0x9 for spec compliance.
For more information, see the PTM section in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x09</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_req_cap_ptm_req_tx_latency_off</ipxact:name>
          <ipxact:description>For more information, see the PTM section in the Databook.</ipxact:description>
          <ipxact:addressOffset>0x484</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_req_tx_latency</ipxact:name>
            <ipxact:description>PTM Requester TX Latency. Requester Transmit path latency viewport register.
A register is prvided for each supported link speed, and the value used for timestamp adjustment is automatically selected based on the current speed.
The PTM Requester Latency Register Select register specifies the register to be written or read.

Note: For USB4, when PTM_REQ_USB4_MODE field of PTM_REQ_USB4_CIO_CTRL register is set, this field is not relevant.
For more information, see the PTM section in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x011</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0xfffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_req_cap_ptm_req_rx_latency_off</ipxact:name>
          <ipxact:description>For more information, see the PTM section in the Databook.</ipxact:description>
          <ipxact:addressOffset>0x488</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_req_rx_latency</ipxact:name>
            <ipxact:description>PTM Requester RX Latency - Requester Receive path latency viewport register.
A register is prvided for each supported link speed, and the value used for timestamp adjustment is automatically selected based on the current speed.
The PTM Requester Latency Register Select register specifies the register to be written or read.

Note: For USB4, when PTM_REQ_USB4_MODE field of PTM_REQ_USB4_CIO_CTRL register is set, this field is not relevant.
For more information, see the PTM section in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x02b</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000</ipxact:value>
                <ipxact:mask>0xfffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_ptm_req_cap_ptm_req_latency_reg_sel_off</ipxact:name>
          <ipxact:description>For more information, see the PTM section in the Databook.</ipxact:description>
          <ipxact:addressOffset>0x49c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ptm_req_latency_reg_sel</ipxact:name>
            <ipxact:description>Selects the PTM Requester Tx and Rx Latency Viewport register to be written or read, together with the PTM_REQ_ESM_SEL field.

Note: For USB4, when PTM_REQ_USB4_MODE field of PTM_REQ_USB4_CIO_CTRL register is set, this field is not relevant.
For more information, see the PTM section in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_4</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_port_force_off</ipxact:name>
          <ipxact:description>This register can be used for testing and debuggong the link.</ipxact:description>
          <ipxact:addressOffset>0x708</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>link_num</ipxact:name>
            <ipxact:description>Link Number. Not used for endpoint.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x04</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_ack_f_aspm_ctrl_off</ipxact:name>
          <ipxact:description>This register is used to control ack frequency and L0-L1 ASPM behaviour.</ipxact:description>
          <ipxact:addressOffset>0x70c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ack_n_fts</ipxact:name>
            <ipxact:description>The number of Fast Training Sequence(N_FTS) ordered sets to be transmitted when transitioning from L0s to L0.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xbe</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>common_clk_n_fts</ipxact:name>
            <ipxact:description>Common Clock N_FTS. This is the N_FTS when common clock is used.
The number of Fast Training Sequence ordered sets to be transmitted when transitioning from L0s to L0. This field is only writable (sticky) when all of the following configuration parameter equations are true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xbe</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_port_link_ctrl_off</ipxact:name>
          <ipxact:description>Using this register you can control the port link behaviour.</ipxact:description>
          <ipxact:addressOffset>0x710</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>vendor_specific_dllp_req</ipxact:name>
            <ipxact:description>Vendor Specific DLLP Request.

Reading from this self-clearing register field always returns a '0'.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>scramble_disable</ipxact:name>
            <ipxact:description>Scramble Disable. Turns off data scrambling.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>loopback_enable</ipxact:name>
            <ipxact:description>Loopback Enable. Turns on loopback. For more information, see Loopback in the Databook.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reset_assert</ipxact:name>
            <ipxact:description>Reset Assert. Triggers a recovery and forces the LTSSM to the hot reset state (downstream port only).


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_4</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dll_link_en</ipxact:name>
            <ipxact:description>DLL Link Enable.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>link_disable</ipxact:name>
            <ipxact:description>LINK_DISABLE is an internally reserved field. Do not use.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>fast_link_mode</ipxact:name>
            <ipxact:description>Fast Link Mode. Sets all internal LTSSM millisecond timers to Fast Mode for speeding up simulation. Forces the LTSSM training (link initialization) to use shorter time-outs and to link up faster.
 - The default scaling factor can be changed using the DEFAULT_FAST_LINK_SCALING_FACTOR parameter or through the FAST_LINK_SCALING_FACTOR field in the TIMER_CTRL_MAX_FUNC_NUM_OFF register.
 - Fast Link Mode can also be activated by setting the diag_ctrl_bus[2] pin to '1'.
For more information, see the Fast Link Simulation Mode section in the Integrating the Controller with the PHY or Application RTL or Verification IP chapter of the User Guide.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>link_capable</ipxact:name>
            <ipxact:description>Link Mode Enable. Sets the number of lanes in the link that you want to connect to the link partner. When you have unused lanes in your system, then you must change the value in this register to reflect the number of lanes. You must also change the value in the Predetermined Number of Lanes field of the Link Width and Speed Change Control Register. For more information, see How to Tie Off Unused Lanes. For information on upsizing and downsizing the link width, see Link Establishment.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x07</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_timer_ctrl_max_func_num_off</ipxact:name>
          <ipxact:description>This register holds the ack frequency, latency, replay, fast link scaling timers,
and max function number values.</ipxact:description>
          <ipxact:addressOffset>0x718</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>max_func_num</ipxact:name>
            <ipxact:description>Maximum function number that can be used in a request. Configuration requests targeted at function numbers above this value are returned with UR (unsupported request).


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x03</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_symbol_timer_filter_1_off</ipxact:name>
          <ipxact:description>The Filter Mask 1 Register modifies the RADM filtering and error handling rules. For more information, see the Receive Filtering section. In each case, '0' applies the associated filtering rule and '1' masks the associated filtering rule.</ipxact:description>
          <ipxact:addressOffset>0x71c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>skp_int_val</ipxact:name>
            <ipxact:description>SKP Interval Value. The number of symbol times to wait between transmitting SKP ordered sets. The controller waits the number of symbol times in this register plus 1, between transmitting SKP ordered sets. Your application must program this register accordingly.

For example, if 1536 were programmed into this register (in a 250 MHz controller), then the controller actually transmits SKP ordered sets once every 1537 symbol times.

The value programmed to this register is actually clock ticks and not symbol times. In a 125 MHz controller, programming the value programmed to this register should be scaled down by a factor of 2 (because one clock tick =two symbol times in this case).

Note: This value is not used at Gen3 speed; the skip interval is hardcoded to 370 blocks.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x280</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>eidle_timer</ipxact:name>
            <ipxact:description>EIDLE_TIMER is an internally reserved field. Do not use.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>disable_fc_wd_timer</ipxact:name>
            <ipxact:description>Disable FC Watchdog Timer.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>mask_radm_1</ipxact:name>
            <ipxact:description>Filter Mask 1. The Filter Mask 1 Register modifies the RADM filtering and error handling rules. For more information, see the Receive Filtering section. In each case, '0' applies the associated filtering rule and '1' masks the associated filtering rule.

31: CX_FLT_MASK_RC_CFG_DISCARD
 - 0x0: For RADM RC filter to not allow CFG transaction being received
 - 0x1: For RADM RC filter to allow CFG transaction being received
30: CX_FLT_MASK_RC_IO_DISCARD
 - 0x0: For RADM RC filter to not allow IO transaction being received
 - 0x1: For RADM RC filter to allow IO transaction being received
29: CX_FLT_MASK_MSG_DROP
 - 0x0: Drop MSG TLP (except for Vendor MSG). Send decoded message on the SII.
 - 0x1: Do not Drop MSG (except for Vendor MSG). Send message TLPs to your application on TRGT1 and send decoded message on the SII.
 - The default for this bit is the inverse of FLT_DROP_MSG. That is, if FLT_DROP_MSG =1, then the default of this bit is '0' (drop message TLPs). This bit only controls message TLPs other than Vendor MSGs. Vendor MSGs are controlled by Filter Mask Register 2, bits [1:0]. 
The controller never passes ATS Invalidate messages to the SII interface regardless of this filter rule setting. The controller passes all ATS Invalidate messages to TRGT1 (or AXI bridge master), as they are too big for the SII.
28: CX_FLT_MASK_CPL_ECRC_DISCARD
 - Only used when completion queue is advertised with infinite credits and is in store-and-forward mode.
 - 0x0: Discard completions with ECRC errors
 - 0x1: Allow completions with ECRC errors to be passed up
 - Reserved field for SW.
27: CX_FLT_MASK_ECRC_DISCARD
 - 0x0: Discard TLPs with ECRC errors
 - 0x1: Allow TLPs with ECRC errors to be passed up
26: CX_FLT_MASK_CPL_LEN_MATCH
 - 0x0: Enforce length match for completions; a violation results in cpl_abort, and possibly AER of unexp_cpl_err
 - 0x1: Mask length match for completions
25: CX_FLT_MASK_CPL_ATTR_MATCH
 - 0x0: Enforce attribute match for completions; a violation results in a malformed TLP error, and possibly AER of unexp_cpl_err, cpl_rcvd_ur, cpl_rcvd_ca
 - 0x1: Mask attribute match for completions
24: CX_FLT_MASK_CPL_TC_MATCH
 - 0x0: Enforce Traffic Class match for completions; a violation results in a malformed TLP error, and possibly AER of unexp_cpl_err, cpl_rcvd_ur, cpl_rcvd_ca
 - 0x1: Mask Traffic Class match for completions
23: CX_FLT_MASK_CPL_FUNC_MATCH
 - 0x0: Enforce function match for completions; a violation results in cpl_abort, and possibly AER of unexp_cpl_err, cpl_rcvd_ur, cpl_rcvd_ca
 - 0x1: Mask function match for completions
22: CX_FLT_MASK_CPL_REQID_MATCH
 - 0x0: Enforce Req. Id match for completions; a violation result in cpl_abort, and possibly AER of unexp_cpl_err, cpl_rcvd_ur, cpl_rcvd_ca
 - 0x1: Mask Req. Id match for completions
21: CX_FLT_MASK_CPL_TAGERR_MATCH
 - 0x0: Enforce Tag Error Rules for completions; a violation result in cpl_abort, and possibly AER of unexp_cpl_err, cpl_rcvd_ur, cpl_rcvd_ca
 - 0x1: Mask Tag Error Rules for completions
20: CX_FLT_MASK_LOCKED_RD_AS_UR
 - 0x0: Treat locked Read TLPs as UR for EP; Supported for RC
 - 0x1: Treat locked Read TLPs as Supported for EP; UR for RC
19: CX_FLT_MASK_CFG_TYPE1_REQ_AS_UR
 - 0x0: Treat CFG type1 TLPs as UR for EP; Supported for RC
 - 0x1: Treat CFG type1 TLPs as Supported for EP; UR for RC
 - When CX_SRIOV_ENABLE is set then this bit is set to allow the filter to process Type 1 Config requests if the EP consumes more than one bus number.
18: CX_FLT_MASK_UR_OUTSIDE_BAR
 - 0x0: Treat out-of-bar TLPs as UR
 - 0x1: Do not treat out-of-bar TLPs as UR
17: CX_FLT_MASK_UR_POIS
 - 0x0: Treat poisoned request TLPs as UR
 - 0x1: Do not treat poisoned request TLPs as UR
 - The native controller always passes poisoned completions to your application except when you are using the DMA read channel.
16: CX_FLT_MASK_UR_FUNC_MISMATCH
 - 0x0: Treat Function MisMatched TLPs as UR
 - 0x1: Do not treat Function MisMatched TLPs as UR
 - CX_FLT_MASK_UR_FUNC_MISMATCH is not allowed to be set unless CONFIG_LIMIT_REG =0 and TARGET_ABOVE_CONFIG_LIMIT_REG =2 in MISC_CONTROL_1_OFF register or CFG_TLP_BYPASS_EN_REG =1 and TARGET_ABOVE_CONFIG_LIMIT_REG =2 in MISC_CONTROL_1_OFF register.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2008</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_filter_mask_2_off</ipxact:name>
          <ipxact:description>This register modifies the RADM filtering and error handling rules. For more information, see the Receive Filtering section. In each case, '0' applies the associated filtering rule and '1' masks the associated filtering rule.</ipxact:description>
          <ipxact:addressOffset>0x720</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>mask_radm_2</ipxact:name>
            <ipxact:description>Filter Mask 2. This field modifies the RADM filtering and error handling rules. For more information, see the Receive Filtering in the Databook. In each case, '0' applies the associated filtering rule and '1' masks the associated filtering rule.

31:12: Reserved

11: CX_FLT_UNMASK_ATOMIC_SPECIFIC_RULES
 - 0x0: Lower Address is checked for Cpls related to AtomicOps Requests.
 - 0x1: Lower Address is not checked for Cpls related to AtomicOps Requests.
10: CX_FLT_UNMASK_ATS_SPECIFIC_RULES
 - 0x0: Cpls for ATS Requests are processed as MemRd-related Cpl.
 - 0x1: Lower Address is not checked for Cpls related to ATS Requests. An ATS-related Cpl completes the request if it has a Byte Count that is equal to four times the Length field.
9: CX_FLT_MASK_CPL_IN_LUT_CHECK
 - 0x0: Disable masking of checking if the tag of CPL is registered in LUT
 - 0x1: Enable masking of checking if the tag of CPL is registered in LUT
8: CX_FLT_MASK_POIS_ERROR_REPORTING
 - 0x0: Disable masking of error reporting for Poisoned TLPs
 - 0x1: Enable masking of error reporting for Poisoned TLPs
7: CX_FLT_MASK_PRS_DROP
 - 0x0: Allow PRS message to pass through
 - 0x1: Drop PRS Messages silently
 - This bit is ignored when the CX_FLT_MASK_MSG_DROP bit in the MASK_RADM_1 field of the SYMBOL_TIMER_FILTER_1_OFF register is set to '1'.
6: CX_FLT_UNMASK_TD
 - 0x0: Disable unmask TD bit if CX_STRIP_ECRC_ENABLE
 - 0x1: Enable unmask TD bit if CX_STRIP_ECRC_ENABLE
5: CX_FLT_UNMASK_UR_POIS_TRGT0
 - 0x0: Disable unmask CX_FLT_MASK_UR_POIS with TRGT0 destination
 - 0x1: Enable unmask CX_FLT_MASK_UR_POIS with TRGT0 destination
4: CX_FLT_MASK_LN_VENMSG1_DROP
 - 0x0: Allow LN message to pass through
 - 0x1: Drop LN Messages silently
3: CX_FLT_MASK_HANDLE_FLUSH
 - 0x0: Disable controller Filter to handle flush request
 - 0x1: Enable controller Filter to handle flush request
2: CX_FLT_MASK_DABORT_4UCPL
 - 0x0: Enable DLLP abort for unexpected completion
 - 0x1: Do not enable DLLP abort for unexpected completion
1: CX_FLT_MASK_VENMSG1_DROP
 - 0x0: Vendor MSG Type 1 dropped silently
 - 0x1: Vendor MSG Type 1 not dropped
0: CX_FLT_MASK_VENMSG0_DROP
 - 0x0: Vendor MSG Type 0 dropped with UR error reporting
 - 0x1: Vendor MSG Type 0 not dropped


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_queue_status_off</ipxact:name>
          <ipxact:description>This register provides the queue status.</ipxact:description>
          <ipxact:addressOffset>0x73c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>timer_mod_flow_control</ipxact:name>
            <ipxact:description>FC Latency Timer Override Value. When you set the FC Latency Timer Override Enable in this register, the value in this field will override the FC latency timer value that the controller calculates according to the PCIe specification. For more information, see Flow Control in the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0x1fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_29</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>timer_mod_flow_control_en</ipxact:name>
            <ipxact:description>FC Latency Timer Override Enable.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_vc0_p_rx_q_ctrl_off</ipxact:name>
          <ipxact:description>This register controls segmented-buffer VC0 posted receive queue operation.</ipxact:description>
          <ipxact:addressOffset>0x748</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>vc0_p_data_credit</ipxact:name>
            <ipxact:description>VC0 Posted Data Credits. The number of initial posted data credits for VC0, used only in the segmented-buffer configuration.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1bc</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_p_header_credit</ipxact:name>
            <ipxact:description>VC0 Posted Header Credits. The number of initial posted header credits for VC0, used only in the segmented-buffer configuration.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x38</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved4</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_p_tlp_q_mode</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_vc0_np_rx_q_ctrl_off</ipxact:name>
          <ipxact:description>This register controls the segmented-buffer VC0 non-posted receive queue operation.</ipxact:description>
          <ipxact:addressOffset>0x74c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>vc0_np_data_credit</ipxact:name>
            <ipxact:description>VC0 Non-Posted Data Credits. The number of initial non-posted data credits for VC0, used only in the segmented-buffer configuration.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x070</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_np_header_credit</ipxact:name>
            <ipxact:description>VC0 Non-Posted Header Credits. The number of initial non-posted header credits for VC0, used only in the segmented-buffer configuration.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x38</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved6</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_np_tlp_q_mode</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_np_hdr_scale</ipxact:name>
            <ipxact:description>VC0 Scale Non-Posted Header Credits.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_np_data_scale</ipxact:name>
            <ipxact:description>VC0 Scale Non-Posted Data Credits.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved7</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_vc0_cpl_rx_q_ctrl_off</ipxact:name>
          <ipxact:description>This register controls the segmented-buffer VC0 completion receive queue operation.</ipxact:description>
          <ipxact:addressOffset>0x750</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>vc0_cpl_data_credit</ipxact:name>
            <ipxact:description>VC0 Completion Data Credits. The number of initial Completion data credits for VC0, used only in the segmented-buffer configuration.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_cpl_header_credit</ipxact:name>
            <ipxact:description>VC0 Completion Header Credits. The number of initial Completion header credits for VC0, used only in the segmented-buffer configuration.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved8</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_cpl_tlp_q_mode</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_cpl_hdr_scale</ipxact:name>
            <ipxact:description>VC0 Scale CPL Header Credits.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>vc0_cpl_data_scale</ipxact:name>
            <ipxact:description>VC0 Scale CPL Data Credits.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved9</ipxact:name>
            <ipxact:description>Reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_gen2_ctrl_off</ipxact:name>
          <ipxact:description>This register controls various functions of the controller related to link training, lane reversal, and equalization.</ipxact:description>
          <ipxact:addressOffset>0x80c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>fast_training_seq</ipxact:name>
            <ipxact:description>Sets the Number of Fast Training Sequences (N_FTS) that the controller advertises as its N_FTS during Gen2 or Gen3 link training. This value is used to inform the link partner about the PHY's ability to recover synchronization after a low power state. The number should be provided by the PHY vendor. Do not set N_FTS to zero; doing so can cause the LTSSM to go into the recovery state when exiting from L0s.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xbe</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>num_of_lanes</ipxact:name>
            <ipxact:description>Predetermined Number of Lanes. Defines the number of lanes which are connected and not bad. Used to limit the effective link width to ignore 'broken or unused lanes that detect a receiver. Indicates the number of lanes to check for exit from Electrical Idle in Polling.Active and L2.Idle. It is possible that the LTSSM might detect a receiver on a bad or broken lane during the Detect Substate. However, it is also possible that such a lane might also fail to exit Electrical Idle and therefore prevent a valid link from being configured. This value is referred to as the Predetermined Number of Lanes in section 4.2.6.2.1 of the PCI Express Base Specification.
When you have unused lanes in your system, then you must change the value in this register to reflect the number of lanes. You must also change the value in the Link Mode Enable field of PORT_LINK_CTRL_OFF. The value in this register is normally the same as the encoded value in PORT_LINK_CTRL_OFF. If you find that one of your used lanes is bad then you must reduce the value in this register. For more information, see How to Tie Off Unused Lanes in the Databook. For information on upsizing and downsizing the link width, see Link Establishment in the Databook.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x04</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pre_det_lane</ipxact:name>
            <ipxact:description>Predetermined Lane for Auto Flip. This field defines which physical lane is connected to logical Lane0 by the flip operation performed in Detect.
This field is used to restrict the receiver detect procedure to a particular lane when the default detect and polling procedure performed on all lanes cannot be successful. A notable example of when it is useful to program this field to a value different from the default, is when a lane is asymmetrically broken, that is, it is detected in Detect LTSSM state but it cannot exit Electrical Idle in Polling LTSSM state.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>auto_lane_flip_ctrl_en</ipxact:name>
            <ipxact:description>Enable Auto flipping of the lanes. You must set the CX_AUTO_LANE_FLIP_CTRL_EN configuration parameter to include the hardware for this feature in the controller. For more information, see the 'Lane Reversal' appendix in the Databook.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>direct_speed_change</ipxact:name>
            <ipxact:description>Directed Speed Change.

When the speed change occurs, the controller will clear the contents of this field; and a read to this field by your software will return a '0'.
To manually initiate the speed change:
 - Write to LINK_CONTROL2_LINK_STATUS2_REG.PCIE_CAP_TARGET_LINK_SPEED in the local device
 - De-assert this field
 - Assert this field
If you set the default of this field using the DEFAULT_GEN2_SPEED_CHANGE configuration parameter to '1', then the speed change is initiated automatically after link up, and the controller clears the contents of this field. If you want to prevent this automatic speed change, then write a lower speed value to the Target Link Speed field of the Link Control 2 register (LINK_CONTROL2_LINK_STATUS2_OFF.PCIE_CAP_TARGET_LINK_SPEED) through the DBI before link up.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>config_phy_tx_change</ipxact:name>
            <ipxact:description>Config PHY Tx Swing. Controls the PHY transmitter voltage swing level. The controller drives the mac_phy_txswing output from this register bit field.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>config_tx_comp_rx</ipxact:name>
            <ipxact:description>Config Tx Compliance Receive Bit.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sel_deemphasis</ipxact:name>
            <ipxact:description>Used to set the de-emphasis level for upstream ports. This bit selects the level of de-emphasis the link operates at.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen1_ei_inference</ipxact:name>
            <ipxact:description>Electrical Idle Inference Mode at Gen1 Rate. Programmable mode to determine inferred electrical idle (EI) in Recovery.Speed or Loopback.Active (as slave) state at Gen1 speed by looking for a '1' value on RxElecIdle instead of looking for a '0' on RxValid. If the PHY fails to de-assert the RxValid signal in Recovery.Speed or Loopback.Active (because of corrupted EIOS for example), then EI cannot be inferred successfully in the controller by just detecting the condition RxValid=0.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_gen3_related_off</ipxact:name>
          <ipxact:description>There is no Gen3-specific N_FTS field. The N_FTS field in the Link Width and Speed Change Control Register is used for both Gen2 and Gen3 speed modes. There is no Gen3-specific Directed Speed Change field. The Directed Speed Change field in the Link Width and Speed Change Control Register is used to change to Gen2 or Gen3 speed. A speed change to Gen3 occurs if (1) the Directed Speed Change field is set to '1' and (2) the Target Link Speed field in the Link Control 2 Register is set to Gen3. Gen3 support is advertised by both sides of the link during link training.</ipxact:description>
          <ipxact:addressOffset>0x890</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>gen3_zrxdc_noncompl</ipxact:name>
            <ipxact:description>Gen3 Receiver Impedance ZRX-DC Not Compliant. Receivers that operate at 8.0 GT/s with an impedance other than the range defined by the ZRX-DC parameter for 2.5 GT/s (40-60 Ohms) must meet additional behavior requirements in the following LTSSM states: Polling, Rx_L0s, L1, L2, and Disabled.
Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rates.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>disable_scrambler_gen_3</ipxact:name>
            <ipxact:description>Disable Scrambler for Gen3 and Gen4 Data Rate. The Gen3 and Gen4 scrambler/descrambler within the controller needs to be disabled when the scrambling function is implemented outside of the controller (for example within the PHY).

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>eq_phase_2_3</ipxact:name>
            <ipxact:description>Equalization Phase 2 and Phase 3 Disable. This applies to downstream ports only.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate. If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate. If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate. If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.

Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>eq_eieos_cnt</ipxact:name>
            <ipxact:description>Equalization EIEOS Count Reset Disable. Disable requesting reset of EIEOS count during equalization.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>eq_redo</ipxact:name>
            <ipxact:description>Equalization Redo Disable. Disable autonomous mechanism for requesting to redo the equalization process. The received presets or coefficients mismatch in Recovery.RcvrLock after Recovery EQ phases causes the EQ redo requests. If the EQ redo is infinite or you do not want eq requests and redo, setting this bit to 1 will stop the EQ requests and EQ redo so that the link can go ahead to L0 state for packet trasmissions.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rxeq_ph01_en</ipxact:name>
            <ipxact:description>Rx Equalization Phase 0/Phase 1 Hold Enable. When this bit is set the upstream port holds phase 0 (the downstream port holds phase 1) for 10ms. Holding phase 0 or phase 1 can be used to allow sufficient time for Rx Equalization to be performed by the PHY. This bit is used during Virtex-7 Gen3 equalization. The programmable bits [RXEQ_PH01_EN, EQ_PHASE_2_3] can be used to obtain the following variations of the equalization procedure:
Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate. If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate. If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate. If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.

Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rxeq_rgrdless_rxts</ipxact:name>
            <ipxact:description>When set to '1', the controller as Gen3 EQ master asserts RxEqEval to instruct the PHY to do Rx adaptation and evaluation after a 500ns timeout from a new preset request.
Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate. If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate. If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate. If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_14</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_equalization_disable</ipxact:name>
            <ipxact:description>Equalization Disable. Disable equalization feature. This bit cannot be changed once the LTSSM starts link training.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_dllp_xmt_delay_disable</ipxact:name>
            <ipxact:description>DLLP Transmission Delay Disable. Disable delay transmission of DLLPs before equalization.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_dc_balance_disable</ipxact:name>
            <ipxact:description>DC Balance Disable. Disable DC Balance feature.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_19</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>auto_eq_disable</ipxact:name>
            <ipxact:description>Autonomous Equalization Disable.

Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is RSVD.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>usp_send_8gt_eq_ts2_disable</ipxact:name>
            <ipxact:description>Upstream Port Send 8GT/s or 16GT/s EQ TS2 Disable. The base spec defines that USP can optionally send 8GT or 16GT EQ TS2, which implies that USP can set DSP TxPreset value in Gen4 or Gen5 Data Rate. This applies to upstream ports only; It does not apply to downstream ports.

Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is RSVD.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate. 
Value after reset in Gen4/Gen5 is DEFAULT_GEN4_USP_SEND_8GT_EQ_TS2_DISABLE/DEFAULT_GEN5_USP_SEND_16GT_EQ_TS2_DISABLE.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_eq_invreq_eval_diff_disable</ipxact:name>
            <ipxact:description>Eq InvalidRequest and RxEqEval Different Time Assertion Disable. Disable the assertion of Eq InvalidRequest and RxEqEval at different time.

Note: When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shared for Gen3 and Gen4/Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rate_shadow_sel</ipxact:name>
            <ipxact:description>Rate Shadow Select. This register value decide the Data Rate of shadow register.
The following shadow registers are controlled by this register.
 - GEN3_RELATED_OFF[9] EQ_PHASE_2_3
 - GEN3_RELATED_OFF[12] RXEQ_PH01_EN
 - GEN3_RELATED_OFF[19] RE_EQ_REQUEST_ENABLE
 - GEN3_RELATED_OFF[21] AUTO_EQ_DISABLE
 - GEN3_RELATED_OFF[22] USP_SEND_8GT_EQ_TS2_DISABLE
 - GEN3_EQ_LOCAL_FS_LF_OFF[5:0] GEN3_EQ_LOCAL_LF
 - GEN3_EQ_LOCAL_FS_LF_OFF[11:6] GEN3_EQ_LOCAL_FS
 - GEN3_EQ_PSET_COEFF_MAP_0[5:0] GEN3_EQ_PRE_CURSOR_PSET
 - GEN3_EQ_PSET_COEFF_MAP_0[11:6] GEN3_EQ_CURSOR_PSET
 - GEN3_EQ_PSET_COEFF_MAP_0[17:12] GEN3_EQ_POSET_CURSOR_PSET
 - GEN3_FCOEF_VEC_DEPTH_OFF[4:0] GEN3_FCOEF_MAX_VEC_DEPTH
 - GEN3_FCOEF_VEC_DEPTH_OFF[11:8] GEN3_FCOEF_ACCESS_VAR
 - GEN3_FCOEF_LANE1_0_OFF[5:0] GEN3_FCOEF_LANE0_PRE_CURSOR
 - GEN3_FCOEF_LANE1_0_OFF[11:6] GEN3_FCOEF_LANE0_POST_CURSOR
 - GEN3_FCOEF_LANE1_0_OFF[21:16] GEN3_FCOEF_LANE1_PRE_CURSOR
 - GEN3_FCOEF_LANE1_0_OFF[27:22] GEN3_FCOEF_LANE1_POST_CURSOR
 - GEN3_FCOEF_LANE3_2_OFF[5:0] GEN3_FCOEF_LANE2_PRE_CURSOR
 - GEN3_FCOEF_LANE3_2_OFF[11:6] GEN3_FCOEF_LANE2_POST_CURSOR
 - GEN3_FCOEF_LANE3_2_OFF[21:16] GEN3_FCOEF_LANE3_PRE_CURSOR
 - GEN3_FCOEF_LANE3_2_OFF[27:22] GEN3_FCOEF_LANE3_POST_CURSOR
 - GEN3_FCOEF_LANE5_4_OFF[5:0] GEN3_FCOEF_LANE4_PRE_CURSOR
 - GEN3_FCOEF_LANE5_4_OFF[11:6] GEN3_FCOEF_LANE4_POST_CURSOR
 - GEN3_FCOEF_LANE5_4_OFF[21:16] GEN3_FCOEF_LANE5_PRE_CURSOR
 - GEN3_FCOEF_LANE5_4_OFF[27:22] GEN3_FCOEF_LANE5_POST_CURSOR
 - GEN3_FCOEF_LANE7_6_OFF[5:0] GEN3_FCOEF_LANE6_PRE_CURSOR
 - GEN3_FCOEF_LANE7_6_OFF[11:6] GEN3_FCOEF_LANE6_POST_CURSOR
 - GEN3_FCOEF_LANE7_6_OFF[21:16] GEN3_FCOEF_LANE7_PRE_CURSOR
 - GEN3_FCOEF_LANE7_6_OFF[27:22] GEN3_FCOEF_LANE7_POST_CURSOR
 - GEN3_FCOEF_LANE9_8_OFF[5:0] GEN3_FCOEF_LANE8_PRE_CURSOR
 - GEN3_FCOEF_LANE9_8_OFF[11:6] GEN3_FCOEF_LANE8_POST_CURSOR
 - GEN3_FCOEF_LANE9_8_OFF[21:16] GEN3_FCOEF_LANE9_PRE_CURSOR
 - GEN3_FCOEF_LANE9_8_OFF[27:22] GEN3_FCOEF_LANE9_POST_CURSOR
 - GEN3_FCOEF_LANE11_10_OFF[5:0] GEN3_FCOEF_LANE10_PRE_CURSOR
 - GEN3_FCOEF_LANE11_10_OFF[11:6] GEN3_FCOEF_LANE10_POST_CURSOR
 - GEN3_FCOEF_LANE11_10_OFF[21:16] GEN3_FCOEF_LANE11_PRE_CURSOR
 - GEN3_FCOEF_LANE11_10_OFF[27:22] GEN3_FCOEF_LANE11_POST_CURSOR
 - GEN3_FCOEF_LANE13_12_OFF[5:0] GEN3_FCOEF_LANE12_PRE_CURSOR
 - GEN3_FCOEF_LANE13_12_OFF[11:6] GEN3_FCOEF_LANE12_POST_CURSOR
 - GEN3_FCOEF_LANE13_12_OFF[21:16] GEN3_FCOEF_LANE13_PRE_CURSOR
 - GEN3_FCOEF_LANE13_12_OFF[27:22] GEN3_FCOEF_LANE13_POST_CURSOR
 - GEN3_FCOEF_LANE15_14_OFF[5:0] GEN3_FCOEF_LANE14_PRE_CURSOR
 - GEN3_FCOEF_LANE15_14_OFF[11:6] GEN3_FCOEF_LANE14_POST_CURSOR
 - GEN3_FCOEF_LANE15_14_OFF[21:16] GEN3_FCOEF_LANE15_PRE_CURSOR
 - GEN3_FCOEF_LANE15_14_OFF[27:22] GEN3_FCOEF_LANE15_POST_CURSOR
 - GEN3_EQ_CONTROL_OFF[3:0] GEN3_EQ_FB_MODE
 - GEN3_EQ_CONTROL_OFF[4] GEN3_EQ_PHASE23_EXIT_MODE
 - GEN3_EQ_CONTROL_OFF[5] GEN3_EQ_EVAL_2MS_DISABLE
 - GEN3_EQ_CONTROL_OFF[23:8] GEN3_EQ_PSET_REQ_VEC
 - GEN3_EQ_CONTROL_OFF[24] GEN3_EQ_FOM_INC_INITIAL_EVAL
 - GEN3_EQ_CONTROL_OFF[25] GEN3_EQ_PSET_REQ_AS_COEF
 - GEN3_EQ_FB_MODE_DIR_CHANGE_OFF[4:0] GEN3_EQ_FMDC_T_MIN_PHASE23
 - GEN3_EQ_FB_MODE_DIR_CHANGE_OFF[9:5] GEN3_EQ_FMDC_N_EVALS
 - GEN3_EQ_FB_MODE_DIR_CHANGE_OFF[13:10] GEN3_EQ_FMDC_MAX_PRE_CUSROR_DELTA
 - GEN3_EQ_FB_MODE_DIR_CHANGE_OFF[17:14] GEN3_EQ_FMDC_MAX_POST_CUSROR_DELTA
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_gen3_eq_control_off</ipxact:name>
          <ipxact:description>This register controls equalization for Phase2 in an upstream port (USP), or Phase3 in a downstream port (DSP).</ipxact:description>
          <ipxact:addressOffset>0x8a8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>gen3_eq_fb_mode</ipxact:name>
            <ipxact:description>Feedback Mode.
Other values are reserved.
Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is a shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_eq_phase23_exit_mode</ipxact:name>
            <ipxact:description>Behavior After 24 ms Timeout (when optimal settings are not found). 
 For a USP: Determine next LTSSM state from Phase2 after 24ms Timeout
 - 0: Recovery.Speed
 - 1: Recovery.Equalization.Phase3
When optimal settings are not found then:
 - Equalization Phase 2 Successful status bit is not set in the Link Status Register 2 when GEN3_EQ_PHASE23_EXIT_MODE = 0
 - Equalization Phase 2 Successful status bit is set in the Link Status Register 2 when GEN3_EQ_PHASE23_EXIT_MODE = 1
 - Equalization Phase 2 Complete status bit is set in the Link Status Register 2
For a DSP: Determine next LTSSM state from Phase3 after 24ms Timeout
 - 0: Recovery.Speed
 - 1: Recovery.Equalization.RcvrLock
When optimal settings are not found then:
 - Equalization Phase 3 Successful status bit is not set in the Link Status Register 2 when GEN3_EQ_PHASE23_EXIT_MODE = 0
 - Equalization Phase 3 Successful status bit is set in the Link Status Register 2 when GEN3_EQ_PHASE23_EXIT_MODE = 1
 - Equalization Phase 3 Complete status bit is set in the Link Status Register 2
Note: GEN3_EQ_PHASE23_EXIT_MODE = 1 affects Direction Change feed back mode. EQ requests for Figure Of Merit mode complete before 24ms timeout. For more information, see GEN3_EQ_PSET_REQ_VEC Register.

Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_eq_eval_2ms_disable</ipxact:name>
            <ipxact:description>Phase2_3 2 ms Timeout Disable. Determine behavior in Phase2 for USP (Phase3 if DSP) when the PHY does not respond within 2ms to the assertion of RxEqEval.
Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_lower_rate_eq_redo_enable</ipxact:name>
            <ipxact:description>Support EQ redo and lower rate change. To access this field, RATE_SHADOW_SEL should be set to 0.
Note: Gen3 and Gen4 share the same register bit and have the same feature.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_eq_pset_req_vec</ipxact:name>
            <ipxact:description>Preset Request Vector. Requesting of Presets during the initial part of the EQ Master Phase. Encoding scheme is as follows:

 Bit [15:0] =0x0: No preset is requested and evaluated in EQ Master Phase.

 Bit [i] =1: Preset=i is requested and evaluated in EQ Master Phase.
 - 0x0000000000000000: No preset be requested and evaluated in EQ Master Phase
 - 0x000000xxxxxxxxx1: Preset 0 is requested and evaluated in EQ Master Phase
 - 0x000000xxxxxxxx1x: Preset 1 is requested and evaluated in EQ Master Phase
 - 0x000000xxxxxxx1xx: Preset 2 is requested and evaluated in EQ Master Phase
 - 0x000000xxxxxx1xxx: Preset 3 is requested and evaluated in EQ Master Phase
 - 0x000000xxxxx1xxxx: Preset 4 is requested and evaluated in EQ Master Phase
 - 0x000000xxxx1xxxxx: Preset 5 is requested and evaluated in EQ Master Phase
 - 0x000000xxx1xxxxxx: Preset 6 is requested and evaluated in EQ Master Phase
 - 0x000000xx1xxxxxxx: Preset 7 is requested and evaluated in EQ Master Phase
 - 0x000000x1xxxxxxxx: Preset 8 is requested and evaluated in EQ Master Phase
 - 0x00000x1xxxxxxxxx: Preset 9 is requested and evaluated in EQ Master Phase
 - 0x000001xxxxxxxxxx: Preset 10 is requested and evaluated in EQ Master Phase
 - All other encodings: Reserved
Note: You must contact your PHY vendor to ensure 24 ms timeout does not occur in presets requests in EQ master phase, that is, you must set a proper value to the GEN3_EQ_PSET_REQ_VEC register so that the EQ tunning for Figure of Merit in the EQ master phase completes before 24 ms timeout.
Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x07ff</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_eq_fom_inc_initial_eval</ipxact:name>
            <ipxact:description>Include Initial FOM. Include or not the FOM feedback from the initial preset evaluation performed in the EQ Master, when finding the highest FOM among all preset evaluations.
Note:
 - When CX_GEN4_SPEED/CX_GEN5_SPEED, this register is shadow register for Gen3 and Gen4/Gen5 data rate.
 - If RATE_SHADOW_SEL==00b, this register is for Gen3 data rate.
 - If RATE_SHADOW_SEL==01b, this register is for Gen4 data rate.
 - If RATE_SHADOW_SEL==10b, this register is for Gen5 data rate.
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_eq_pset_req_as_coef</ipxact:name>
            <ipxact:description>GEN3_EQ_PSET_REQ_AS_COEF is an internally reserved field. Do not use.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>gen3_req_send_consec_eieos_for_pset_map</ipxact:name>
            <ipxact:description>Request controller to send back-to-back EIEOS in Recovery.RcvrLock state until presets to coefficients mapping is complete.
Note: Gen3 and Gen4 share the same register bit and have the same feature.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_pipe_loopback_control_off</ipxact:name>
          <ipxact:description>This register controls the PIPE Loopback.</ipxact:description>
          <ipxact:addressOffset>0x8b8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rxstatus_value</ipxact:name>
            <ipxact:description>RXSTATUS_VALUE is an internally reserved field. Do not use.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pipe_loopback</ipxact:name>
            <ipxact:description>PIPE Loopback Enable.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_misc_control_1_off</ipxact:name>
          <ipxact:description>This is the DBI Read-Only write enable register.</ipxact:description>
          <ipxact:addressOffset>0x8bc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>dbi_ro_wr_en</ipxact:name>
            <ipxact:description>Write to RO Registers Using DBI.
For more information, see Writing to Read-Only Registers in Register Module, LBC, and DBI section in the Controller Operations chapter of the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>default_target</ipxact:name>
            <ipxact:description>Default target for an IO or MEM request with UR/CA/CRS received. Based on the value of this field the controller either drops or forwards these requests to your application.
For more information, see ECRC Handling and Request TLP Routing Rules in Receive Routing section of the Controller Operations chapter of the Databook.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ur_ca_mask_4_trgt1</ipxact:name>
            <ipxact:description>When this field is set to '1', the controller suppresses error logging, error message generation, and CPL generation for non-posted requests TLPs (with UR filtering status) forwarded to your application (that is, when DEFAULT_TARGET =1). For more information, see Advanced Error Handling For Received TLPs chapter of the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>simplified_replay_timer</ipxact:name>
            <ipxact:description>Enables Simplified Replay Timer (Gen4). For more information, see Transmit Replay in Transmit TLP Processing section in the Controller Operations chapter of the Databook.
Simplified Replay Timer can have the following Values:
 - A value from 24,000 to 31,000 Symbol Times when Extended Synch is 0b.
 - A value from 80,000 to 100,000 Symbol Times when Extended Synch is 1b.
The Simplified Replay Timer value must not be changed while the link is in use.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>disable_auto_ltr_clr_msg</ipxact:name>
            <ipxact:description>Disable the autonomous generation of LTR clear message in upstream port. This field can have the following values:
For more information, see Latency Tolerance Reporting (LTR) Message Generation
[EP Mode] in Message Generation section of the Controller Operations chapter of the Databook.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_device_number</ipxact:name>
            <ipxact:description>When ARI is enabled, this field enables use of the device ID.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>cfg_tlp_bypass_en_reg</ipxact:name>
            <ipxact:description>Setting of this field defines how to decide the destination of Configuration requests.
Note: When app_req_retry_en is asserted, the setting of this field is ignored.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>config_limit_reg</ipxact:name>
            <ipxact:description>Configuration requests are directed either to CDM or ELBI/RTRGT1 based on the value of this field.
 - Configuration requests with an address less CONFIG_LIMIT_REG are directed to the CDM
 - Configuration requests with an address greater than CONFIG_LIMIT_REG are directed to either ELBI or TRGT1 interface based on the setting of TARGET_ABOVE_CONFIG_LIMIT_REG field.
Your application must set a proper value for this field based on your extended configuration registers. For more information, see the CDM/ELBI Register Space Access Through CFG Request in Register Module, LBC, and DBI section in the Controller Operations chapter of the Databook.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x33f</ipxact:value>
                <ipxact:mask>0x3ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>10</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>target_above_config_limit_reg</ipxact:name>
            <ipxact:description>Configuration requests with an address greater than CONFIG_LIMIT_REG are directed to either ELBI or TRGT1 interface based on the setting of this field. This field can have the following values:


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>p2p_track_cpl_to_reg</ipxact:name>
            <ipxact:description>Determines whether to track completion of transmitted Non-Posted TLPs in P2P mode.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>p2p_err_rpt_ctrl</ipxact:name>
            <ipxact:description>Determines whether to enable Peer to Peer (P2P) error reporting.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_25</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf0_port_logic_aux_clk_freq_off</ipxact:name>
          <ipxact:description>This register controls the auxiliary clock frequency.</ipxact:description>
          <ipxact:addressOffset>0xb40</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>aux_clk_freq</ipxact:name>
            <ipxact:description>The aux_clk frequency in MHz. This value is used to provide a 1 us reference for counting time during low-power states with aux_clk when the PHY has removed the pipe_clk.
Frequencies lower than 1 MHz are possible but with a loss of accuracy in the time counted.
If the actual frequency (f) of aux_clk does not exactly match the programmed frequency (f_prog), then there is an error in the time counted by the controller that can be expressed in percentage as: err% = (f_prog/f-1)*100. For example if f=2.5 MHz and f_prog=3 MHz, then err% =(3/2.5-1)*100 =20%, meaning that the time counted by the controller on aux_clk will be 20% greater than the time in us programmed in the corresponding time register (for example T_POWER_ON).


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00a</ipxact:value>
                <ipxact:mask>0x3ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>10</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_10</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000000</ipxact:value>
                <ipxact:mask>0x3fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_device_id_vendor_id_reg</ipxact:name>
          <ipxact:description>This register holds the device ID, next offset pointer for RCRB mode and vendor ID.</ipxact:description>
          <ipxact:addressOffset>0x1000</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_type0_vendor_id</ipxact:name>
            <ipxact:description>Vendor ID.
The Vendor ID register identifies the manufacturer of the Function. Valid vendor identifiers are allocated by the PCI-SIG to ensure uniqueness. It is not permitted to populate this register with a value of FFFFh, which is an invalid value for Vendor ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x8086</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_type0_device_id</ipxact:name>
            <ipxact:description>- DEVICE_ID [31:16]
 - The Device ID register identifies the particular Function for PCIe Type0 and Type1 configuration header. This identifier is allocated by the vendor.
Databook.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_class_code_revision_id</ipxact:name>
          <ipxact:description>This register specifies the class code and revision ID of a function.</ipxact:description>
          <ipxact:addressOffset>0x1008</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>revision_id</ipxact:name>
            <ipxact:description>Revision ID.
The value in this register specifies a Function specific revision identifier. The value is chosen by the vendor. Zer is an acceptable value. The Revision ID should be viewed as a vendor defined extension to the Device ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>program_interface</ipxact:name>
            <ipxact:description>Prgramming Interface.
This field identifies a specific register-level prgramming interface (if any) so that device independent software can interact with the Function.
Encodings for interface are prvided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subclass_code</ipxact:name>
            <ipxact:description>Sub-Class Code.
Specifies a base class sub-class, which identifies more specifically the operation of the Function.
Encodings for sub-class are prvided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>base_class_code</ipxact:name>
            <ipxact:description>Base Class Code.
A code that bradly classifies the type of operation the Function performs.
Encodings for base class, are prvided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bist_header_type_latency_cache_line_size_reg</ipxact:name>
          <ipxact:description>This register provides the status and controls BIST. It also holds information regarding the header layout, latency timer, and cache line size.</ipxact:description>
          <ipxact:addressOffset>0x100c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_type</ipxact:name>
            <ipxact:description>Header Layout.
This field identifies the layout of the second part of the predefined header.
The contrller uses 000 0000b encoding.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>multi_func</ipxact:name>
            <ipxact:description>Multi-Function Device.
Except where stated otherwise, it is recommended that this bit be set if there are multiple Functions, and clear if there is only one Function.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bar0_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x1010</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar0_mem_io</ipxact:name>
            <ipxact:description>- BAR0 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_type</ipxact:name>
            <ipxact:description>-  BAR0 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_prefetch</ipxact:name>
            <ipxact:description>- BAR0 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_start</ipxact:name>
            <ipxact:description>- BAR0_START. BAR0 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bar1_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x1014</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar1_mem_io</ipxact:name>
            <ipxact:description>- BAR1 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_type</ipxact:name>
            <ipxact:description>- BAR1 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_prefetch</ipxact:name>
            <ipxact:description>- BAR1 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_start</ipxact:name>
            <ipxact:description>- BAR1 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bar2_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x1018</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar2_mem_io</ipxact:name>
            <ipxact:description>BAR2 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_type</ipxact:name>
            <ipxact:description>BAR2 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_prefetch</ipxact:name>
            <ipxact:description>BAR2 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_start</ipxact:name>
            <ipxact:description>BAR2 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bar3_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x101c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar3_mem_io</ipxact:name>
            <ipxact:description>BAR3 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_type</ipxact:name>
            <ipxact:description>BAR3 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_prefetch</ipxact:name>
            <ipxact:description>BAR3 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_start</ipxact:name>
            <ipxact:description>BAR3 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bar4_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x1020</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar4_mem_io</ipxact:name>
            <ipxact:description>BAR4 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_type</ipxact:name>
            <ipxact:description>BAR4 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_prefetch</ipxact:name>
            <ipxact:description>BAR4 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_start</ipxact:name>
            <ipxact:description>BAR4 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_bar5_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x1024</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar5_mem_io</ipxact:name>
            <ipxact:description>BAR5 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_type</ipxact:name>
            <ipxact:description>BAR5 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_prefetch</ipxact:name>
            <ipxact:description>BAR5 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge prcessor writes into this range without causing errrs. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_r_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else r(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_start</ipxact:name>
            <ipxact:description>BAR5 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_cardbus_cis_ptr_reg</ipxact:name>
          <ipxact:description>This register holds the CardBus CIS pointer.</ipxact:description>
          <ipxact:addressOffset>0x1028</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cardbus_cis_pointer</ipxact:name>
            <ipxact:description>CardBus CIS Pointer.
Its functionality does not apply to PCI Express. It must be hardwired to 0000 0000h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_subsystem_id_subsystem_vendor_id_reg</ipxact:name>
          <ipxact:description>These registers are used to uniquely identify the add-in card or subsystem where the PCI Express component resides. They provide a mechanism for vendors to distinguish their products from one another even though the assemblies may have the same PCI Express component on them (and, therefore, the same Vendor ID and Device ID).</ipxact:description>
          <ipxact:addressOffset>0x102c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>subsys_vendor_id</ipxact:name>
            <ipxact:description>Subsystem Vendor ID.
Subsystem Vendor IDs can be obtained frm the PCI SIG and are used to identify the vendor of the add-in card or subsystem. Values for the Subsystem ID are vendor-specific.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subsys_dev_id</ipxact:name>
            <ipxact:description>Subsystem ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_exp_rom_base_addr_reg</ipxact:name>
          <ipxact:description>This register handles the base address and size information for this expansion ROM.</ipxact:description>
          <ipxact:addressOffset>0x1030</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rom_bar_enable</ipxact:name>
            <ipxact:description>Expansion rM Enable.
This bit contrls whether or not the Function accepts accesses to its expansion rM.
The Memory Space Enable bit in the Command register has precedence over the Expansion rM Enable bit. A Function must claim accesses to its expansion rM only if both the Memory Space Enable bit and the Expansion rM Enable bit are set.


Note: The access attributes of this field are as follows:
 - Wire: if (EXP_rM_BAR_MASK_REG.rM_BAR_ENABLED == 1) then R/W else R 
 - Dbi: if (EXP_rM_BAR_MASK_REG.rM_BAR_ENABLED == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_pci_cap_ptr_reg</ipxact:name>
          <ipxact:description>This register is used to point to a linked list of capabilities implemented by a Function.</ipxact:description>
          <ipxact:addressOffset>0x1034</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_pointer</ipxact:name>
            <ipxact:description>Capabilities Pointer. This register points to a valid capability structure. Either this structure is the PCI Express Capability structure, or a subsequent list item points to the PCI Express Capability structure. The bottom tw bits are reserved, the contrller sets it to 00b. Software must mask these bits off before using this register as a pointer in Configuration Space to the first entry of a linked list of new capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_type0_hdr_max_latency_min_grant_interrupt_pin_interrupt_line_reg</ipxact:name>
          <ipxact:description>The Interrupt Line register communicates interrupt line routing information. The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses.</ipxact:description>
          <ipxact:addressOffset>0x103c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>int_pin</ipxact:name>
            <ipxact:description>Interrupt Pin.
The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses. All encodings other than the defined encodings are reserved.
PCI Express defines one legacy interrupt Message for a single Function device and up to four legacy interrupt Messages for a multi-Function device. For a single Function device, only INTA may be used.

Any Function on a multi-Function device can use any of the INTx Messages. If a device implements a single legacy interrupt Message, it must be INTA; if it implements tw legacy interrupt Messages, they must be INTA and INTB; and so forth.
For a multi-Function device, all Functions may use the same INTx Message or each may have its own (up to a maximum of four Functions) or any combination thereof. A single Function can never generate an interrupt request on more than one INTx Message.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pm_cap_cap_id_nxt_ptr_reg</ipxact:name>
          <ipxact:description>This register provides information refarding the Power Management Capabilities.</ipxact:description>
          <ipxact:addressOffset>0x1040</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pm_next_pointer</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field prvides an offset into the function's configuration space pointing to the location of next item in the capabilities list. If there are no additional items in the capabilities list, this field is set to 00h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pm_spec_ver</ipxact:name>
            <ipxact:description>Version.
This field prvides the Power Management specification version. The contrller hardwires this field to 011b for functions compliant to PCI Express Base Specification, Revision 4.0, Version 1.0&gt;.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_clk</ipxact:name>
            <ipxact:description>PME Clock.
Does not apply to PCI Express, the contrller hardwires it to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsi</ipxact:name>
            <ipxact:description>Device Specific Initialization.
The DSI bit indicates whether special initialization of this function is required.

When set, indicates that the function requires a device specific initialization sequence following a transition to the D0uninitialized state.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>aux_curr</ipxact:name>
            <ipxact:description>Aux_Current.
This 3 bit field reports the Vaux auxiliary current requirements for the function.

If this function implements the Data Register, the contrller hardwires this field to 000b.

If PME_Support is 0 xxxxb (PME assertion frm D3cold is not supported), the contrller hardwires this field to 0000b.

For functions where PME_Support is 1 xxxxb (PME assertion frm D3cold is supported), and which do not implement the Data field, the encodings defined in Values: apply:


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d1_support</ipxact:name>
            <ipxact:description>D1_Support.
If this bit is set, this function supports the D1 Power Management state. Functions that do not support D1 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d2_support</ipxact:name>
            <ipxact:description>D2_Support.
If this bit is set, this function supports the D2 Power Management state. Functions that do not support D2 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_support</ipxact:name>
            <ipxact:description>PME_Support.
This 5-bit field indicates the power states in which the function may generate a PME and/or forward PME messages.
A value of 0b for any bit indicates that the function is not capable of asserting PME while in that power state.
 - bit(27) X XXX1b - PME can be generated frm D0
 - bit(28) X XX1Xb - PME can be generated frm D1
 - bit(29) X X1XXb - PME can be generated frm D2
 - bit(30) X 1XXXb - PME can be generated frm D3hot
 - bit(31) 1 XXXXb - PME can be generated frm D3cold
Bit 31 (PME can be asserted frm D3cold) represents a special case. Functions that set this bit require some sort of auxiliary power source. Implementation specific mechanisms are recommended to validate that the power source is available before setting this bit.

Each bit that corresponds to a supported D-state must be set for PCI-PCI Bridge structures representing Ports on rot Complexes/Switches to indicate that the Bridge will forward PME Messages. Bit 31 must only be set if the Port is still able to forward PME Messages when main power is not available.

The read value frm this field is the write value &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where D1_SUPPORT and D2_SUPPORT are fields in this register.

The reset value PME_SUPPORT_n &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where PME_SUPPORT_n is a configuration parameter.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pm_cap_con_status_reg</ipxact:name>
          <ipxact:description>This register is used to manage the PCI function's power management state as well as to enable/monitor PMEs.</ipxact:description>
          <ipxact:addressOffset>0x1044</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>power_state</ipxact:name>
            <ipxact:description>PowerState.
This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state.
You can write to this register; however, the read-back value is the actual power state, not the write value. If you attempt to write an unsupported, optional state to this field, the write operation completes normally; however, the data is discarded and no state change occurs.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>no_soft_rst</ipxact:name>
            <ipxact:description>No_Soft_Reset.
This bit indicates the state of the function after writing the PowerState field to transition the function frm D3hot to D0.
 - When set, this transition preserves internal function state. The function is in D0Active and no additional software intervention is required.
 - When clear, this transition results in undefined internal function state.
Regardless of this bit, functions that transition frm D3hot to D0 by Fundamental Reset will return to D0Uninitialized with only PME context preserved if PME is supported and enabled.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_4</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_msi_cap_pci_msi_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This register holds MSI Capability Header information and controls the MSI behaviour.</ipxact:description>
          <ipxact:addressOffset>0x1050</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msi_cap_next_offset</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_enable</ipxact:name>
            <ipxact:description>MSI Enable.
 - If set and the MSI-X Enable bit in the MSI-X Message Contrl register is clear, the function is permitted to use MSI to request service and is prhibited frm using INTx interrupts. System configuration software sets this bit to enable MSI. A device driver is prhibited frm writing this bit to mask a function's service request. For more information on contrl of INTx interrupts, see section 7.5.1.1 of PCI Express Base Specification.
 - If clear, the function is prhibited frm using MSI to request service.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_cap</ipxact:name>
            <ipxact:description>Multiple Message Capable.
System software reads this field to determine the number of requested vectors. The number of requested vectors must be aligned to a power of tw (if a function requires three vectors, it requests four by initializing this field to 010b). All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_en</ipxact:name>
            <ipxact:description>Multiple Message Enable.
Software writes to this field to indicate the number of allocated vectors (equal to or less than the number of requested vectors). The number of allocated vectors is aligned to a power of tw. If a function requests four vectors (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, tw, or one vector by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a function will be allocated at least 1 vector. All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_64_bit_addr_cap</ipxact:name>
            <ipxact:description>64 bit address capable.
This bit must be set if the function is a PCI Express Endpoint.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_pvm_support</ipxact:name>
            <ipxact:description>Per-Vector Masking Capable.
 - If set, the function supports MSI Per-Vector Masking.
 - If clear, the function does not support MSI Per-Vector Masking.
This bit must be set if the function is a PF or VF within an SR-IOV Device.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_cap</ipxact:name>
            <ipxact:description>Extended Message Data Capable.
 - If set, the function is capable of prviding Extended Message Data.
 - If clear, the function does not support prviding Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_en</ipxact:name>
            <ipxact:description>Extended Message Data Enable.
 - If set, the function is enabled to prvide Extended Message Data.
 - If clear, the function is not enabled to prvide Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP ? rw : r 
 - Dbi: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP  ? rw : r</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_pcie_cap_id_pcie_next_cap_ptr_pcie_cap_reg</ipxact:name>
          <ipxact:description>This is the PCI Express Capabilities, ID, and Next Pointer Register.</ipxact:description>
          <ipxact:addressOffset>0x1070</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer. This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_slot_imp</ipxact:name>
            <ipxact:description>Slot Implemented. When set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled). This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_int_msg_num</ipxact:name>
            <ipxact:description>PCIE Interrupt Message Number.
Interrupt Message Number. This field indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.

For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Contrl register.

For MSI-X, the value in this field indicates which MSI-X Table entry is used to generate the interrupt message. The entry must be one of the first 32 entries even if the Function implements more than 32 entries. For a given MSI-X implementation, the entry must remain constant.

If both MSI and MSI-X are implemented, they are permitted to use different vectors, though software is permitted to enable only one mechanism at a time. If MSI-X is enabled, the value in this field must indicate the vector for MSI-X. If MSI is enabled or neither is enabled, the value in this field must indicate the vector for MSI. If software enables both MSI and MSI-X at the same time, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvd</ipxact:name>
            <ipxact:description>Reserved.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_31</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_device_capabilities_reg</ipxact:name>
          <ipxact:description>The Device Capabilities register identifies PCI Express device function specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x1074</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_payload_size</ipxact:name>
            <ipxact:description>Max_Payload_Size Supported.
This field indicates the maximum payload size that the function can support for TLPs.
All encodings other than the defined encodings are reserved.
The functions of a Multi-Function Device are permitted to report different values for this field.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_support</ipxact:name>
            <ipxact:description>Phantom Functions Supported.
This field indicates the support for use of unclaimed function numbers to extend the number of outstanding transactions allowed by logically combining unclaimed function numbers (called Phantom Functions) with the Tag identifier (see Section 2.2.6.2 of PCI Express Base Specification for a description of Tag Extensions).

With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI Multi-Function Devices.

This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
Note: Phantom Function support for the function must be enabled by the Phantom Functions Enable field in the Device Contrl register before the Function is permitted to use the Function Number field in the Requester ID for Phantom Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_supp</ipxact:name>
            <ipxact:description>Extended Tag Field Supported.
This bit, in combination with the 10-Bit Tag Requester Supported bit in the Device Capabilities 2 register, indicates the maximum supported size of the Tag field as a Requester. This bit must be set if the 10-Bit Tag Requester Supported bit is set.
Note: 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Contrl register of the Requester Function before 8-bit Tags can be generated by the Requester. See Section 2.2.6.2 of PCI Express Base Specification for interactions with enabling the use of 10-Bit Tags.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l0s_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L0s Acceptable Latency. This field indicates the acceptable total latency that an Endpoint can withstand due to the transition frm L0s state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.

Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path frm this Endpoint to the rot Complex rot Port to determine whether ASPM L0s entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the contrller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l1_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L1 Acceptable Latency. This field indicates the acceptable latency that an Endpoint can withstand due to the transition frm L1 state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.
Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path frm this Endpoint to the rot Complex rot Port to determine whether ASPM L1 entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the contrller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W (Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_role_based_err_report</ipxact:name>
            <ipxact:description>rle-Based Errr Reporting. When set, this bit indicates that the function implements the functionality originally defined in the Errr Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1. This bit must be set by all functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_16</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_flr_cap</ipxact:name>
            <ipxact:description>Function Level Reset Capability. A value of 1b indicates the function supports the optional Function Level Reset mechanism described in section 6.6.2 of the PCI Express Base Specification.

This bit applies to Endpoints only. For all other function types the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_29</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_device_control_device_status</ipxact:name>
          <ipxact:description>This register controls PCI Express device specific parameters and provides information about PCI Express device (function) specific parameters.</ipxact:description>
          <ipxact:addressOffset>0x1078</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_en</ipxact:name>
            <ipxact:description>Extended Tag Field Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Contrl 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If the Extended Tag Field Enable bit is set, the function is permitted to use an 8-bit Tag field as a Requester
 - If the Extended Tag Field Enable bit is clear, the Function is restricted to a 5-bit Tag field
See section 2.2.6.2 of PCI Express Base Specification for required behavior when the 10-Bit Tag Requester Enable bit is set.

If software changes the value of the Extended Tag Field Enable bit while the function has outstanding Non-Posted Requests, the result is undefined.

For functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? rw : r  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? rw : r</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_en</ipxact:name>
            <ipxact:description>Phantom Functions Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Contrl 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If this bit is set, it enables a function to use unclaimed functions as Phantom functions to extend the number of outstanding transaction identifiers
 - If this bit is clear, the function is not allowed to use Phantom functions
For more information, see section 2.2.6.2 of PCI Express Base Specification.

Software should not change the value of this bit while the function has outstanding Non-Posted Requests; otherwise, the result is undefined.

For functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? rw : r  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? rw : r</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aux_power_pm_en</ipxact:name>
            <ipxact:description>Aux Power PM Enable.
This bit is derived by sampling the sys_aux_pwr_det input.
When set this bit, enables a function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements. Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Contrl/Status register (PMCSR). For Multi-Function devices, a component is allowed to draw Aux power if at least one of the functions has this bit set.
Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such functions, this bit is not modified by Conventional Reset.

For functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_no_snoop</ipxact:name>
            <ipxact:description>Enable No Snoop.
If this bit is set, the function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency (see section 2.2.6.5 in PCI Express Base Specification).
Note: Setting this bit to 1b should not cause a function to set the No Snoop attribute on all transactions that it initiates. Even when this bit is set, a function is only permitted to set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.

The contrller hardwires this bit 0b if a function wuld never set the No Snoop attribute in transactions it initiates.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_read_req_size</ipxact:name>
            <ipxact:description>Max_Read_Request_Size.
This field sets the maximum Read Request size for the function as a Requester. The function must not generate Read Requests with a size exceeding the set value.
For functions that do not generate Read Requests larger than 128 bytes and functions that do not generate Read Requests on their own behalf, the contrller implements this field as Read Only (r) with a value of 000b.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_initiate_flr</ipxact:name>
            <ipxact:description>Initiate Function Level Reset (applicable to Endpoints with Function Level Reset Capability set to 1b).
A write of 1b initiates Function Level Reset to the Function. The value read by software frm this bit is always 0b.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_link_capabilities_reg</ipxact:name>
          <ipxact:description>The Link Capabilities register identifies PCI Express Link specific capabilities and CXL-RCRB link specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x107c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_speed</ipxact:name>
            <ipxact:description>Max Link Speed.
This field indicates the maximum Link speed of the associated Port.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed. All encodings other than the defined encodings are reserved.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_width</ipxact:name>
            <ipxact:description>Maximum Link Width.
This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes ruted to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
All encodings other than the defined encodings are reserved.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x04</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_support</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Support.
This field indicates the level of ASPM supported on the given PCI Express Link. For more information on ASPM support requirements, see section 5.4.1 of PCI Express Base Specification.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l0s_exit_latency</ipxact:name>
            <ipxact:description>L0s Exit Latency.
This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition frm L0s to L0. If L0s is not supported, the value is undefined; however, see the Implementation Note Potential Issues With Legacy Software When L0s is Not Supported in section 5.4.1.1 of PCI Express Base Specification for the recommended value.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are tw each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG) determines which one is used by the contrller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the contrller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the contrller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l1_exit_latency</ipxact:name>
            <ipxact:description>L1 Exit Latency. This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition frm ASPM L1 to L0. If ASPM L1 is not supported, the value is undefined.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are tw each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG) determines which one is used by the contrller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the contrller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the contrller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Contrl Register (LINK_CONTrL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_clock_power_man</ipxact:name>
            <ipxact:description>Clock Power Management.
For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) thrugh the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2/L3 Ready Link states. A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.

L1 PM Substates defines other semantics for the CLKREQ# signal, which are managed independently of Clock Power Management.

This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.

For a Multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all functions of the Multi-Function device indicate a 1b in this bit. For ARI Devices, all Functions must indicate the same value in this bit.

For Downstream Ports, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_surprise_down_err_rep_cap</ipxact:name>
            <ipxact:description>Surprise Down Errr Reporting Capable.
For a Downstream Port, this bit must be set if the component supports the optional capability of detecting and reporting a Surprise Down errr condition.

For Upstream Ports and components that do not support this optional capability, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active_rep_cap</ipxact:name>
            <ipxact:description>Data Link Layer Link Active Reporting Capable.
For a Downstream Port, the contrller hardwires this bit to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Contrl and Management State Machine. For a hot-plug capable Downstream Port (as indicated by the Hot-Plug Capable bit of the Slot Capabilities register) or a Downstream Port that supports Link speeds greater than 5.0 GT/s, the contrller hardwires this bit to 1b.

For Upstream Ports and components that do not support this optional capability, the contrller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_not_cap</ipxact:name>
            <ipxact:description>Link Bandwidth Notification Capability.
A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms. This capability is required for all rot Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.

This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aspm_opt_compliance</ipxact:name>
            <ipxact:description>ASPM Optionality Compliance.
This field must be set to 1b in all functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.

Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_port_num</ipxact:name>
            <ipxact:description>Port Number.
This field indicates the PCI Express Port number for the given PCI Express Link.
Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_link_control_link_status_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters.</ipxact:description>
          <ipxact:addressOffset>0x1080</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_control</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Contrl.
This field contrls the level of ASPM enabled on the given PCI Express Link. See section 5.4.1.3 of PCI Express Base Specification for requirements on when and how to enable ASPM.

Note: L0s Entry Enabled enables the Transmitter to enter L0s. If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled frm entering L0s (00b or 10b).

ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link. When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.

For Multi-Function Devices (including ARI Devices), it is recommended that software prgram the same value for this field in all Functions. For non-ARI Multi-Function Devices, only capabilities enabled in all Functions are enabled for the component as a whole.

For ARI Devices, ASPM Contrl is determined solely by the setting in Function0, regardless of Function 0's D-state. The settings in the other Functions always return whatever value software prgrammed for each, but otherwise are ignored by the component.

Software must not enable L0s in either direction on a given Link unless components on both sides of the Link each support L0s; otherwise, the result is undefined.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_rcb</ipxact:name>
            <ipxact:description>Read Completion Boundary (RCB).


rot Ports:
Indicates the RCB value for the rot Port. Refer to section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB.
The contrller hardwires this bit for a rot Port and returns its RCB support capabilities.



Endpoints and Bridges:
Optionally set by configuration software to indicate the RCB value of the rot Port Upstream frm the Endpoint or Bridge. Refer to Section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB is same as rot Port.
Configuration software must only set this bit if the rot Port Upstream frm the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
For functions that do not implement this feature, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_disable</ipxact:name>
            <ipxact:description>Link Disable.
This bit disables the Link by directing the LTSSM to the Disabled state when set; this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Writes to this bit are immediately reflected in the value read frm the bit, regardless of actual Link state.

After clearing this bit, software must honor timing requirements defined in Section 6.6.1 with respect to the first Configuration Read following a Conventional Reset.

In a DSP that supports crsslink, the contrller gates the write value with the CrSS_LINK_EN field in PORT_LINK_CTRL_OFF.


Note: The access attributes of this field are as follows:
 - Wire: CX_CrSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CrSS_LINK_EN=1||CX_CrSSLINK_ENABLE=0 &amp;&amp; dsp=1 ? rw : r 
 - Dbi: CX_CrSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CrSS_LINK_EN=1||CX_CrSSLINK_ENABLE=0 &amp;&amp; dsp=1? rw : r</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retrain_link</ipxact:name>
            <ipxact:description>Retrain Link.
A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. If the Port is in DPC when a write of 1b to this bit occurs, the result is undefined. Reads of this bit always return 0b.

It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in prgress.

This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

This bit always returns 0b when read.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_common_clk_config</ipxact:name>
            <ipxact:description>Common Clock Configuration. When set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.

A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchrnous reference clock.

For non-ARI Multi-Function Devices, software must prgram the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.

For ARI Devices, Common Clock Configuration is determined solely by the setting in Function 0. The settings in the other Functions always return whatever value software prgrammed for each, but otherwise are ignored by the component.

Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.

After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_extended_synch</ipxact:name>
            <ipxact:description>Extended Synch. When set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state (see section 4.2.4.5 of PCI Express Base Specification) and when in the Recovery state (see section 4.2.6.4.1 of PCI Express Base Specification). This mode prvides external devices (for example, logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.

For Multi-Function devices if any function has this bit set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_clk_power_man</ipxact:name>
            <ipxact:description>Enable Clock Power Management.
Applicable only for Upstream Ports and with form factors that support a Clock Request (CLKREQ#) mechanism, this bit operates as follows:
For a non-ARI Multi-Function Device, power-management-configuration software must only Set this bit if all Functions of the Multi-Function Device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.

For ARI Devices, Clock Power Management is enabled solely by the setting in Function 0. The settings in the other Functions always return whatever value software prgrammed for each, but otherwise are ignored by the component.
The CLKREQ# signal may also be contrlled thrugh the L1 PM Substates mechanism. Such contrl is not affected by the setting of this bit.

For Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register), the contrller hardwires this bit to 0b.

The write value is gated with the PCIE_CAP_CLOCK_POWER_MAN field in LINK_CAPABILITIES_REG.

Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? rwS : rS 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? rwS : rS 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_int_en</ipxact:name>
            <ipxact:description>Link Bandwidth Management Interrupt Enable. When set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r  
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_int_en</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Management Interrupt Enable.
When set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? rw : r</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_nego_link_width</ipxact:name>
            <ipxact:description>Negotiated Link Width. This field indicates the negotiated width of the given PCI Express Link.
All encodings other than the defined encodings are reserved.
The value in this field is undefined when the Link is not up.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_training</ipxact:name>
            <ipxact:description>Link Training. This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches, and the contrller hardwires it to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_slot_clk_config</ipxact:name>
            <ipxact:description>Slot Clock Configuration. This bit indicates that the component uses the same physical reference clock that the platform prvides on the connector. If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.

For a Multi-Function Device, each Function must report the same value for this bit.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active</ipxact:name>
            <ipxact:description>Data Link Layer Link Active. This bit indicates the status of the Data Link Contrl and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.

This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, the contrller hardwires it to 0b.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_status</ipxact:name>
            <ipxact:description>Link Bandwidth Management Status. This bit is set by hardware to indicate that either of the following has occurred without the Port transitioning thrugh DL_Down status:

 A Link retraining has completed following a write of 1b to the Retrain Link bit.

Note: This bit is set following any write of 1b to the Retrain Link bit, including when the Link is in the prcess of retraining for some other reason.

 Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either thrugh an LTSSM timeout or a higher level prcess.

 This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.
The default value of this bit is 0b.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_status</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Status. This bit is set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning thrugh DL_Down status, for reasons other than to attempt to correct unreliable Link operation.

This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_device_capabilities2_reg</ipxact:name>
          <ipxact:description>This register identifies PCI Express device specific capabilities; in addition to the Device Capabilities Register.</ipxact:description>
          <ipxact:addressOffset>0x1094</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_range</ipxact:name>
            <ipxact:description>Completion Timeout Ranges Supported. This field indicates device Function support for the optional Completion Timeout prgrammability mechanism. This mechanism allows system software to modify the Completion Timeout value.
This field is applicable only to rot Ports, Endpoints that issue Requests on their own behalf, and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express. For all other Functions this field is Reserved and must be hardwired to 0000b.
Four time value ranges are defined:
 - Range A: 50 us to 10 ms
 - Range B: 10 ms to 250 ms
 - Range C: 250 ms to 4 s
 - Range D: 4 s to 64 s
Bits are set according to the list below to show timeout value ranges supported.
All encodings other than the defined encodings are reserved.
It is strngly recommended that the Completion Timeout mechanism not expire in less than 10 ms.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xf</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_disable_support</ipxact:name>
            <ipxact:description>Completion Timeout Disable Supported. A value of 1b indicates support for the Completion Timeout Disable mechanism.
The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.

This mechanism is optional for rot Ports.

For all other Functions this field is Reserved and the contrller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ari_forward_support</ipxact:name>
            <ipxact:description>ARI Forwarding Supported. Applicable only to Switch Downstream Ports and rot Ports; must be 0b for other Function types. This bit must be set to 1b if a Switch Downstream Port or rot Port supports this optional capability. For more information, see section 6.13 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_atomic_routing_supp</ipxact:name>
            <ipxact:description>AtomicOp ruting Supported. Applicable only to Switch Upstream Ports, Switch Downstream Ports, and rot Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_32_atomic_cpl_supp</ipxact:name>
            <ipxact:description>32-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all rot Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_64_atomic_cpl_supp</ipxact:name>
            <ipxact:description>64-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all rot Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_128_cas_cpl_supp</ipxact:name>
            <ipxact:description>128-bit CAS Completer Supported. Applicable to Functions with Memory Space BARs as well as all rot Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_no_ro_en_pr2pr_par</ipxact:name>
            <ipxact:description>No r-enabled PR-PR Passing. If this bit is set, the ruting element never carries out the passing permitted by Table 2-39 of PCI Express Base Specification entry A2b that is associated with the Relaxed Ordering Attribute field being Set.
This bit applies only for Switches and RCs that support peer-to-peer traffic between rot Ports. This bit applies only to Posted Requests being forwarded thrugh the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
For all other functions, this bit must be 0b.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ltr_supp</ipxact:name>
            <ipxact:description>LTR Mechanism Supported. A value of 1b indicates support for the optional Latency Tolerance Reporting (LTR) mechanism.
rot Ports, Switches and Endpoints are permitted to implement this capability.
For a Multi-Function Device associated with an Upstream Port, each Function must report the same value for this bit.
For Bridges and other Functions that do not implement this capability, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_0</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 0.
Value of this bit along with TPH Completer Supported Bit 1 indicates Completer support for TPH or Extended TPH. Applicable only to rot Ports and Endpoints. For all other Functions, this field is Reserved.
For more information, see section 6.17 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_1</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 1.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_ln_sys_cls</ipxact:name>
            <ipxact:description>LN System CLS.
Applicable only to rot Ports and RCRBs; must be 00b for all other Function types. This field indicates if the rot Port or RCRB supports LN prtocol as an LN Completer, and if so, what cacheline size is in effect.
All encodings other than the defined encodings are reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_comp_support</ipxact:name>
            <ipxact:description>10-Bit Tag Completer Supported. If this bit is set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_req_support</ipxact:name>
            <ipxact:description>10-Bit Tag Requester Supported. If this bit is set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.

This bit must not be set if the 10-Bit Tag Completer Supported bit is clear.

Note: 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Contrl 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_extnd_fmt_support</ipxact:name>
            <ipxact:description>Extended Fmt Field Supported. If set, the Function supports the 3-bit definition of the Fmt field. If clear, the Function supports a 2-bit definition of the Fmt field. For more information, see section 2.2 of PCI Express Base Specification.

Must be set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.

It is strngly recommended that Functions support the 3-bit definition of the Fmt field.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_end2end_tlp_prfx_support</ipxact:name>
            <ipxact:description>End-End TLP Prefix Supported. Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
All Ports of a Switch must have the same value for this bit.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_max_end2end_tlp_prfxs</ipxact:name>
            <ipxact:description>Max End-End TLP Prefixes.
Indicates the maximum number of End-End TLP Prefixes supported by this Function. For more information,  see Section 2.2.10.2 of PCI Express Base Specification.
If End-End TLP Prefix Supported is clear, this field is RsvdP.

Different rot Ports that have the End-End TLP Prefix Supported bit set are permitted to report different values for this field.

For Switches where End-End TLP Prefix Supported is set, this field must be 00b indicating support for up to four End-End TLP Prefixes.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pcie_cap_link_control2_link_status2_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters; in addition to the Link Control and Link Status Register.</ipxact:description>
          <ipxact:addressOffset>0x10a0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_target_link_speed</ipxact:name>
            <ipxact:description>Target Link Speed. For Downstream Ports, this field sets an upper limit on Link operational speed by restricting the values advertised by the Upstream component in its training sequences.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
All encodings other than the defined encodings are reserved.

If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.

If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.

The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform/form factor requires a different default value.

For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.

For Upstream Ports, if the Enter Compliance bit is Clear, this field is permitted to have no effect.

For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this field to 0000b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_compliance</ipxact:name>
            <ipxact:description>Enter Compliance. Software is permitted to force a Link to enter Compliance mode (at the speed indicated in the Target Link Speed field and the de-emphasis/preset level indicated by the Compliance Preset/De-emphasis field) by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.

Default value of this bit following Fundamental Reset is 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_hw_auto_speed_disable</ipxact:name>
            <ipxact:description>Hardware Autonomous Speed Disable. When set, this bit disables hardware frm changing the Link speed for device-specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_sel_deemphasis</ipxact:name>
            <ipxact:description>Selectable De-emphasis. When the Link is operating at 5.0 GT/s speed, this bit is used to contrl the transmit de-emphasis of the link in specific situations. For more information, see section 4.2.6 of PCI Express Base Specification.
When the Link is not operating at 5.0 GT/s speed, the setting of this bit has no effect. Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tx_margin</ipxact:name>
            <ipxact:description>Transmit Margin, This field contrls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration substate (see Chapter 4 of PCI Express Base Specification for details of how the Transmitter voltage level is determined in various states).
 - 001b-111b: As defined in Section 8.3.4 not all encodings are required to be implemented.
For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

For components that support only the 2.5 GT/s speed, the contrller hardwires this bit to 000b.

This field is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_modified_compliance</ipxact:name>
            <ipxact:description>Enter Modified Compliance. When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance substate.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_sos</ipxact:name>
            <ipxact:description>Compliance SOS. When set to 1b, the LTSSM is required to send SKP Ordered Sets between sequences when sending the Compliance Pattern or Modified Compliance Pattern.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is applicable when the Link is operating at 2.5 GT/s or 5.0 GT/s data rates only.

For components that support only the 2.5 GT/s speed, the contrller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_preset</ipxact:name>
            <ipxact:description>Compliance Preset/De-emphasis.
 - For 8.0 GT/s and higher Data Rate: This field sets the Transmitter Preset in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b. The encodings are defined in section 4.2.3.2 of PCI Express Base Specification . Results are undefined if a reserved preset encoding is used when entering Polling.Compliance in this way.
 - For 5.0 GT/s Data Rate: This field sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
 - When the Link is operating at 2.5 GT/s, the setting of this field has no effect. Components that support only 2.5 GT/s speed are permitted to hardwire this field to 0000b.
 - For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type rwS, and only Function 0 contrls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.
 - This field is intended for debug and compliance testing purposes. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.
Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_curr_deemphasis</ipxact:name>
            <ipxact:description>Current De-emphasis Level. When the Link is operating at 5.0 GT/s speed, this bit reflects the level of de-emphasis.
The value in this bit is undefined when the Link is not operating at 5.0 GT/s speed.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.
For components that support speeds greater than 2.5 GT/s, Multi-Function Devices associated with an Upstream Port must report the same value in this field for all Functions of the Port.

 In C-PCIe mode, its contents are derived by sampling the PIPE.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Complete. When set to 1b, this bit indicates that the Transmitter Equalization prcedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p1</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 1 Successful. When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization prcedure has successfully completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p2</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 2 Successful. When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization prcedure has successfully completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p3</ipxact:name>
            <ipxact:description>EEqualization 8.0 GT/s Phase 3 Successful. When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization prcedure has successfully completed. Details of the Transmitter Equalization prcess and when this bit needs to be set to 1b is prvided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_eq_req</ipxact:name>
            <ipxact:description>Link Equalization Request 8.0 GT/s. This bit is set by hardware to request the 8.0 GT/s Link equalization prcess to be performed on the Link. For more information, see sections 4.2.3 and 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the contrller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retimer_pre_det</ipxact:name>
            <ipxact:description>Retimer Presence Detected. When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1 of PCI Express Base Specification.

This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

For Ports that have the Retimer Presence Detect Supported bit set to 0b, the contrller hardwires this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_two_retimers_pre_det</ipxact:name>
            <ipxact:description>Tw Retimers Presence Detected. When set to 1b, this bit indicates that tw Retimers were present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1  of PCI Express Base Specification.

This bit is required for Ports that have the Tw Retimers Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

Ports that have the Tw Retimers Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_crosslink_resolution</ipxact:name>
            <ipxact:description>Crsslink Resolution. This field indicates the state of the Crsslink negotiation. It must be implemented if Crsslink Supported is Set and the Port supports 16.0 GT/s or higher data rate. It is permitted to be implemented in all other Ports. If Crsslink Supported is clear, the contrller hardwires this field to 01b or 10b.
Once a value of 01b or 10b is returned in this field, that value must continue to be returned while the Link is Up.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_msix_cap_pci_msix_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This Register holds MSI-X Capability ID, Next Capability pointer. It also controls the MSI-X behaviour.</ipxact:description>
          <ipxact:addressOffset>0x10b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_cap_next_offset</ipxact:name>
            <ipxact:description>MSI-X Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_size</ipxact:name>
            <ipxact:description>MSI-X Table Size.
System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Size (PCI_MSIX_TABLE_SIZE field in SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_SIZE field in the PF PCI_MSIX_CAP_ID_NEXT_CTRL_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_function_mask</ipxact:name>
            <ipxact:description>Function Mask.
If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
If Clear, each vector's Mask bit determines whether the vector is masked or not.
Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_enable</ipxact:name>
            <ipxact:description>MSI-X Enable.
If Set and the MSI Enable bit in the MSI Message Contrl Register for MSI is Clear, the Function is permitted to use MSI-X to request service and is prhibited frm using INTx interrupts (if implemented).
System configuration software Sets this bit to enable MSI-X. A device driver is prhibited frm writing this bit to mask a Function's service request.
If Clear, the Function is prhibited frm using MSI-X to request service.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_msix_cap_msix_table_offset_reg</ipxact:name>
          <ipxact:description>This register provides Table BIR and MSI-x Table offset select.</ipxact:description>
          <ipxact:addressOffset>0x10b4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_bir</ipxact:name>
            <ipxact:description>MSI-X Table BAR Indicator Register Field.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI , is used to map the Function's MSI-X Table into Memory Space.
All encodings other than the defined encodings are reserved.
For a 64-bit Base Address Register , the Table BIR indicates the lower DwRD. For Functions with Type 1 Configuration Space headers, BIR values 2 thrugh 5 are also Reserved.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table BAR Indicator Register (PCI_MSIX_BIR field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_BIR field in the PF MSIX_TABLE_OFFSET_REG register.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_offset</ipxact:name>
            <ipxact:description>MSI-X Table Offset.
Used as an offset frm the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X Table.
The lower 3 Table BIR bits are masked off (set to zer) by software to form a 32-bit QwRD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Offset (PCI_MSIX_TABLE_OFFSET field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_OFFSET field in the PF MSIX_TABLE_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_msix_cap_msix_pba_offset_reg</ipxact:name>
          <ipxact:description>This register provides PBA Offset and PBA BIR value.</ipxact:description>
          <ipxact:addressOffset>0x10b8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_bir</ipxact:name>
            <ipxact:description>MSI-X PBA BIR.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
The PBA BIR value definitions are identical to those for the Table BIR .

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA BIR (PCI_MSIX_PBA_BIR field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_BIR field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_offset</ipxact:name>
            <ipxact:description>MSI-X PBA Offset.
Used as an offset frm the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X PBA.
The lower 3 PBA BIR bits are masked off (set to zer) by software to form a 32-bit QwRD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA Offset (PCI_MSIX_PBA_OFFSET field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_OFFSET field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000002</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_aer_cap_aer_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>Advanced Error Reporting Extended Capability Header provides information about Capability ID, Version, and next offset.</ipxact:description>
          <ipxact:addressOffset>0x1100</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field must be 2h if the End-End TLP Prefix Supported bit is set and must be 1h or 2h otherwise.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and
thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sn_cap_sn_base</ipxact:name>
          <ipxact:description>The Device Serial Number Extended Capability is an optional Extended Capability that may be implemented by any PCI Express device Function.
This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x1164</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sn_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sn_cap_ser_num_reg_dw_1</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x1168</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_1_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 1).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sn_cap_ser_num_reg_dw_2</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x116c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_2_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 2).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_ari_cap_ari_base</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x1174</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_ari_cap_cap_reg</ipxact:name>
          <ipxact:description>This Register provides information regarding supported ARI Capability, and controls that capability.</ipxact:description>
          <ipxact:addressOffset>0x1178</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_next_fun_num</ipxact:name>
            <ipxact:description>Next Function Number.
This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions.
Function 0 starts this linked list of Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1 ) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x02</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_base_reg</ipxact:name>
          <ipxact:description>SR-IOV Extended Capability Header provides information about Capability ID, Version, and Next Offset.</ipxact:description>
          <ipxact:addressOffset>0x11e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This bit depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_total_vfs_initial_vfs_reg</ipxact:name>
          <ipxact:description>This Register provides value of TotalVFs and InitialVFs.</ipxact:description>
          <ipxact:addressOffset>0x11ec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_initial_vfs</ipxact:name>
            <ipxact:description>InitialVFs.
InitialVFs indicates to SR-PCIM the number of VFs that are initially associated with the PF. The minimum value of InitialVFs is 0.
For Devices operating in Single-rot mode, this field is HwInit and must contain the same value as TotalVFs. And for Devices operating in Multi-rot mode, the value of this field may be changed by MRPCIM when VF Enable is Clear.
If VF Migration Enable is Set and VF Enable is Cleared and then Set, the value of InitialVFs may change. This is necessary since some VFs may have been migrated to other PFs and may no longer be available to this PF.
There are tw InitialVFs registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit (SRIOV_ARI_CAPABLE_HIER) of the PF0 SR-IOV Contrl Register (STATUS_CONTrL_REG) determines which one is used by the contrller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x003f</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_vf_offset_position</ipxact:name>
          <ipxact:description>This Register contains value of VF Stride and First VFs Offset.</ipxact:description>
          <ipxact:addressOffset>0x11f4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_offset</ipxact:name>
            <ipxact:description>First VF Offset.
First VF Offset is a constant and defines the ruting ID offset of the first VF that is associated with the PF that contains this Capability structure.
The first VF's 16-bit ruting ID is calculated by adding the contents of this field to the ruting ID of the PF containing this field ignoring any carry, using unsigned, 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
First VF Offset is unused if NumVFs is 0. If NumVFs is greater than 0, First VF Offset must not be zer.
There are tw First VF Offset registers at this address location; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Contrl Register determines which one is used by the contrller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_stride</ipxact:name>
            <ipxact:description>VF Stride.
VF Stride defines the ruting ID offset frm one VF to the next one for all VFs associated with the PF that contains this Capability structure.
The next VF's 16-bit ruting ID is calculated by adding the contents of this field to the ruting ID of the current VF, ignoring any carry, using unsigned 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
VF Stride is unused if NumVFs is 0 or 1. If NumVFs is greater than 1, VF Stride must not be zer.
There are tw VF Stride registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Contrl Register. determines which one is used by the contrller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_vf_device_id_reg</ipxact:name>
          <ipxact:description>VF Device ID may be different from the PF Device ID. A VF Device ID must be managed by the vendor. The vendor must ensure that the chosen VF Device ID does not result in the use of an incompatible device driver.</ipxact:description>
          <ipxact:addressOffset>0x11f8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_device_id</ipxact:name>
            <ipxact:description>VF Device ID.
This field contains the Device ID that should be presented for every VF to the SI.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sup_page_sizes_reg</ipxact:name>
          <ipxact:description>This Register provides the page sizes supported by the PF.
This PF supports a page size of 2^(n+12), if bit n is Set. For example, if bit 0 is Set, the PF supports 4-KB page sizes.</ipxact:description>
          <ipxact:addressOffset>0x11fc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_sup_page_size</ipxact:name>
            <ipxact:description>Page Sizes Supported by VF.
This field indicates the page sizes supported by the PF. This PF supports a page size of 2^(n +12) if bit n is Set.
For example, if bit 0 is Set, the PF supports 4-KB page sizes. PFs are required to support 4-KB, 8-KB, 64-KB, 256-KB, 1-MB, and 4-MB page sizes. All other page sizes are optional.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000553</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_bar0_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR0 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x1204</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_type</ipxact:name>
            <ipxact:description>VF BAR0 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_prefetch</ipxact:name>
            <ipxact:description>VF BAR0 Prefetchable.
This field prvides whether BAR0 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_start</ipxact:name>
            <ipxact:description>VF BAR0 Base Address.
This field prvides starting address of BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_bar1_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR1 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x1208</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar1</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_type</ipxact:name>
            <ipxact:description>VF BAR1 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_prefetch</ipxact:name>
            <ipxact:description>VF BAR1 Prefetchable.
This field prvides whether BAR1 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_start</ipxact:name>
            <ipxact:description>VF BAR1 Base Address.
This field prvides starting address of BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_bar2_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR2 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x120c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_type</ipxact:name>
            <ipxact:description>VF BAR2 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_prefetch</ipxact:name>
            <ipxact:description>VF BAR2 Prefetchable.
This field prvides whether BAR2 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_start</ipxact:name>
            <ipxact:description>VF BAR2 Base Address.
This field prvides starting address of BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_bar3_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR3 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x1210</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_type</ipxact:name>
            <ipxact:description>VF BAR3 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_prefetch</ipxact:name>
            <ipxact:description>VF BAR3 Prefetchable.
This field prvides whether BAR3 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_start</ipxact:name>
            <ipxact:description>VF BAR3 Base Address.
This field prvides starting address of BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_bar4_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR4 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x1214</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_type</ipxact:name>
            <ipxact:description>VF BAR4 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_prefetch</ipxact:name>
            <ipxact:description>VF BAR4 Prefetchable.
This field prvides whether BAR4 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_start</ipxact:name>
            <ipxact:description>VF BAR4 Base Address.
This field prvides starting address of BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_sriov_cap_sriov_bar5_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR5 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x1218</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar5</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_type</ipxact:name>
            <ipxact:description>VF BAR5 32 or 64 bit.
This field prvides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_prefetch</ipxact:name>
            <ipxact:description>VF BAR5 Prefetchable.
This field prvides whether BAR5 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_start</ipxact:name>
            <ipxact:description>VF BAR5 Base Address.
This field prvides starting address of BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_tph_cap_tph_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability Revision, and Next offset of structure Extended Capability Register.</ipxact:description>
          <ipxact:addressOffset>0x1220</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_cap_ver</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_tph_cap_tph_req_cap_reg_reg</ipxact:name>
          <ipxact:description>This register gives information about No ST mode support, Intrrupt Vector mode, Device specific mode, Extended TPH requester support, ST table location and size.

SRIOV Note: All VFs in a single PF have the same values for VF_TPH_REQ_CAP_REG_REG. To write this common register, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PF TPH_REQ_CAP_REG_REG register.</ipxact:description>
          <ipxact:addressOffset>0x1224</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_no_st_mode</ipxact:name>
            <ipxact:description>No ST Mode Supported.
set indicates that the Function supports the No ST Mode of operation.
This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_int_vec</ipxact:name>
            <ipxact:description>Interrupt Vector Mode Supported.
If set indicates that the Function supports the Interrupt Vector Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_device_spec</ipxact:name>
            <ipxact:description>Device Specific Mode Supported.
If set indicates that the Function supports the Device Specific Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_extended_tph</ipxact:name>
            <ipxact:description>Extended TPH Requester Supported.
If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix .


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_0</ipxact:name>
            <ipxact:description>ST Table Location Bit 0.
If this field is set, ST Table is Located in the TPH Requester Extended Capability structure.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_1</ipxact:name>
            <ipxact:description>ST Table Location Bit 1.
If this field is set, ST Table is Located in the MSI-X Table.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_11</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_size</ipxact:name>
            <ipxact:description>ST Table Size.
This field indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1.
For example, a returned value of 000 0000 0011b indicates a table size of four entries.
There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Extended Capability structure. When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_ats_cap_ats_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides value of Capability ID, Capability version, and next offset of Extended capability structure.</ipxact:description>
          <ipxact:addressOffset>0x12ac</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_ats_cap_ats_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register provides value of Invalidate queue depth, Page alignment request, and Global Invalidate support. It also controls Cache translation and Smallest Translate Unit.</ipxact:description>
          <ipxact:addressOffset>0x12b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>invalidate_q_depth</ipxact:name>
            <ipxact:description>Invalidate Queue Depth.
The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>page_aligned_req</ipxact:name>
            <ipxact:description>Page Aligned Request.
If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended.
This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>global_inval_spprtd</ipxact:name>
            <ipxact:description>Global Invalidate Supported.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_acs_cap_acs_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides capability ID, capability version, and next offset value.</ipxact:description>
          <ipxact:addressOffset>0x12bc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field indicates the version of present capability structure. It is a PCI-SIG defined version number.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h, if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_acs_cap_acs_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register is Access Control Services Capability and Control Register.</ipxact:description>
          <ipxact:addressOffset>0x12c0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>acs_src_valid</ipxact:name>
            <ipxact:description>ACS Source Validation Capable.
Required for rot Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Source Validation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_at_block</ipxact:name>
            <ipxact:description>ACS Translation Blocking Capable.
Required for rot Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Translation Blocking.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_req_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Request Redirect Capable.
Required for rot Ports that support peer-to-peer traffic with other rot Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_cpl_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Completion Redirect Capable.
Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_usp_forwarding</ipxact:name>
            <ipxact:description>ACS Upstream forwarding Capable.
Required for rot Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_egress_control</ipxact:name>
            <ipxact:description>ACS Egress Contrl.
Optional for rot Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Contrl.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_direct_translated_p2p</ipxact:name>
            <ipxact:description>ACS Direct Translated Peer-to-Peer Capable.
Required for rot Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other rot Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; the contrller must be hardwired to 0b otherwise.
If 1b, indicates that the component implements ACS Direct Translated P2P.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_egress_ctrl_size</ipxact:name>
            <ipxact:description>ACS Egress contrl vector size.
Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Contrl Vector; the encoding 00h indicates 256 bits.
If the ACS_P2P_EGRESS_CONTrL bit is 0b, the value of the size field is undefined, and the Egress Contrl Vector register is not required to be present.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x08</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_prs_ext_cap_prs_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability version, and Next Offset value of Page Request Service Capability Structure.</ipxact:description>
          <ipxact:addressOffset>0x12c8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_cap_version</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>prs_next_offset</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Next Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_prs_ext_cap_prs_req_capacity_reg</ipxact:name>
          <ipxact:description>This register contains the number of outstanding page request messages the associated Page Request Interface physically supports.</ipxact:description>
          <ipxact:addressOffset>0x12d0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_outstanding_capacity</ipxact:name>
            <ipxact:description>Page Request Services Outstanding Capacity value.
This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000001</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pasid_cap_pasid_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability Version, and Next offset of capability structure.</ipxact:description>
          <ipxact:addressOffset>0x12e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_pasid_cap_pasid_cap_cntrl_reg</ipxact:name>
          <ipxact:description>This register provides value of capability like Execute Permission support, Privileged Mode support, and width of PASID. Also this register controls PASID Enable, Execute Permission Enable, as well as Privileged mode Enable.</ipxact:description>
          <ipxact:addressOffset>0x12e4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>execute_permission_supported</ipxact:name>
            <ipxact:description>Execute Permission Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>privileged_mode_supported</ipxact:name>
            <ipxact:description>Privileged Mode Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>max_pasid_width</ipxact:name>
            <ipxact:description>Max PASID Width.
Indicates the width of the PASID field supported by the Endpoint. The value n indicates support for PASID values 0 thrugh (2^n) - 1 (inclusive). This field must be between '0' and '20' (inclusive).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_13</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_ras_des_cap_ras_des_cap_header_reg</ipxact:name>
          <ipxact:description>The Vendor-Specific Extended Capability (VSEC Capability) is an optional Extended Capability that is permitted to be implemented by any PCI Express Function or RCRB.
This Register contains Capability Id, Capability Version and Next Offset value for Vendor-Specific Extended Capability.</ipxact:description>
          <ipxact:addressOffset>0x12e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
Value of this field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_ras_des_cap_event_counter_control_reg</ipxact:name>
          <ipxact:description>This is a viewport control register.
- Setting the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register determine the Event Counter data returned by the EVENT_COUNTER_DATA_REG viewport register.
- Setting the EVENT_COUNTER_ENABLE field in this register enables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Setting the EVENT_COUNTER_CLEAR field in this register clears the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Reading the EVENT_COUNTER_STATUS field in this register returns the Enable status of the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.</ipxact:description>
          <ipxact:addressOffset>0x12f0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>event_counter_enable</ipxact:name>
            <ipxact:description>Event Counter Enable.
Enables/disables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
By default, all event counters are disabled.
You can enable/disable a specific Event Counter by writing the 'per event off' or 'per event on' codes.
You can enable/disable all event counters by writing the 'all on' or 'all off' codes.
The read value is always '0'.
For other values no change.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>event_counter_event_select</ipxact:name>
            <ipxact:description>Event Counter Data Select.
This field in conjunction with the EVENT_COUNTER_LANE_SELECT field indexes the Event Counter data returned by the EVENT_COUNTER_DATA_REG register.
 - 27-24: Grup number(4-bit: 0..0x7)
 - 23-16: Event number(8-bit: 0..0x13) within the Grup
 - ..
For detailed definitions of Grup number and Event number, see the RAS DES chapter in the Databook.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf1_vsecras_cap_rasdp_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>This Register provides capability ID, Capability version, and Next capability offset for PCIe Extended capability stucture.</ipxact:description>
          <ipxact:addressOffset>0x13e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
A version of the specification that changes the Extended Capability in a way that is not otherwise identifiable (e.g., thrugh a new Capability field) is permitted to increment this field.
All such changes to the Capability structure must be software-compatible.
Software must check for Capability Version numbers that are greater than or equal to the highest number defined when the software is written, as Functions reporting any such Capability Version numbers will contain a Capability structure that is compatible with that piece of software.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_r_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_device_id_vendor_id_reg</ipxact:name>
          <ipxact:description>This register holds the device ID, next offset pointer for RCRB mode and vendor ID.</ipxact:description>
          <ipxact:addressOffset>0x2000</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_type0_vendor_id</ipxact:name>
            <ipxact:description>Vendor ID.
The Vendor ID register identifies the manufacturer of the Function. Valid vendor identifiers are allocated by the PCI-SIG to ensure uniqueness. It is not permitted to populate this register with a value of FFFFh, which is an invalid value for Vendor ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x8086</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_type0_device_id</ipxact:name>
            <ipxact:description>- DEVICE_ID [31:16]
 - The Device ID register identifies the particular Function for PCIe Type0 and Type1 configuration header. This identifier is allocated by the vendor.
Databook.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_class_code_revision_id</ipxact:name>
          <ipxact:description>This register specifies the class code and revision ID of a function.</ipxact:description>
          <ipxact:addressOffset>0x2008</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>revision_id</ipxact:name>
            <ipxact:description>Revision ID.
The value in this register specifies a Function specific revision identifier. The value is chosen by the vendor. Zero is an acceptable value. The Revision ID should be viewed as a vendor defined extension to the Device ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>program_interface</ipxact:name>
            <ipxact:description>Programming Interface.
This field identifies a specific register-level programming interface (if any) so that device independent software can interact with the Function.
Encodings for interface are provided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subclass_code</ipxact:name>
            <ipxact:description>Sub-Class Code.
Specifies a base class sub-class, which identifies more specifically the operation of the Function.
Encodings for sub-class are provided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>base_class_code</ipxact:name>
            <ipxact:description>Base Class Code.
A code that broadly classifies the type of operation the Function performs.
Encodings for base class, are provided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bist_header_type_latency_cache_line_size_reg</ipxact:name>
          <ipxact:description>This register provides the status and controls BIST. It also holds information regarding the header layout, latency timer, and cache line size.</ipxact:description>
          <ipxact:addressOffset>0x200c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_type</ipxact:name>
            <ipxact:description>Header Layout.
This field identifies the layout of the second part of the predefined header.
The controller uses 000 0000b encoding.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>multi_func</ipxact:name>
            <ipxact:description>Multi-Function Device.
Except where stated otherwise, it is recommended that this bit be set if there are multiple Functions, and clear if there is only one Function.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bar0_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x2010</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar0_mem_io</ipxact:name>
            <ipxact:description>- BAR0 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_type</ipxact:name>
            <ipxact:description>-  BAR0 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_prefetch</ipxact:name>
            <ipxact:description>- BAR0 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_start</ipxact:name>
            <ipxact:description>- BAR0_START. BAR0 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bar1_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x2014</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar1_mem_io</ipxact:name>
            <ipxact:description>- BAR1 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_type</ipxact:name>
            <ipxact:description>- BAR1 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_prefetch</ipxact:name>
            <ipxact:description>- BAR1 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_start</ipxact:name>
            <ipxact:description>- BAR1 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bar2_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x2018</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar2_mem_io</ipxact:name>
            <ipxact:description>BAR2 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_type</ipxact:name>
            <ipxact:description>BAR2 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_prefetch</ipxact:name>
            <ipxact:description>BAR2 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_start</ipxact:name>
            <ipxact:description>BAR2 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bar3_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x201c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar3_mem_io</ipxact:name>
            <ipxact:description>BAR3 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_type</ipxact:name>
            <ipxact:description>BAR3 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_prefetch</ipxact:name>
            <ipxact:description>BAR3 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_start</ipxact:name>
            <ipxact:description>BAR3 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bar4_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x2020</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar4_mem_io</ipxact:name>
            <ipxact:description>BAR4 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_type</ipxact:name>
            <ipxact:description>BAR4 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_prefetch</ipxact:name>
            <ipxact:description>BAR4 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_start</ipxact:name>
            <ipxact:description>BAR4 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_bar5_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x2024</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar5_mem_io</ipxact:name>
            <ipxact:description>BAR5 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_type</ipxact:name>
            <ipxact:description>BAR5 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_prefetch</ipxact:name>
            <ipxact:description>BAR5 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_start</ipxact:name>
            <ipxact:description>BAR5 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_cardbus_cis_ptr_reg</ipxact:name>
          <ipxact:description>This register holds the CardBus CIS pointer.</ipxact:description>
          <ipxact:addressOffset>0x2028</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cardbus_cis_pointer</ipxact:name>
            <ipxact:description>CardBus CIS Pointer.
Its functionality does not apply to PCI Express. It must be hardwired to 0000 0000h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_subsystem_id_subsystem_vendor_id_reg</ipxact:name>
          <ipxact:description>These registers are used to uniquely identify the add-in card or subsystem where the PCI Express component resides. They provide a mechanism for vendors to distinguish their products from one another even though the assemblies may have the same PCI Express component on them (and, therefore, the same Vendor ID and Device ID).</ipxact:description>
          <ipxact:addressOffset>0x202c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>subsys_vendor_id</ipxact:name>
            <ipxact:description>Subsystem Vendor ID.
Subsystem Vendor IDs can be obtained from the PCI SIG and are used to identify the vendor of the add-in card or subsystem. Values for the Subsystem ID are vendor-specific.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subsys_dev_id</ipxact:name>
            <ipxact:description>Subsystem ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_exp_rom_base_addr_reg</ipxact:name>
          <ipxact:description>This register handles the base address and size information for this expansion ROM.</ipxact:description>
          <ipxact:addressOffset>0x2030</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rom_bar_enable</ipxact:name>
            <ipxact:description>Expansion ROM Enable.
This bit controls whether or not the Function accepts accesses to its expansion ROM.
The Memory Space Enable bit in the Command register has precedence over the Expansion ROM Enable bit. A Function must claim accesses to its expansion ROM only if both the Memory Space Enable bit and the Expansion ROM Enable bit are set.


Note: The access attributes of this field are as follows:
 - Wire: if (EXP_ROM_BAR_MASK_REG.ROM_BAR_ENABLED == 1) then R/W else R 
 - Dbi: if (EXP_ROM_BAR_MASK_REG.ROM_BAR_ENABLED == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_pci_cap_ptr_reg</ipxact:name>
          <ipxact:description>This register is used to point to a linked list of capabilities implemented by a Function.</ipxact:description>
          <ipxact:addressOffset>0x2034</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_pointer</ipxact:name>
            <ipxact:description>Capabilities Pointer. This register points to a valid capability structure. Either this structure is the PCI Express Capability structure, or a subsequent list item points to the PCI Express Capability structure. The bottom two bits are reserved, the controller sets it to 00b. Software must mask these bits off before using this register as a pointer in Configuration Space to the first entry of a linked list of new capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_type0_hdr_max_latency_min_grant_interrupt_pin_interrupt_line_reg</ipxact:name>
          <ipxact:description>The Interrupt Line register communicates interrupt line routing information. The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses.</ipxact:description>
          <ipxact:addressOffset>0x203c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>int_pin</ipxact:name>
            <ipxact:description>Interrupt Pin.
The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses. All encodings other than the defined encodings are reserved.
PCI Express defines one legacy interrupt Message for a single Function device and up to four legacy interrupt Messages for a multi-Function device. For a single Function device, only INTA may be used.

Any Function on a multi-Function device can use any of the INTx Messages. If a device implements a single legacy interrupt Message, it must be INTA; if it implements two legacy interrupt Messages, they must be INTA and INTB; and so forth.
For a multi-Function device, all Functions may use the same INTx Message or each may have its own (up to a maximum of four Functions) or any combination thereof. A single Function can never generate an interrupt request on more than one INTx Message.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pm_cap_cap_id_nxt_ptr_reg</ipxact:name>
          <ipxact:description>This register provides information refarding the Power Management Capabilities.</ipxact:description>
          <ipxact:addressOffset>0x2040</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pm_next_pointer</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field provides an offset into the function's configuration space pointing to the location of next item in the capabilities list. If there are no additional items in the capabilities list, this field is set to 00h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pm_spec_ver</ipxact:name>
            <ipxact:description>Version.
This field provides the Power Management specification version. The controller hardwires this field to 011b for functions compliant to PCI Express Base Specification, Revision 4.0, Version 1.0&gt;.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_clk</ipxact:name>
            <ipxact:description>PME Clock.
Does not apply to PCI Express, the controller hardwires it to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsi</ipxact:name>
            <ipxact:description>Device Specific Initialization.
The DSI bit indicates whether special initialization of this function is required.

When set, indicates that the function requires a device specific initialization sequence following a transition to the D0uninitialized state.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>aux_curr</ipxact:name>
            <ipxact:description>Aux_Current.
This 3 bit field reports the Vaux auxiliary current requirements for the function.

If this function implements the Data Register, the controller hardwires this field to 000b.

If PME_Support is 0 xxxxb (PME assertion from D3cold is not supported), the controller hardwires this field to 0000b.

For functions where PME_Support is 1 xxxxb (PME assertion from D3cold is supported), and which do not implement the Data field, the encodings defined in Values: apply:


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d1_support</ipxact:name>
            <ipxact:description>D1_Support.
If this bit is set, this function supports the D1 Power Management state. Functions that do not support D1 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d2_support</ipxact:name>
            <ipxact:description>D2_Support.
If this bit is set, this function supports the D2 Power Management state. Functions that do not support D2 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_support</ipxact:name>
            <ipxact:description>PME_Support.
This 5-bit field indicates the power states in which the function may generate a PME and/or forward PME messages.
A value of 0b for any bit indicates that the function is not capable of asserting PME while in that power state.
 - bit(27) X XXX1b - PME can be generated from D0
 - bit(28) X XX1Xb - PME can be generated from D1
 - bit(29) X X1XXb - PME can be generated from D2
 - bit(30) X 1XXXb - PME can be generated from D3hot
 - bit(31) 1 XXXXb - PME can be generated from D3cold
Bit 31 (PME can be asserted from D3cold) represents a special case. Functions that set this bit require some sort of auxiliary power source. Implementation specific mechanisms are recommended to validate that the power source is available before setting this bit.

Each bit that corresponds to a supported D-state must be set for PCI-PCI Bridge structures representing Ports on Root Complexes/Switches to indicate that the Bridge will forward PME Messages. Bit 31 must only be set if the Port is still able to forward PME Messages when main power is not available.

The read value from this field is the write value &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where D1_SUPPORT and D2_SUPPORT are fields in this register.

The reset value PME_SUPPORT_n &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where PME_SUPPORT_n is a configuration parameter.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pm_cap_con_status_reg</ipxact:name>
          <ipxact:description>This register is used to manage the PCI function's power management state as well as to enable/monitor PMEs.</ipxact:description>
          <ipxact:addressOffset>0x2044</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>power_state</ipxact:name>
            <ipxact:description>PowerState.
This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state.
You can write to this register; however, the read-back value is the actual power state, not the write value. If you attempt to write an unsupported, optional state to this field, the write operation completes normally; however, the data is discarded and no state change occurs.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>no_soft_rst</ipxact:name>
            <ipxact:description>No_Soft_Reset.
This bit indicates the state of the function after writing the PowerState field to transition the function from D3hot to D0.
 - When set, this transition preserves internal function state. The function is in D0Active and no additional software intervention is required.
 - When clear, this transition results in undefined internal function state.
Regardless of this bit, functions that transition from D3hot to D0 by Fundamental Reset will return to D0Uninitialized with only PME context preserved if PME is supported and enabled.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_4</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_msi_cap_pci_msi_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This register holds MSI Capability Header information and controls the MSI behaviour.</ipxact:description>
          <ipxact:addressOffset>0x2050</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msi_cap_next_offset</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_enable</ipxact:name>
            <ipxact:description>MSI Enable.
 - If set and the MSI-X Enable bit in the MSI-X Message Control register is clear, the function is permitted to use MSI to request service and is prohibited from using INTx interrupts. System configuration software sets this bit to enable MSI. A device driver is prohibited from writing this bit to mask a function's service request. For more information on control of INTx interrupts, see section 7.5.1.1 of PCI Express Base Specification.
 - If clear, the function is prohibited from using MSI to request service.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_cap</ipxact:name>
            <ipxact:description>Multiple Message Capable.
System software reads this field to determine the number of requested vectors. The number of requested vectors must be aligned to a power of two (if a function requires three vectors, it requests four by initializing this field to 010b). All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_en</ipxact:name>
            <ipxact:description>Multiple Message Enable.
Software writes to this field to indicate the number of allocated vectors (equal to or less than the number of requested vectors). The number of allocated vectors is aligned to a power of two. If a function requests four vectors (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, two, or one vector by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a function will be allocated at least 1 vector. All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_64_bit_addr_cap</ipxact:name>
            <ipxact:description>64 bit address capable.
This bit must be set if the function is a PCI Express Endpoint.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_pvm_support</ipxact:name>
            <ipxact:description>Per-Vector Masking Capable.
 - If set, the function supports MSI Per-Vector Masking.
 - If clear, the function does not support MSI Per-Vector Masking.
This bit must be set if the function is a PF or VF within an SR-IOV Device.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_cap</ipxact:name>
            <ipxact:description>Extended Message Data Capable.
 - If set, the function is capable of providing Extended Message Data.
 - If clear, the function does not support providing Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_en</ipxact:name>
            <ipxact:description>Extended Message Data Enable.
 - If set, the function is enabled to provide Extended Message Data.
 - If clear, the function is not enabled to provide Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP ? RW : RO 
 - Dbi: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP  ? RW : RO</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_pcie_cap_id_pcie_next_cap_ptr_pcie_cap_reg</ipxact:name>
          <ipxact:description>This is the PCI Express Capabilities, ID, and Next Pointer Register.</ipxact:description>
          <ipxact:addressOffset>0x2070</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer. This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_slot_imp</ipxact:name>
            <ipxact:description>Slot Implemented. When set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled). This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_int_msg_num</ipxact:name>
            <ipxact:description>PCIE Interrupt Message Number.
Interrupt Message Number. This field indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.

For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.

For MSI-X, the value in this field indicates which MSI-X Table entry is used to generate the interrupt message. The entry must be one of the first 32 entries even if the Function implements more than 32 entries. For a given MSI-X implementation, the entry must remain constant.

If both MSI and MSI-X are implemented, they are permitted to use different vectors, though software is permitted to enable only one mechanism at a time. If MSI-X is enabled, the value in this field must indicate the vector for MSI-X. If MSI is enabled or neither is enabled, the value in this field must indicate the vector for MSI. If software enables both MSI and MSI-X at the same time, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvd</ipxact:name>
            <ipxact:description>Reserved.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_31</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_device_capabilities_reg</ipxact:name>
          <ipxact:description>The Device Capabilities register identifies PCI Express device function specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x2074</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_payload_size</ipxact:name>
            <ipxact:description>Max_Payload_Size Supported.
This field indicates the maximum payload size that the function can support for TLPs.
All encodings other than the defined encodings are reserved.
The functions of a Multi-Function Device are permitted to report different values for this field.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_support</ipxact:name>
            <ipxact:description>Phantom Functions Supported.
This field indicates the support for use of unclaimed function numbers to extend the number of outstanding transactions allowed by logically combining unclaimed function numbers (called Phantom Functions) with the Tag identifier (see Section 2.2.6.2 of PCI Express Base Specification for a description of Tag Extensions).

With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI Multi-Function Devices.

This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
Note: Phantom Function support for the function must be enabled by the Phantom Functions Enable field in the Device Control register before the Function is permitted to use the Function Number field in the Requester ID for Phantom Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_supp</ipxact:name>
            <ipxact:description>Extended Tag Field Supported.
This bit, in combination with the 10-Bit Tag Requester Supported bit in the Device Capabilities 2 register, indicates the maximum supported size of the Tag field as a Requester. This bit must be set if the 10-Bit Tag Requester Supported bit is set.
Note: 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Control register of the Requester Function before 8-bit Tags can be generated by the Requester. See Section 2.2.6.2 of PCI Express Base Specification for interactions with enabling the use of 10-Bit Tags.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l0s_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L0s Acceptable Latency. This field indicates the acceptable total latency that an Endpoint can withstand due to the transition from L0s state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.

Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L0s entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the controller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l1_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L1 Acceptable Latency. This field indicates the acceptable latency that an Endpoint can withstand due to the transition from L1 state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.
Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L1 entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the controller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W (Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_role_based_err_report</ipxact:name>
            <ipxact:description>Role-Based Error Reporting. When set, this bit indicates that the function implements the functionality originally defined in the Error Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1. This bit must be set by all functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_16</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_flr_cap</ipxact:name>
            <ipxact:description>Function Level Reset Capability. A value of 1b indicates the function supports the optional Function Level Reset mechanism described in section 6.6.2 of the PCI Express Base Specification.

This bit applies to Endpoints only. For all other function types the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_29</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_device_control_device_status</ipxact:name>
          <ipxact:description>This register controls PCI Express device specific parameters and provides information about PCI Express device (function) specific parameters.</ipxact:description>
          <ipxact:addressOffset>0x2078</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_en</ipxact:name>
            <ipxact:description>Extended Tag Field Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Control 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If the Extended Tag Field Enable bit is set, the function is permitted to use an 8-bit Tag field as a Requester
 - If the Extended Tag Field Enable bit is clear, the Function is restricted to a 5-bit Tag field
See section 2.2.6.2 of PCI Express Base Specification for required behavior when the 10-Bit Tag Requester Enable bit is set.

If software changes the value of the Extended Tag Field Enable bit while the function has outstanding Non-Posted Requests, the result is undefined.

For functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? RW : RO  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? RW : RO</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_en</ipxact:name>
            <ipxact:description>Phantom Functions Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Control 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If this bit is set, it enables a function to use unclaimed functions as Phantom functions to extend the number of outstanding transaction identifiers
 - If this bit is clear, the function is not allowed to use Phantom functions
For more information, see section 2.2.6.2 of PCI Express Base Specification.

Software should not change the value of this bit while the function has outstanding Non-Posted Requests; otherwise, the result is undefined.

For functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? RW : RO  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? RW : RO</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aux_power_pm_en</ipxact:name>
            <ipxact:description>Aux Power PM Enable.
This bit is derived by sampling the sys_aux_pwr_det input.
When set this bit, enables a function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements. Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Control/Status register (PMCSR). For Multi-Function devices, a component is allowed to draw Aux power if at least one of the functions has this bit set.
Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such functions, this bit is not modified by Conventional Reset.

For functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_no_snoop</ipxact:name>
            <ipxact:description>Enable No Snoop.
If this bit is set, the function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency (see section 2.2.6.5 in PCI Express Base Specification).
Note: Setting this bit to 1b should not cause a function to set the No Snoop attribute on all transactions that it initiates. Even when this bit is set, a function is only permitted to set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.

The controller hardwires this bit 0b if a function would never set the No Snoop attribute in transactions it initiates.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_read_req_size</ipxact:name>
            <ipxact:description>Max_Read_Request_Size.
This field sets the maximum Read Request size for the function as a Requester. The function must not generate Read Requests with a size exceeding the set value.
For functions that do not generate Read Requests larger than 128 bytes and functions that do not generate Read Requests on their own behalf, the controller implements this field as Read Only (RO) with a value of 000b.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_initiate_flr</ipxact:name>
            <ipxact:description>Initiate Function Level Reset (applicable to Endpoints with Function Level Reset Capability set to 1b).
A write of 1b initiates Function Level Reset to the Function. The value read by software from this bit is always 0b.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_link_capabilities_reg</ipxact:name>
          <ipxact:description>The Link Capabilities register identifies PCI Express Link specific capabilities and CXL-RCRB link specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x207c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_speed</ipxact:name>
            <ipxact:description>Max Link Speed.
This field indicates the maximum Link speed of the associated Port.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed. All encodings other than the defined encodings are reserved.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_width</ipxact:name>
            <ipxact:description>Maximum Link Width.
This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes routed to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
All encodings other than the defined encodings are reserved.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x04</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_support</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Support.
This field indicates the level of ASPM supported on the given PCI Express Link. For more information on ASPM support requirements, see section 5.4.1 of PCI Express Base Specification.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l0s_exit_latency</ipxact:name>
            <ipxact:description>L0s Exit Latency.
This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from L0s to L0. If L0s is not supported, the value is undefined; however, see the Implementation Note Potential Issues With Legacy Software When L0s is Not Supported in section 5.4.1.1 of PCI Express Base Specification for the recommended value.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are two each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG) determines which one is used by the controller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the controller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the controller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l1_exit_latency</ipxact:name>
            <ipxact:description>L1 Exit Latency. This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from ASPM L1 to L0. If ASPM L1 is not supported, the value is undefined.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are two each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG) determines which one is used by the controller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the controller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the controller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_clock_power_man</ipxact:name>
            <ipxact:description>Clock Power Management.
For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) through the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2/L3 Ready Link states. A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.

L1 PM Substates defines other semantics for the CLKREQ# signal, which are managed independently of Clock Power Management.

This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.

For a Multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all functions of the Multi-Function device indicate a 1b in this bit. For ARI Devices, all Functions must indicate the same value in this bit.

For Downstream Ports, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_surprise_down_err_rep_cap</ipxact:name>
            <ipxact:description>Surprise Down Error Reporting Capable.
For a Downstream Port, this bit must be set if the component supports the optional capability of detecting and reporting a Surprise Down error condition.

For Upstream Ports and components that do not support this optional capability, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active_rep_cap</ipxact:name>
            <ipxact:description>Data Link Layer Link Active Reporting Capable.
For a Downstream Port, the controller hardwires this bit to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Control and Management State Machine. For a hot-plug capable Downstream Port (as indicated by the Hot-Plug Capable bit of the Slot Capabilities register) or a Downstream Port that supports Link speeds greater than 5.0 GT/s, the controller hardwires this bit to 1b.

For Upstream Ports and components that do not support this optional capability, the controller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_not_cap</ipxact:name>
            <ipxact:description>Link Bandwidth Notification Capability.
A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms. This capability is required for all Root Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.

This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aspm_opt_compliance</ipxact:name>
            <ipxact:description>ASPM Optionality Compliance.
This field must be set to 1b in all functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.

Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_port_num</ipxact:name>
            <ipxact:description>Port Number.
This field indicates the PCI Express Port number for the given PCI Express Link.
Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_link_control_link_status_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters.</ipxact:description>
          <ipxact:addressOffset>0x2080</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_control</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Control.
This field controls the level of ASPM enabled on the given PCI Express Link. See section 5.4.1.3 of PCI Express Base Specification for requirements on when and how to enable ASPM.

Note: L0s Entry Enabled enables the Transmitter to enter L0s. If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled from entering L0s (00b or 10b).

ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link. When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.

For Multi-Function Devices (including ARI Devices), it is recommended that software program the same value for this field in all Functions. For non-ARI Multi-Function Devices, only capabilities enabled in all Functions are enabled for the component as a whole.

For ARI Devices, ASPM Control is determined solely by the setting in Function0, regardless of Function 0's D-state. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.

Software must not enable L0s in either direction on a given Link unless components on both sides of the Link each support L0s; otherwise, the result is undefined.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_rcb</ipxact:name>
            <ipxact:description>Read Completion Boundary (RCB).


Root Ports:
Indicates the RCB value for the Root Port. Refer to section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB.
The controller hardwires this bit for a Root Port and returns its RCB support capabilities.



Endpoints and Bridges:
Optionally set by configuration software to indicate the RCB value of the Root Port Upstream from the Endpoint or Bridge. Refer to Section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB is same as Root Port.
Configuration software must only set this bit if the Root Port Upstream from the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
For functions that do not implement this feature, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_disable</ipxact:name>
            <ipxact:description>Link Disable.
This bit disables the Link by directing the LTSSM to the Disabled state when set; this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Writes to this bit are immediately reflected in the value read from the bit, regardless of actual Link state.

After clearing this bit, software must honor timing requirements defined in Section 6.6.1 with respect to the first Configuration Read following a Conventional Reset.

In a DSP that supports crosslink, the controller gates the write value with the CROSS_LINK_EN field in PORT_LINK_CTRL_OFF.


Note: The access attributes of this field are as follows:
 - Wire: CX_CROSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CROSS_LINK_EN=1||CX_CROSSLINK_ENABLE=0 &amp;&amp; dsp=1 ? RW : RO 
 - Dbi: CX_CROSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CROSS_LINK_EN=1||CX_CROSSLINK_ENABLE=0 &amp;&amp; dsp=1? RW : RO</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retrain_link</ipxact:name>
            <ipxact:description>Retrain Link.
A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. If the Port is in DPC when a write of 1b to this bit occurs, the result is undefined. Reads of this bit always return 0b.

It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in progress.

This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

This bit always returns 0b when read.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_common_clk_config</ipxact:name>
            <ipxact:description>Common Clock Configuration. When set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.

A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchronous reference clock.

For non-ARI Multi-Function Devices, software must program the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.

For ARI Devices, Common Clock Configuration is determined solely by the setting in Function 0. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.

Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.

After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_extended_synch</ipxact:name>
            <ipxact:description>Extended Synch. When set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state (see section 4.2.4.5 of PCI Express Base Specification) and when in the Recovery state (see section 4.2.6.4.1 of PCI Express Base Specification). This mode provides external devices (for example, logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.

For Multi-Function devices if any function has this bit set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_clk_power_man</ipxact:name>
            <ipxact:description>Enable Clock Power Management.
Applicable only for Upstream Ports and with form factors that support a Clock Request (CLKREQ#) mechanism, this bit operates as follows:
For a non-ARI Multi-Function Device, power-management-configuration software must only Set this bit if all Functions of the Multi-Function Device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.

For ARI Devices, Clock Power Management is enabled solely by the setting in Function 0. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.
The CLKREQ# signal may also be controlled through the L1 PM Substates mechanism. Such control is not affected by the setting of this bit.

For Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register), the controller hardwires this bit to 0b.

The write value is gated with the PCIE_CAP_CLOCK_POWER_MAN field in LINK_CAPABILITIES_REG.

Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? RWS : ROS 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? RWS : ROS 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_int_en</ipxact:name>
            <ipxact:description>Link Bandwidth Management Interrupt Enable. When set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO  
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_int_en</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Management Interrupt Enable.
When set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_nego_link_width</ipxact:name>
            <ipxact:description>Negotiated Link Width. This field indicates the negotiated width of the given PCI Express Link.
All encodings other than the defined encodings are reserved.
The value in this field is undefined when the Link is not up.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_training</ipxact:name>
            <ipxact:description>Link Training. This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches, and the controller hardwires it to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_slot_clk_config</ipxact:name>
            <ipxact:description>Slot Clock Configuration. This bit indicates that the component uses the same physical reference clock that the platform provides on the connector. If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.

For a Multi-Function Device, each Function must report the same value for this bit.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active</ipxact:name>
            <ipxact:description>Data Link Layer Link Active. This bit indicates the status of the Data Link Control and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.

This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, the controller hardwires it to 0b.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_status</ipxact:name>
            <ipxact:description>Link Bandwidth Management Status. This bit is set by hardware to indicate that either of the following has occurred without the Port transitioning through DL_Down status:

 A Link retraining has completed following a write of 1b to the Retrain Link bit.

Note: This bit is set following any write of 1b to the Retrain Link bit, including when the Link is in the process of retraining for some other reason.

 Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either through an LTSSM timeout or a higher level process.

 This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.
The default value of this bit is 0b.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_status</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Status. This bit is set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning through DL_Down status, for reasons other than to attempt to correct unreliable Link operation.

This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_device_capabilities2_reg</ipxact:name>
          <ipxact:description>This register identifies PCI Express device specific capabilities; in addition to the Device Capabilities Register.</ipxact:description>
          <ipxact:addressOffset>0x2094</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_range</ipxact:name>
            <ipxact:description>Completion Timeout Ranges Supported. This field indicates device Function support for the optional Completion Timeout programmability mechanism. This mechanism allows system software to modify the Completion Timeout value.
This field is applicable only to Root Ports, Endpoints that issue Requests on their own behalf, and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express. For all other Functions this field is Reserved and must be hardwired to 0000b.
Four time value ranges are defined:
 - Range A: 50 us to 10 ms
 - Range B: 10 ms to 250 ms
 - Range C: 250 ms to 4 s
 - Range D: 4 s to 64 s
Bits are set according to the list below to show timeout value ranges supported.
All encodings other than the defined encodings are reserved.
It is strongly recommended that the Completion Timeout mechanism not expire in less than 10 ms.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xf</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_disable_support</ipxact:name>
            <ipxact:description>Completion Timeout Disable Supported. A value of 1b indicates support for the Completion Timeout Disable mechanism.
The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.

This mechanism is optional for Root Ports.

For all other Functions this field is Reserved and the controller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ari_forward_support</ipxact:name>
            <ipxact:description>ARI Forwarding Supported. Applicable only to Switch Downstream Ports and Root Ports; must be 0b for other Function types. This bit must be set to 1b if a Switch Downstream Port or Root Port supports this optional capability. For more information, see section 6.13 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_atomic_routing_supp</ipxact:name>
            <ipxact:description>AtomicOp Routing Supported. Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_32_atomic_cpl_supp</ipxact:name>
            <ipxact:description>32-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_64_atomic_cpl_supp</ipxact:name>
            <ipxact:description>64-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_128_cas_cpl_supp</ipxact:name>
            <ipxact:description>128-bit CAS Completer Supported. Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_no_ro_en_pr2pr_par</ipxact:name>
            <ipxact:description>No RO-enabled PR-PR Passing. If this bit is set, the routing element never carries out the passing permitted by Table 2-39 of PCI Express Base Specification entry A2b that is associated with the Relaxed Ordering Attribute field being Set.
This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
For all other functions, this bit must be 0b.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ltr_supp</ipxact:name>
            <ipxact:description>LTR Mechanism Supported. A value of 1b indicates support for the optional Latency Tolerance Reporting (LTR) mechanism.
Root Ports, Switches and Endpoints are permitted to implement this capability.
For a Multi-Function Device associated with an Upstream Port, each Function must report the same value for this bit.
For Bridges and other Functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_0</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 0.
Value of this bit along with TPH Completer Supported Bit 1 indicates Completer support for TPH or Extended TPH. Applicable only to Root Ports and Endpoints. For all other Functions, this field is Reserved.
For more information, see section 6.17 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_1</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 1.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_ln_sys_cls</ipxact:name>
            <ipxact:description>LN System CLS.
Applicable only to Root Ports and RCRBs; must be 00b for all other Function types. This field indicates if the Root Port or RCRB supports LN protocol as an LN Completer, and if so, what cacheline size is in effect.
All encodings other than the defined encodings are reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_comp_support</ipxact:name>
            <ipxact:description>10-Bit Tag Completer Supported. If this bit is set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_req_support</ipxact:name>
            <ipxact:description>10-Bit Tag Requester Supported. If this bit is set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.

This bit must not be set if the 10-Bit Tag Completer Supported bit is clear.

Note: 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Control 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_extnd_fmt_support</ipxact:name>
            <ipxact:description>Extended Fmt Field Supported. If set, the Function supports the 3-bit definition of the Fmt field. If clear, the Function supports a 2-bit definition of the Fmt field. For more information, see section 2.2 of PCI Express Base Specification.

Must be set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.

It is strongly recommended that Functions support the 3-bit definition of the Fmt field.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_end2end_tlp_prfx_support</ipxact:name>
            <ipxact:description>End-End TLP Prefix Supported. Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
All Ports of a Switch must have the same value for this bit.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_max_end2end_tlp_prfxs</ipxact:name>
            <ipxact:description>Max End-End TLP Prefixes.
Indicates the maximum number of End-End TLP Prefixes supported by this Function. For more information,  see Section 2.2.10.2 of PCI Express Base Specification.
If End-End TLP Prefix Supported is clear, this field is RsvdP.

Different Root Ports that have the End-End TLP Prefix Supported bit set are permitted to report different values for this field.

For Switches where End-End TLP Prefix Supported is set, this field must be 00b indicating support for up to four End-End TLP Prefixes.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pcie_cap_link_control2_link_status2_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters; in addition to the Link Control and Link Status Register.</ipxact:description>
          <ipxact:addressOffset>0x20a0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_target_link_speed</ipxact:name>
            <ipxact:description>Target Link Speed. For Downstream Ports, this field sets an upper limit on Link operational speed by restricting the values advertised by the Upstream component in its training sequences.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
All encodings other than the defined encodings are reserved.

If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.

If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.

The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform/form factor requires a different default value.

For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.

For Upstream Ports, if the Enter Compliance bit is Clear, this field is permitted to have no effect.

For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this field to 0000b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_compliance</ipxact:name>
            <ipxact:description>Enter Compliance. Software is permitted to force a Link to enter Compliance mode (at the speed indicated in the Target Link Speed field and the de-emphasis/preset level indicated by the Compliance Preset/De-emphasis field) by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.

Default value of this bit following Fundamental Reset is 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_hw_auto_speed_disable</ipxact:name>
            <ipxact:description>Hardware Autonomous Speed Disable. When set, this bit disables hardware from changing the Link speed for device-specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_sel_deemphasis</ipxact:name>
            <ipxact:description>Selectable De-emphasis. When the Link is operating at 5.0 GT/s speed, this bit is used to control the transmit de-emphasis of the link in specific situations. For more information, see section 4.2.6 of PCI Express Base Specification.
When the Link is not operating at 5.0 GT/s speed, the setting of this bit has no effect. Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tx_margin</ipxact:name>
            <ipxact:description>Transmit Margin, This field controls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration substate (see Chapter 4 of PCI Express Base Specification for details of how the Transmitter voltage level is determined in various states).
 - 001b-111b: As defined in Section 8.3.4 not all encodings are required to be implemented.
For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

For components that support only the 2.5 GT/s speed, the controller hardwires this bit to 000b.

This field is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_modified_compliance</ipxact:name>
            <ipxact:description>Enter Modified Compliance. When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance substate.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_sos</ipxact:name>
            <ipxact:description>Compliance SOS. When set to 1b, the LTSSM is required to send SKP Ordered Sets between sequences when sending the Compliance Pattern or Modified Compliance Pattern.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is applicable when the Link is operating at 2.5 GT/s or 5.0 GT/s data rates only.

For components that support only the 2.5 GT/s speed, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_preset</ipxact:name>
            <ipxact:description>Compliance Preset/De-emphasis.
 - For 8.0 GT/s and higher Data Rate: This field sets the Transmitter Preset in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b. The encodings are defined in section 4.2.3.2 of PCI Express Base Specification . Results are undefined if a reserved preset encoding is used when entering Polling.Compliance in this way.
 - For 5.0 GT/s Data Rate: This field sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
 - When the Link is operating at 2.5 GT/s, the setting of this field has no effect. Components that support only 2.5 GT/s speed are permitted to hardwire this field to 0000b.
 - For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.
 - This field is intended for debug and compliance testing purposes. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.
Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_curr_deemphasis</ipxact:name>
            <ipxact:description>Current De-emphasis Level. When the Link is operating at 5.0 GT/s speed, this bit reflects the level of de-emphasis.
The value in this bit is undefined when the Link is not operating at 5.0 GT/s speed.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.
For components that support speeds greater than 2.5 GT/s, Multi-Function Devices associated with an Upstream Port must report the same value in this field for all Functions of the Port.

 In C-PCIe mode, its contents are derived by sampling the PIPE.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Complete. When set to 1b, this bit indicates that the Transmitter Equalization procedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p1</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 1 Successful. When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p2</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 2 Successful. When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p3</ipxact:name>
            <ipxact:description>EEqualization 8.0 GT/s Phase 3 Successful. When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_eq_req</ipxact:name>
            <ipxact:description>Link Equalization Request 8.0 GT/s. This bit is set by hardware to request the 8.0 GT/s Link equalization process to be performed on the Link. For more information, see sections 4.2.3 and 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retimer_pre_det</ipxact:name>
            <ipxact:description>Retimer Presence Detected. When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1 of PCI Express Base Specification.

This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

For Ports that have the Retimer Presence Detect Supported bit set to 0b, the controller hardwires this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_two_retimers_pre_det</ipxact:name>
            <ipxact:description>Two Retimers Presence Detected. When set to 1b, this bit indicates that two Retimers were present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1  of PCI Express Base Specification.

This bit is required for Ports that have the Two Retimers Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

Ports that have the Two Retimers Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_crosslink_resolution</ipxact:name>
            <ipxact:description>Crosslink Resolution. This field indicates the state of the Crosslink negotiation. It must be implemented if Crosslink Supported is Set and the Port supports 16.0 GT/s or higher data rate. It is permitted to be implemented in all other Ports. If Crosslink Supported is clear, the controller hardwires this field to 01b or 10b.
Once a value of 01b or 10b is returned in this field, that value must continue to be returned while the Link is Up.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_msix_cap_pci_msix_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This Register holds MSI-X Capability ID, Next Capability pointer. It also controls the MSI-X behaviour.</ipxact:description>
          <ipxact:addressOffset>0x20b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_cap_next_offset</ipxact:name>
            <ipxact:description>MSI-X Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_size</ipxact:name>
            <ipxact:description>MSI-X Table Size.
System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Size (PCI_MSIX_TABLE_SIZE field in SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_SIZE field in the PF PCI_MSIX_CAP_ID_NEXT_CTRL_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_function_mask</ipxact:name>
            <ipxact:description>Function Mask.
If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
If Clear, each vector's Mask bit determines whether the vector is masked or not.
Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_enable</ipxact:name>
            <ipxact:description>MSI-X Enable.
If Set and the MSI Enable bit in the MSI Message Control Register for MSI is Clear, the Function is permitted to use MSI-X to request service and is prohibited from using INTx interrupts (if implemented).
System configuration software Sets this bit to enable MSI-X. A device driver is prohibited from writing this bit to mask a Function's service request.
If Clear, the Function is prohibited from using MSI-X to request service.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_msix_cap_msix_table_offset_reg</ipxact:name>
          <ipxact:description>This register provides Table BIR and MSI-x Table offset select.</ipxact:description>
          <ipxact:addressOffset>0x20b4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_bir</ipxact:name>
            <ipxact:description>MSI-X Table BAR Indicator Register Field.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI , is used to map the Function's MSI-X Table into Memory Space.
All encodings other than the defined encodings are reserved.
For a 64-bit Base Address Register , the Table BIR indicates the lower DWORD. For Functions with Type 1 Configuration Space headers, BIR values 2 through 5 are also Reserved.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table BAR Indicator Register (PCI_MSIX_BIR field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_BIR field in the PF MSIX_TABLE_OFFSET_REG register.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_offset</ipxact:name>
            <ipxact:description>MSI-X Table Offset.
Used as an offset from the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X Table.
The lower 3 Table BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Offset (PCI_MSIX_TABLE_OFFSET field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_OFFSET field in the PF MSIX_TABLE_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_msix_cap_msix_pba_offset_reg</ipxact:name>
          <ipxact:description>This register provides PBA Offset and PBA BIR value.</ipxact:description>
          <ipxact:addressOffset>0x20b8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_bir</ipxact:name>
            <ipxact:description>MSI-X PBA BIR.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
The PBA BIR value definitions are identical to those for the Table BIR .

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA BIR (PCI_MSIX_PBA_BIR field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_BIR field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_offset</ipxact:name>
            <ipxact:description>MSI-X PBA Offset.
Used as an offset from the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X PBA.
The lower 3 PBA BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA Offset (PCI_MSIX_PBA_OFFSET field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_OFFSET field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000002</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_aer_cap_aer_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>Advanced Error Reporting Extended Capability Header provides information about Capability ID, Version, and next offset.</ipxact:description>
          <ipxact:addressOffset>0x2100</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field must be 2h if the End-End TLP Prefix Supported bit is set and must be 1h or 2h otherwise.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and
thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sn_cap_sn_base</ipxact:name>
          <ipxact:description>The Device Serial Number Extended Capability is an optional Extended Capability that may be implemented by any PCI Express device Function.
This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x2164</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sn_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sn_cap_ser_num_reg_dw_1</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x2168</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_1_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 1).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sn_cap_ser_num_reg_dw_2</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x216c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_2_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 2).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_ari_cap_ari_base</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x2174</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_ari_cap_cap_reg</ipxact:name>
          <ipxact:description>This Register provides information regarding supported ARI Capability, and controls that capability.</ipxact:description>
          <ipxact:addressOffset>0x2178</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_next_fun_num</ipxact:name>
            <ipxact:description>Next Function Number.
This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions.
Function 0 starts this linked list of Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1 ) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x03</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_base_reg</ipxact:name>
          <ipxact:description>SR-IOV Extended Capability Header provides information about Capability ID, Version, and Next Offset.</ipxact:description>
          <ipxact:addressOffset>0x21e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This bit depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_total_vfs_initial_vfs_reg</ipxact:name>
          <ipxact:description>This Register provides value of TotalVFs and InitialVFs.</ipxact:description>
          <ipxact:addressOffset>0x21ec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_initial_vfs</ipxact:name>
            <ipxact:description>InitialVFs.
InitialVFs indicates to SR-PCIM the number of VFs that are initially associated with the PF. The minimum value of InitialVFs is 0.
For Devices operating in Single-Root mode, this field is HwInit and must contain the same value as TotalVFs. And for Devices operating in Multi-Root mode, the value of this field may be changed by MRPCIM when VF Enable is Clear.
If VF Migration Enable is Set and VF Enable is Cleared and then Set, the value of InitialVFs may change. This is necessary since some VFs may have been migrated to other PFs and may no longer be available to this PF.
There are two InitialVFs registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit (SRIOV_ARI_CAPABLE_HIER) of the PF0 SR-IOV Control Register (STATUS_CONTROL_REG) determines which one is used by the controller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x003f</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_vf_offset_position</ipxact:name>
          <ipxact:description>This Register contains value of VF Stride and First VFs Offset.</ipxact:description>
          <ipxact:addressOffset>0x21f4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_offset</ipxact:name>
            <ipxact:description>First VF Offset.
First VF Offset is a constant and defines the Routing ID offset of the first VF that is associated with the PF that contains this Capability structure.
The first VF's 16-bit Routing ID is calculated by adding the contents of this field to the Routing ID of the PF containing this field ignoring any carry, using unsigned, 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
First VF Offset is unused if NumVFs is 0. If NumVFs is greater than 0, First VF Offset must not be zero.
There are two First VF Offset registers at this address location; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Control Register determines which one is used by the controller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_stride</ipxact:name>
            <ipxact:description>VF Stride.
VF Stride defines the Routing ID offset from one VF to the next one for all VFs associated with the PF that contains this Capability structure.
The next VF's 16-bit Routing ID is calculated by adding the contents of this field to the Routing ID of the current VF, ignoring any carry, using unsigned 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
VF Stride is unused if NumVFs is 0 or 1. If NumVFs is greater than 1, VF Stride must not be zero.
There are two VF Stride registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Control Register. determines which one is used by the controller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_vf_device_id_reg</ipxact:name>
          <ipxact:description>VF Device ID may be different from the PF Device ID. A VF Device ID must be managed by the vendor. The vendor must ensure that the chosen VF Device ID does not result in the use of an incompatible device driver.</ipxact:description>
          <ipxact:addressOffset>0x21f8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_device_id</ipxact:name>
            <ipxact:description>VF Device ID.
This field contains the Device ID that should be presented for every VF to the SI.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sup_page_sizes_reg</ipxact:name>
          <ipxact:description>This Register provides the page sizes supported by the PF.
This PF supports a page size of 2^(n+12), if bit n is Set. For example, if bit 0 is Set, the PF supports 4-KB page sizes.</ipxact:description>
          <ipxact:addressOffset>0x21fc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_sup_page_size</ipxact:name>
            <ipxact:description>Page Sizes Supported by VF.
This field indicates the page sizes supported by the PF. This PF supports a page size of 2^(n +12) if bit n is Set.
For example, if bit 0 is Set, the PF supports 4-KB page sizes. PFs are required to support 4-KB, 8-KB, 64-KB, 256-KB, 1-MB, and 4-MB page sizes. All other page sizes are optional.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000553</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_bar0_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR0 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x2204</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_type</ipxact:name>
            <ipxact:description>VF BAR0 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_prefetch</ipxact:name>
            <ipxact:description>VF BAR0 Prefetchable.
This field provides whether BAR0 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_start</ipxact:name>
            <ipxact:description>VF BAR0 Base Address.
This field provides starting address of BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_bar1_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR1 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x2208</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar1</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_type</ipxact:name>
            <ipxact:description>VF BAR1 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_prefetch</ipxact:name>
            <ipxact:description>VF BAR1 Prefetchable.
This field provides whether BAR1 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_start</ipxact:name>
            <ipxact:description>VF BAR1 Base Address.
This field provides starting address of BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_bar2_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR2 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x220c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_type</ipxact:name>
            <ipxact:description>VF BAR2 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_prefetch</ipxact:name>
            <ipxact:description>VF BAR2 Prefetchable.
This field provides whether BAR2 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_start</ipxact:name>
            <ipxact:description>VF BAR2 Base Address.
This field provides starting address of BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_bar3_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR3 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x2210</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_type</ipxact:name>
            <ipxact:description>VF BAR3 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_prefetch</ipxact:name>
            <ipxact:description>VF BAR3 Prefetchable.
This field provides whether BAR3 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_start</ipxact:name>
            <ipxact:description>VF BAR3 Base Address.
This field provides starting address of BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_bar4_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR4 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x2214</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_type</ipxact:name>
            <ipxact:description>VF BAR4 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_prefetch</ipxact:name>
            <ipxact:description>VF BAR4 Prefetchable.
This field provides whether BAR4 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_start</ipxact:name>
            <ipxact:description>VF BAR4 Base Address.
This field provides starting address of BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_sriov_cap_sriov_bar5_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR5 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x2218</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar5</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_type</ipxact:name>
            <ipxact:description>VF BAR5 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_prefetch</ipxact:name>
            <ipxact:description>VF BAR5 Prefetchable.
This field provides whether BAR5 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_start</ipxact:name>
            <ipxact:description>VF BAR5 Base Address.
This field provides starting address of BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_tph_cap_tph_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability Revision, and Next offset of structure Extended Capability Register.</ipxact:description>
          <ipxact:addressOffset>0x2220</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_cap_ver</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_tph_cap_tph_req_cap_reg_reg</ipxact:name>
          <ipxact:description>This register gives information about No ST mode support, Intrrupt Vector mode, Device specific mode, Extended TPH requester support, ST table location and size.

SRIOV Note: All VFs in a single PF have the same values for VF_TPH_REQ_CAP_REG_REG. To write this common register, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PF TPH_REQ_CAP_REG_REG register.</ipxact:description>
          <ipxact:addressOffset>0x2224</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_no_st_mode</ipxact:name>
            <ipxact:description>No ST Mode Supported.
set indicates that the Function supports the No ST Mode of operation.
This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_int_vec</ipxact:name>
            <ipxact:description>Interrupt Vector Mode Supported.
If set indicates that the Function supports the Interrupt Vector Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_device_spec</ipxact:name>
            <ipxact:description>Device Specific Mode Supported.
If set indicates that the Function supports the Device Specific Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_extended_tph</ipxact:name>
            <ipxact:description>Extended TPH Requester Supported.
If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix .


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_0</ipxact:name>
            <ipxact:description>ST Table Location Bit 0.
If this field is set, ST Table is Located in the TPH Requester Extended Capability structure.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_1</ipxact:name>
            <ipxact:description>ST Table Location Bit 1.
If this field is set, ST Table is Located in the MSI-X Table.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_11</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_size</ipxact:name>
            <ipxact:description>ST Table Size.
This field indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1.
For example, a returned value of 000 0000 0011b indicates a table size of four entries.
There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Extended Capability structure. When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_ats_cap_ats_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides value of Capability ID, Capability version, and next offset of Extended capability structure.</ipxact:description>
          <ipxact:addressOffset>0x22ac</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_ats_cap_ats_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register provides value of Invalidate queue depth, Page alignment request, and Global Invalidate support. It also controls Cache translation and Smallest Translate Unit.</ipxact:description>
          <ipxact:addressOffset>0x22b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>invalidate_q_depth</ipxact:name>
            <ipxact:description>Invalidate Queue Depth.
The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>page_aligned_req</ipxact:name>
            <ipxact:description>Page Aligned Request.
If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended.
This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>global_inval_spprtd</ipxact:name>
            <ipxact:description>Global Invalidate Supported.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_acs_cap_acs_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides capability ID, capability version, and next offset value.</ipxact:description>
          <ipxact:addressOffset>0x22bc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field indicates the version of present capability structure. It is a PCI-SIG defined version number.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h, if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_acs_cap_acs_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register is Access Control Services Capability and Control Register.</ipxact:description>
          <ipxact:addressOffset>0x22c0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>acs_src_valid</ipxact:name>
            <ipxact:description>ACS Source Validation Capable.
Required for Root Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Source Validation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_at_block</ipxact:name>
            <ipxact:description>ACS Translation Blocking Capable.
Required for Root Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Translation Blocking.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_req_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Request Redirect Capable.
Required for Root Ports that support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_cpl_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Completion Redirect Capable.
Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_usp_forwarding</ipxact:name>
            <ipxact:description>ACS Upstream forwarding Capable.
Required for Root Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_egress_control</ipxact:name>
            <ipxact:description>ACS Egress Control.
Optional for Root Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Control.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_direct_translated_p2p</ipxact:name>
            <ipxact:description>ACS Direct Translated Peer-to-Peer Capable.
Required for Root Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; the controller must be hardwired to 0b otherwise.
If 1b, indicates that the component implements ACS Direct Translated P2P.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_egress_ctrl_size</ipxact:name>
            <ipxact:description>ACS Egress control vector size.
Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Control Vector; the encoding 00h indicates 256 bits.
If the ACS_P2P_EGRESS_CONTROL bit is 0b, the value of the size field is undefined, and the Egress Control Vector register is not required to be present.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x08</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_prs_ext_cap_prs_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability version, and Next Offset value of Page Request Service Capability Structure.</ipxact:description>
          <ipxact:addressOffset>0x22c8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_cap_version</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>prs_next_offset</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Next Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_prs_ext_cap_prs_req_capacity_reg</ipxact:name>
          <ipxact:description>This register contains the number of outstanding page request messages the associated Page Request Interface physically supports.</ipxact:description>
          <ipxact:addressOffset>0x22d0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_outstanding_capacity</ipxact:name>
            <ipxact:description>Page Request Services Outstanding Capacity value.
This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000001</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pasid_cap_pasid_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability Version, and Next offset of capability structure.</ipxact:description>
          <ipxact:addressOffset>0x22e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_pasid_cap_pasid_cap_cntrl_reg</ipxact:name>
          <ipxact:description>This register provides value of capability like Execute Permission support, Privileged Mode support, and width of PASID. Also this register controls PASID Enable, Execute Permission Enable, as well as Privileged mode Enable.</ipxact:description>
          <ipxact:addressOffset>0x22e4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>execute_permission_supported</ipxact:name>
            <ipxact:description>Execute Permission Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>privileged_mode_supported</ipxact:name>
            <ipxact:description>Privileged Mode Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>max_pasid_width</ipxact:name>
            <ipxact:description>Max PASID Width.
Indicates the width of the PASID field supported by the Endpoint. The value n indicates support for PASID values 0 through (2^n) - 1 (inclusive). This field must be between '0' and '20' (inclusive).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_13</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_ras_des_cap_ras_des_cap_header_reg</ipxact:name>
          <ipxact:description>The Vendor-Specific Extended Capability (VSEC Capability) is an optional Extended Capability that is permitted to be implemented by any PCI Express Function or RCRB.
This Register contains Capability Id, Capability Version and Next Offset value for Vendor-Specific Extended Capability.</ipxact:description>
          <ipxact:addressOffset>0x22e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
Value of this field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_ras_des_cap_event_counter_control_reg</ipxact:name>
          <ipxact:description>This is a viewport control register.
- Setting the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register determine the Event Counter data returned by the EVENT_COUNTER_DATA_REG viewport register.
- Setting the EVENT_COUNTER_ENABLE field in this register enables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Setting the EVENT_COUNTER_CLEAR field in this register clears the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Reading the EVENT_COUNTER_STATUS field in this register returns the Enable status of the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.</ipxact:description>
          <ipxact:addressOffset>0x22f0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>event_counter_enable</ipxact:name>
            <ipxact:description>Event Counter Enable.
Enables/disables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
By default, all event counters are disabled.
You can enable/disable a specific Event Counter by writing the 'per event off' or 'per event on' codes.
You can enable/disable all event counters by writing the 'all on' or 'all off' codes.
The read value is always '0'.
For other values no change.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>event_counter_event_select</ipxact:name>
            <ipxact:description>Event Counter Data Select.
This field in conjunction with the EVENT_COUNTER_LANE_SELECT field indexes the Event Counter data returned by the EVENT_COUNTER_DATA_REG register.
 - 27-24: Group number(4-bit: 0..0x7)
 - 23-16: Event number(8-bit: 0..0x13) within the Group
 - ..
For detailed definitions of Group number and Event number, see the RAS DES chapter in the Databook.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf2_vsecras_cap_rasdp_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>This Register provides capability ID, Capability version, and Next capability offset for PCIe Extended capability stucture.</ipxact:description>
          <ipxact:addressOffset>0x23e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
A version of the specification that changes the Extended Capability in a way that is not otherwise identifiable (e.g., through a new Capability field) is permitted to increment this field.
All such changes to the Capability structure must be software-compatible.
Software must check for Capability Version numbers that are greater than or equal to the highest number defined when the software is written, as Functions reporting any such Capability Version numbers will contain a Capability structure that is compatible with that piece of software.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_device_id_vendor_id_reg</ipxact:name>
          <ipxact:description>This register holds the device ID, next offset pointer for RCRB mode and vendor ID.</ipxact:description>
          <ipxact:addressOffset>0x3000</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_type0_vendor_id</ipxact:name>
            <ipxact:description>Vendor ID.
The Vendor ID register identifies the manufacturer of the Function. Valid vendor identifiers are allocated by the PCI-SIG to ensure uniqueness. It is not permitted to populate this register with a value of FFFFh, which is an invalid value for Vendor ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x8086</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_type0_device_id</ipxact:name>
            <ipxact:description>- DEVICE_ID [31:16]
 - The Device ID register identifies the particular Function for PCIe Type0 and Type1 configuration header. This identifier is allocated by the vendor.
Databook.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_class_code_revision_id</ipxact:name>
          <ipxact:description>This register specifies the class code and revision ID of a function.</ipxact:description>
          <ipxact:addressOffset>0x3008</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>revision_id</ipxact:name>
            <ipxact:description>Revision ID.
The value in this register specifies a Function specific revision identifier. The value is chosen by the vendor. Zero is an acceptable value. The Revision ID should be viewed as a vendor defined extension to the Device ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>program_interface</ipxact:name>
            <ipxact:description>Programming Interface.
This field identifies a specific register-level programming interface (if any) so that device independent software can interact with the Function.
Encodings for interface are provided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subclass_code</ipxact:name>
            <ipxact:description>Sub-Class Code.
Specifies a base class sub-class, which identifies more specifically the operation of the Function.
Encodings for sub-class are provided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>base_class_code</ipxact:name>
            <ipxact:description>Base Class Code.
A code that broadly classifies the type of operation the Function performs.
Encodings for base class, are provided in the PCI Code and ID Assignment Specification. All unspecified encodings are Reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bist_header_type_latency_cache_line_size_reg</ipxact:name>
          <ipxact:description>This register provides the status and controls BIST. It also holds information regarding the header layout, latency timer, and cache line size.</ipxact:description>
          <ipxact:addressOffset>0x300c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>header_type</ipxact:name>
            <ipxact:description>Header Layout.
This field identifies the layout of the second part of the predefined header.
The controller uses 000 0000b encoding.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>multi_func</ipxact:name>
            <ipxact:description>Multi-Function Device.
Except where stated otherwise, it is recommended that this bit be set if there are multiple Functions, and clear if there is only one Function.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bar0_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x3010</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar0_mem_io</ipxact:name>
            <ipxact:description>- BAR0 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_type</ipxact:name>
            <ipxact:description>-  BAR0 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_prefetch</ipxact:name>
            <ipxact:description>- BAR0 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar0_start</ipxact:name>
            <ipxact:description>- BAR0_START. BAR0 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bar1_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x3014</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar1_mem_io</ipxact:name>
            <ipxact:description>- BAR1 Memory Space Indicator.
 - This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
 - Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_type</ipxact:name>
            <ipxact:description>- BAR1 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_prefetch</ipxact:name>
            <ipxact:description>- BAR1 Prefetchable.

Memory Space: Set to one if data is prefetchable.

A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.

IO Space: Not applicable.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar1_start</ipxact:name>
            <ipxact:description>- BAR1 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bar2_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x3018</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar2_mem_io</ipxact:name>
            <ipxact:description>BAR2 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_type</ipxact:name>
            <ipxact:description>BAR2 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_prefetch</ipxact:name>
            <ipxact:description>BAR2 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar2_start</ipxact:name>
            <ipxact:description>BAR2 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bar3_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x301c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar3_mem_io</ipxact:name>
            <ipxact:description>BAR3 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_type</ipxact:name>
            <ipxact:description>BAR3 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_prefetch</ipxact:name>
            <ipxact:description>BAR3 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar3_start</ipxact:name>
            <ipxact:description>BAR3 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bar4_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x3020</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar4_mem_io</ipxact:name>
            <ipxact:description>BAR4 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_type</ipxact:name>
            <ipxact:description>BAR4 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_prefetch</ipxact:name>
            <ipxact:description>BAR4 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar4_start</ipxact:name>
            <ipxact:description>BAR4 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_bar5_reg</ipxact:name>
          <ipxact:description>System software must build a consistent address map before booting the machine to an operating system. This means it has to determine how much memory is in the system, and how much address space the Functions in the system require. After determining this information, system software can map the Functions into reasonable locations and proceed with system boot. In order to do this mapping in a device-independent manner, the base registers for this mapping are placed in the predefined header portion of Configuration Space. It is strongly recommended that power-up firmware/software also support the optional Enhanced Configuration Access Mechanism (ECAM).</ipxact:description>
          <ipxact:addressOffset>0x3024</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>bar5_mem_io</ipxact:name>
            <ipxact:description>BAR5 Memory Space Indicator.
This bit is used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b.
Base Address registers that map to I/O Space must return a 1b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_type</ipxact:name>
            <ipxact:description>BAR5 Type.
 - Memory Space: Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space). The encodings defined in Values: apply.
 - IO Space: Bit 1 is reserved and must return 0b on reads. Bits[31:2] are used to map the function into IO space. The encodings defined in Values: do not apply.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_prefetch</ipxact:name>
            <ipxact:description>BAR5 Prefetchable.
 - Memory Space: Set to one if data is prefetchable.
A Function is permitted to mark a range as prefetchable. If there are no side effects on reads, the function returns all bytes on reads regardless of the byte enables, and host bridges can merge processor writes into this range without causing errors. Bit must me clear otherwise.
 - IO Space: Not applicable


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (BAR_ENABLED == 1) then (if [DBI_RO_WR_EN == 1] then R(Sticky)/W(Sticky) else R(Sticky)) else RO(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>bar5_start</ipxact:name>
            <ipxact:description>BAR5 Base Address.
 - Memory Space: Base Address.
 - IO Space: bits[31:2] are used to map the function into IO space/Base.
Address.


Note: The access attributes of this field are as follows:
 - Wire: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
 - Dbi: R(Sticky)/W(Sticky) if enabled else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_cardbus_cis_ptr_reg</ipxact:name>
          <ipxact:description>This register holds the CardBus CIS pointer.</ipxact:description>
          <ipxact:addressOffset>0x3028</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cardbus_cis_pointer</ipxact:name>
            <ipxact:description>CardBus CIS Pointer.
Its functionality does not apply to PCI Express. It must be hardwired to 0000 0000h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_subsystem_id_subsystem_vendor_id_reg</ipxact:name>
          <ipxact:description>These registers are used to uniquely identify the add-in card or subsystem where the PCI Express component resides. They provide a mechanism for vendors to distinguish their products from one another even though the assemblies may have the same PCI Express component on them (and, therefore, the same Vendor ID and Device ID).</ipxact:description>
          <ipxact:addressOffset>0x302c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>subsys_vendor_id</ipxact:name>
            <ipxact:description>Subsystem Vendor ID.
Subsystem Vendor IDs can be obtained from the PCI SIG and are used to identify the vendor of the add-in card or subsystem. Values for the Subsystem ID are vendor-specific.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>subsys_dev_id</ipxact:name>
            <ipxact:description>Subsystem ID.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_exp_rom_base_addr_reg</ipxact:name>
          <ipxact:description>This register handles the base address and size information for this expansion ROM.</ipxact:description>
          <ipxact:addressOffset>0x3030</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rom_bar_enable</ipxact:name>
            <ipxact:description>Expansion ROM Enable.
This bit controls whether or not the Function accepts accesses to its expansion ROM.
The Memory Space Enable bit in the Command register has precedence over the Expansion ROM Enable bit. A Function must claim accesses to its expansion ROM only if both the Memory Space Enable bit and the Expansion ROM Enable bit are set.


Note: The access attributes of this field are as follows:
 - Wire: if (EXP_ROM_BAR_MASK_REG.ROM_BAR_ENABLED == 1) then R/W else R 
 - Dbi: if (EXP_ROM_BAR_MASK_REG.ROM_BAR_ENABLED == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_pci_cap_ptr_reg</ipxact:name>
          <ipxact:description>This register is used to point to a linked list of capabilities implemented by a Function.</ipxact:description>
          <ipxact:addressOffset>0x3034</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_pointer</ipxact:name>
            <ipxact:description>Capabilities Pointer. This register points to a valid capability structure. Either this structure is the PCI Express Capability structure, or a subsequent list item points to the PCI Express Capability structure. The bottom two bits are reserved, the controller sets it to 00b. Software must mask these bits off before using this register as a pointer in Configuration Space to the first entry of a linked list of new capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_type0_hdr_max_latency_min_grant_interrupt_pin_interrupt_line_reg</ipxact:name>
          <ipxact:description>The Interrupt Line register communicates interrupt line routing information. The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses.</ipxact:description>
          <ipxact:addressOffset>0x303c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>int_pin</ipxact:name>
            <ipxact:description>Interrupt Pin.
The Interrupt Pin register identifies the legacy interrupt Message(s) the Function uses. All encodings other than the defined encodings are reserved.
PCI Express defines one legacy interrupt Message for a single Function device and up to four legacy interrupt Messages for a multi-Function device. For a single Function device, only INTA may be used.

Any Function on a multi-Function device can use any of the INTx Messages. If a device implements a single legacy interrupt Message, it must be INTA; if it implements two legacy interrupt Messages, they must be INTA and INTB; and so forth.
For a multi-Function device, all Functions may use the same INTx Message or each may have its own (up to a maximum of four Functions) or any combination thereof. A single Function can never generate an interrupt request on more than one INTx Message.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x01</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pm_cap_cap_id_nxt_ptr_reg</ipxact:name>
          <ipxact:description>This register provides information refarding the Power Management Capabilities.</ipxact:description>
          <ipxact:addressOffset>0x3040</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pm_next_pointer</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field provides an offset into the function's configuration space pointing to the location of next item in the capabilities list. If there are no additional items in the capabilities list, this field is set to 00h.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pm_spec_ver</ipxact:name>
            <ipxact:description>Version.
This field provides the Power Management specification version. The controller hardwires this field to 011b for functions compliant to PCI Express Base Specification, Revision 4.0, Version 1.0&gt;.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_clk</ipxact:name>
            <ipxact:description>PME Clock.
Does not apply to PCI Express, the controller hardwires it to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>dsi</ipxact:name>
            <ipxact:description>Device Specific Initialization.
The DSI bit indicates whether special initialization of this function is required.

When set, indicates that the function requires a device specific initialization sequence following a transition to the D0uninitialized state.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>aux_curr</ipxact:name>
            <ipxact:description>Aux_Current.
This 3 bit field reports the Vaux auxiliary current requirements for the function.

If this function implements the Data Register, the controller hardwires this field to 000b.

If PME_Support is 0 xxxxb (PME assertion from D3cold is not supported), the controller hardwires this field to 0000b.

For functions where PME_Support is 1 xxxxb (PME assertion from D3cold is supported), and which do not implement the Data field, the encodings defined in Values: apply:


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d1_support</ipxact:name>
            <ipxact:description>D1_Support.
If this bit is set, this function supports the D1 Power Management state. Functions that do not support D1 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>d2_support</ipxact:name>
            <ipxact:description>D2_Support.
If this bit is set, this function supports the D2 Power Management state. Functions that do not support D2 must always return a value of 0b for this bit.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pme_support</ipxact:name>
            <ipxact:description>PME_Support.
This 5-bit field indicates the power states in which the function may generate a PME and/or forward PME messages.
A value of 0b for any bit indicates that the function is not capable of asserting PME while in that power state.
 - bit(27) X XXX1b - PME can be generated from D0
 - bit(28) X XX1Xb - PME can be generated from D1
 - bit(29) X X1XXb - PME can be generated from D2
 - bit(30) X 1XXXb - PME can be generated from D3hot
 - bit(31) 1 XXXXb - PME can be generated from D3cold
Bit 31 (PME can be asserted from D3cold) represents a special case. Functions that set this bit require some sort of auxiliary power source. Implementation specific mechanisms are recommended to validate that the power source is available before setting this bit.

Each bit that corresponds to a supported D-state must be set for PCI-PCI Bridge structures representing Ports on Root Complexes/Switches to indicate that the Bridge will forward PME Messages. Bit 31 must only be set if the Port is still able to forward PME Messages when main power is not available.

The read value from this field is the write value &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where D1_SUPPORT and D2_SUPPORT are fields in this register.

The reset value PME_SUPPORT_n &amp;&amp; (sys_aux_pwr_det, 1'b1, D2_SUPPORT, D1_SUPPORT, 1'b1), where PME_SUPPORT_n is a configuration parameter.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pm_cap_con_status_reg</ipxact:name>
          <ipxact:description>This register is used to manage the PCI function's power management state as well as to enable/monitor PMEs.</ipxact:description>
          <ipxact:addressOffset>0x3044</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>power_state</ipxact:name>
            <ipxact:description>PowerState.
This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state.
You can write to this register; however, the read-back value is the actual power state, not the write value. If you attempt to write an unsupported, optional state to this field, the write operation completes normally; however, the data is discarded and no state change occurs.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>no_soft_rst</ipxact:name>
            <ipxact:description>No_Soft_Reset.
This bit indicates the state of the function after writing the PowerState field to transition the function from D3hot to D0.
 - When set, this transition preserves internal function state. The function is in D0Active and no additional software intervention is required.
 - When clear, this transition results in undefined internal function state.
Regardless of this bit, functions that transition from D3hot to D0 by Fundamental Reset will return to D0Uninitialized with only PME context preserved if PME is supported and enabled.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_4</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_msi_cap_pci_msi_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This register holds MSI Capability Header information and controls the MSI behaviour.</ipxact:description>
          <ipxact:addressOffset>0x3050</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msi_cap_next_offset</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_enable</ipxact:name>
            <ipxact:description>MSI Enable.
 - If set and the MSI-X Enable bit in the MSI-X Message Control register is clear, the function is permitted to use MSI to request service and is prohibited from using INTx interrupts. System configuration software sets this bit to enable MSI. A device driver is prohibited from writing this bit to mask a function's service request. For more information on control of INTx interrupts, see section 7.5.1.1 of PCI Express Base Specification.
 - If clear, the function is prohibited from using MSI to request service.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_cap</ipxact:name>
            <ipxact:description>Multiple Message Capable.
System software reads this field to determine the number of requested vectors. The number of requested vectors must be aligned to a power of two (if a function requires three vectors, it requests four by initializing this field to 010b). All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_multiple_msg_en</ipxact:name>
            <ipxact:description>Multiple Message Enable.
Software writes to this field to indicate the number of allocated vectors (equal to or less than the number of requested vectors). The number of allocated vectors is aligned to a power of two. If a function requests four vectors (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, two, or one vector by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a function will be allocated at least 1 vector. All encodings other than the defined encodings are reserved.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_64_bit_addr_cap</ipxact:name>
            <ipxact:description>64 bit address capable.
This bit must be set if the function is a PCI Express Endpoint.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_pvm_support</ipxact:name>
            <ipxact:description>Per-Vector Masking Capable.
 - If set, the function supports MSI Per-Vector Masking.
 - If clear, the function does not support MSI Per-Vector Masking.
This bit must be set if the function is a PF or VF within an SR-IOV Device.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_cap</ipxact:name>
            <ipxact:description>Extended Message Data Capable.
 - If set, the function is capable of providing Extended Message Data.
 - If clear, the function does not support providing Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msi_ext_data_en</ipxact:name>
            <ipxact:description>Extended Message Data Enable.
 - If set, the function is enabled to provide Extended Message Data.
 - If clear, the function is not enabled to provide Extended Message Data.


Note: The access attributes of this field are as follows:
 - Wire: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP ? RW : RO 
 - Dbi: PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_MSI_EXT_DATA_CAP  ? RW : RO</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_pcie_cap_id_pcie_next_cap_ptr_pcie_cap_reg</ipxact:name>
          <ipxact:description>This is the PCI Express Capabilities, ID, and Next Pointer Register.</ipxact:description>
          <ipxact:addressOffset>0x3070</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer. This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_slot_imp</ipxact:name>
            <ipxact:description>Slot Implemented. When set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled). This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_int_msg_num</ipxact:name>
            <ipxact:description>PCIE Interrupt Message Number.
Interrupt Message Number. This field indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.

For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.

For MSI-X, the value in this field indicates which MSI-X Table entry is used to generate the interrupt message. The entry must be one of the first 32 entries even if the Function implements more than 32 entries. For a given MSI-X implementation, the entry must remain constant.

If both MSI and MSI-X are implemented, they are permitted to use different vectors, though software is permitted to enable only one mechanism at a time. If MSI-X is enabled, the value in this field must indicate the vector for MSI-X. If MSI is enabled or neither is enabled, the value in this field must indicate the vector for MSI. If software enables both MSI and MSI-X at the same time, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvd</ipxact:name>
            <ipxact:description>Reserved.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_31</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_device_capabilities_reg</ipxact:name>
          <ipxact:description>The Device Capabilities register identifies PCI Express device function specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x3074</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_payload_size</ipxact:name>
            <ipxact:description>Max_Payload_Size Supported.
This field indicates the maximum payload size that the function can support for TLPs.
All encodings other than the defined encodings are reserved.
The functions of a Multi-Function Device are permitted to report different values for this field.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_support</ipxact:name>
            <ipxact:description>Phantom Functions Supported.
This field indicates the support for use of unclaimed function numbers to extend the number of outstanding transactions allowed by logically combining unclaimed function numbers (called Phantom Functions) with the Tag identifier (see Section 2.2.6.2 of PCI Express Base Specification for a description of Tag Extensions).

With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI Multi-Function Devices.

This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
Note: Phantom Function support for the function must be enabled by the Phantom Functions Enable field in the Device Control register before the Function is permitted to use the Function Number field in the Requester ID for Phantom Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_supp</ipxact:name>
            <ipxact:description>Extended Tag Field Supported.
This bit, in combination with the 10-Bit Tag Requester Supported bit in the Device Capabilities 2 register, indicates the maximum supported size of the Tag field as a Requester. This bit must be set if the 10-Bit Tag Requester Supported bit is set.
Note: 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Control register of the Requester Function before 8-bit Tags can be generated by the Requester. See Section 2.2.6.2 of PCI Express Base Specification for interactions with enabling the use of 10-Bit Tags.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l0s_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L0s Acceptable Latency. This field indicates the acceptable total latency that an Endpoint can withstand due to the transition from L0s state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.

Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L0s entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the controller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ep_l1_accpt_latency</ipxact:name>
            <ipxact:description>Endpoint L1 Acceptable Latency. This field indicates the acceptable latency that an Endpoint can withstand due to the transition from L1 state to the L0 state. It is essentially an indirect measure of the Endpoint's internal buffering.
Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L1 entry can be used with no loss of performance.
For functions other than Endpoints, this field is Reserved and the controller hardwires it to 000b.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W (Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x7</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_role_based_err_report</ipxact:name>
            <ipxact:description>Role-Based Error Reporting. When set, this bit indicates that the function implements the functionality originally defined in the Error Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1. This bit must be set by all functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_16</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_flr_cap</ipxact:name>
            <ipxact:description>Function Level Reset Capability. A value of 1b indicates the function supports the optional Function Level Reset mechanism described in section 6.6.2 of the PCI Express Base Specification.

This bit applies to Endpoints only. For all other function types the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_29</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_device_control_device_status</ipxact:name>
          <ipxact:description>This register controls PCI Express device specific parameters and provides information about PCI Express device (function) specific parameters.</ipxact:description>
          <ipxact:addressOffset>0x3078</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_ext_tag_en</ipxact:name>
            <ipxact:description>Extended Tag Field Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Control 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If the Extended Tag Field Enable bit is set, the function is permitted to use an 8-bit Tag field as a Requester
 - If the Extended Tag Field Enable bit is clear, the Function is restricted to a 5-bit Tag field
See section 2.2.6.2 of PCI Express Base Specification for required behavior when the 10-Bit Tag Requester Enable bit is set.

If software changes the value of the Extended Tag Field Enable bit while the function has outstanding Non-Posted Requests, the result is undefined.

For functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? RW : RO  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_EXT_TAG_SUPP ? RW : RO</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_phantom_func_en</ipxact:name>
            <ipxact:description>Phantom Functions Enable.
This bit, in combination with the 10-Bit Tag Requester Enable bit in the Device Control 2 register, determines how many Tag field bits a Requester is permitted to use.

When the 10-Bit Tag Requester Enable bit is clear,
 - If this bit is set, it enables a function to use unclaimed functions as Phantom functions to extend the number of outstanding transaction identifiers
 - If this bit is clear, the function is not allowed to use Phantom functions
For more information, see section 2.2.6.2 of PCI Express Base Specification.

Software should not change the value of this bit while the function has outstanding Non-Posted Requests; otherwise, the result is undefined.

For functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? RW : RO  
 - Dbi: DEVICE_CAPABILITIES_REG.PCIE_CAP_PHANTOM_FUNC_SUPPORT ? RW : RO</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aux_power_pm_en</ipxact:name>
            <ipxact:description>Aux Power PM Enable.
This bit is derived by sampling the sys_aux_pwr_det input.
When set this bit, enables a function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements. Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Control/Status register (PMCSR). For Multi-Function devices, a component is allowed to draw Aux power if at least one of the functions has this bit set.
Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such functions, this bit is not modified by Conventional Reset.

For functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_no_snoop</ipxact:name>
            <ipxact:description>Enable No Snoop.
If this bit is set, the function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency (see section 2.2.6.5 in PCI Express Base Specification).
Note: Setting this bit to 1b should not cause a function to set the No Snoop attribute on all transactions that it initiates. Even when this bit is set, a function is only permitted to set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.

The controller hardwires this bit 0b if a function would never set the No Snoop attribute in transactions it initiates.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_read_req_size</ipxact:name>
            <ipxact:description>Max_Read_Request_Size.
This field sets the maximum Read Request size for the function as a Requester. The function must not generate Read Requests with a size exceeding the set value.
For functions that do not generate Read Requests larger than 128 bytes and functions that do not generate Read Requests on their own behalf, the controller implements this field as Read Only (RO) with a value of 000b.

Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_initiate_flr</ipxact:name>
            <ipxact:description>Initiate Function Level Reset (applicable to Endpoints with Function Level Reset Capability set to 1b).
A write of 1b initiates Function Level Reset to the Function. The value read by software from this bit is always 0b.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_link_capabilities_reg</ipxact:name>
          <ipxact:description>The Link Capabilities register identifies PCI Express Link specific capabilities and CXL-RCRB link specific capabilities.</ipxact:description>
          <ipxact:addressOffset>0x307c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_speed</ipxact:name>
            <ipxact:description>Max Link Speed.
This field indicates the maximum Link speed of the associated Port.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed. All encodings other than the defined encodings are reserved.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x4</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_max_link_width</ipxact:name>
            <ipxact:description>Maximum Link Width.
This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes routed to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
All encodings other than the defined encodings are reserved.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x04</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_support</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Support.
This field indicates the level of ASPM supported on the given PCI Express Link. For more information on ASPM support requirements, see section 5.4.1 of PCI Express Base Specification.
Multi-Function devices associated with an Upstream Port must report the same value in this field for all functions.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x3</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l0s_exit_latency</ipxact:name>
            <ipxact:description>L0s Exit Latency.
This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from L0s to L0. If L0s is not supported, the value is undefined; however, see the Implementation Note Potential Issues With Legacy Software When L0s is Not Supported in section 5.4.1.1 of PCI Express Base Specification for the recommended value.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are two each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG) determines which one is used by the controller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the controller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the controller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_l1_exit_latency</ipxact:name>
            <ipxact:description>L1 Exit Latency. This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from ASPM L1 to L0. If ASPM L1 is not supported, the value is undefined.

Note: Exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.

Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.

There are two each of these register fields, this one and a shadow one at the same address.
The Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG) determines which one is used by the controller and which one is accessed by a read request.
Common Clock operation is supported (possible) in the controller when one or more of the following expressions is true:
 - CX_NFTS !=CX_COMM_NFTS
 - DEFAULT_L0S_EXIT_LATENCY !=DEFAULT_COMM_L0S_EXIT_LATENCY
 - DEFAULT_L1_EXIT_LATENCY !=DEFAULT_COMM_L1_EXIT_LATENCY
Common Clock operation is enabled in the controller when you set the Common Clock bit (PCIE_CAP_COMMON_CLK_CONFIG) of the Link Control Register (LINK_CONTROL_LINK_STATUS_REG).
The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the shadow field at this location.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x6</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_clock_power_man</ipxact:name>
            <ipxact:description>Clock Power Management.
For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) through the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2/L3 Ready Link states. A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.

L1 PM Substates defines other semantics for the CLKREQ# signal, which are managed independently of Clock Power Management.

This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.

For a Multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all functions of the Multi-Function device indicate a 1b in this bit. For ARI Devices, all Functions must indicate the same value in this bit.

For Downstream Ports, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_surprise_down_err_rep_cap</ipxact:name>
            <ipxact:description>Surprise Down Error Reporting Capable.
For a Downstream Port, this bit must be set if the component supports the optional capability of detecting and reporting a Surprise Down error condition.

For Upstream Ports and components that do not support this optional capability, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active_rep_cap</ipxact:name>
            <ipxact:description>Data Link Layer Link Active Reporting Capable.
For a Downstream Port, the controller hardwires this bit to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Control and Management State Machine. For a hot-plug capable Downstream Port (as indicated by the Hot-Plug Capable bit of the Slot Capabilities register) or a Downstream Port that supports Link speeds greater than 5.0 GT/s, the controller hardwires this bit to 1b.

For Upstream Ports and components that do not support this optional capability, the controller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_not_cap</ipxact:name>
            <ipxact:description>Link Bandwidth Notification Capability.
A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms. This capability is required for all Root Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.

This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_aspm_opt_compliance</ipxact:name>
            <ipxact:description>ASPM Optionality Compliance.
This field must be set to 1b in all functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.

Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_23</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_port_num</ipxact:name>
            <ipxact:description>Port Number.
This field indicates the PCI Express Port number for the given PCI Express Link.
Multi-Function Devices associated with an Upstream Port must report the same value in this field for all functions.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_link_control_link_status_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters.</ipxact:description>
          <ipxact:addressOffset>0x3080</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_active_state_link_pm_control</ipxact:name>
            <ipxact:description>Active State Power Management (ASPM) Control.
This field controls the level of ASPM enabled on the given PCI Express Link. See section 5.4.1.3 of PCI Express Base Specification for requirements on when and how to enable ASPM.

Note: L0s Entry Enabled enables the Transmitter to enter L0s. If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled from entering L0s (00b or 10b).

ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link. When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.

For Multi-Function Devices (including ARI Devices), it is recommended that software program the same value for this field in all Functions. For non-ARI Multi-Function Devices, only capabilities enabled in all Functions are enabled for the component as a whole.

For ARI Devices, ASPM Control is determined solely by the setting in Function0, regardless of Function 0's D-state. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.

Software must not enable L0s in either direction on a given Link unless components on both sides of the Link each support L0s; otherwise, the result is undefined.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_2</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_rcb</ipxact:name>
            <ipxact:description>Read Completion Boundary (RCB).


Root Ports:
Indicates the RCB value for the Root Port. Refer to section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB.
The controller hardwires this bit for a Root Port and returns its RCB support capabilities.



Endpoints and Bridges:
Optionally set by configuration software to indicate the RCB value of the Root Port Upstream from the Endpoint or Bridge. Refer to Section 2.3.1.1 of PCI Express Base Specification for the definition of the parameter RCB is same as Root Port.
Configuration software must only set this bit if the Root Port Upstream from the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
For functions that do not implement this feature, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_disable</ipxact:name>
            <ipxact:description>Link Disable.
This bit disables the Link by directing the LTSSM to the Disabled state when set; this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Writes to this bit are immediately reflected in the value read from the bit, regardless of actual Link state.

After clearing this bit, software must honor timing requirements defined in Section 6.6.1 with respect to the first Configuration Read following a Conventional Reset.

In a DSP that supports crosslink, the controller gates the write value with the CROSS_LINK_EN field in PORT_LINK_CTRL_OFF.


Note: The access attributes of this field are as follows:
 - Wire: CX_CROSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CROSS_LINK_EN=1||CX_CROSSLINK_ENABLE=0 &amp;&amp; dsp=1 ? RW : RO 
 - Dbi: CX_CROSSLINK_ENABLE=1 &amp;&amp; PORT_LINK_CTRL_OFF.CROSS_LINK_EN=1||CX_CROSSLINK_ENABLE=0 &amp;&amp; dsp=1? RW : RO</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retrain_link</ipxact:name>
            <ipxact:description>Retrain Link.
A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. If the Port is in DPC when a write of 1b to this bit occurs, the result is undefined. Reads of this bit always return 0b.

It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in progress.

This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

This bit always returns 0b when read.


Note: The access attributes of this field are as follows:
 - Wire: see description 
 - Dbi: see description</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_common_clk_config</ipxact:name>
            <ipxact:description>Common Clock Configuration. When set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.

A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchronous reference clock.

For non-ARI Multi-Function Devices, software must program the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.

For ARI Devices, Common Clock Configuration is determined solely by the setting in Function 0. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.

Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.

After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_extended_synch</ipxact:name>
            <ipxact:description>Extended Synch. When set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state (see section 4.2.4.5 of PCI Express Base Specification) and when in the Recovery state (see section 4.2.6.4.1 of PCI Express Base Specification). This mode provides external devices (for example, logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.

For Multi-Function devices if any function has this bit set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_en_clk_power_man</ipxact:name>
            <ipxact:description>Enable Clock Power Management.
Applicable only for Upstream Ports and with form factors that support a Clock Request (CLKREQ#) mechanism, this bit operates as follows:
For a non-ARI Multi-Function Device, power-management-configuration software must only Set this bit if all Functions of the Multi-Function Device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.

For ARI Devices, Clock Power Management is enabled solely by the setting in Function 0. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.
The CLKREQ# signal may also be controlled through the L1 PM Substates mechanism. Such control is not affected by the setting of this bit.

For Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register), the controller hardwires this bit to 0b.

The write value is gated with the PCIE_CAP_CLOCK_POWER_MAN field in LINK_CAPABILITIES_REG.

Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? RWS : ROS 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_CLOCK_POWER_MAN ? RWS : ROS 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_int_en</ipxact:name>
            <ipxact:description>Link Bandwidth Management Interrupt Enable. When set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO  
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_int_en</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Management Interrupt Enable.
When set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been set. The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO 
 - Dbi: LINK_CAPABILITIES_REG.PCIE_CAP_LINK_BW_NOT_CAP ? RW : RO</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_12</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_nego_link_width</ipxact:name>
            <ipxact:description>Negotiated Link Width. This field indicates the negotiated width of the given PCI Express Link.
All encodings other than the defined encodings are reserved.
The value in this field is undefined when the Link is not up.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_training</ipxact:name>
            <ipxact:description>Link Training. This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches, and the controller hardwires it to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_slot_clk_config</ipxact:name>
            <ipxact:description>Slot Clock Configuration. This bit indicates that the component uses the same physical reference clock that the platform provides on the connector. If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.

For a Multi-Function Device, each Function must report the same value for this bit.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_dll_active</ipxact:name>
            <ipxact:description>Data Link Layer Link Active. This bit indicates the status of the Data Link Control and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.

This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, the controller hardwires it to 0b.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_bw_man_status</ipxact:name>
            <ipxact:description>Link Bandwidth Management Status. This bit is set by hardware to indicate that either of the following has occurred without the Port transitioning through DL_Down status:

 A Link retraining has completed following a write of 1b to the Retrain Link bit.

Note: This bit is set following any write of 1b to the Retrain Link bit, including when the Link is in the process of retraining for some other reason.

 Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either through an LTSSM timeout or a higher level process.

 This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.
The default value of this bit is 0b.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_auto_bw_status</ipxact:name>
            <ipxact:description>Link Autonomous Bandwidth Status. This bit is set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning through DL_Down status, for reasons other than to attempt to correct unreliable Link operation.

This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.

The write value is gated with the PCIE_CAP_LINK_BW_NOT_CAP field in LINK_CAPABILITIES_REG.

This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

For functions that do not implement the Link Bandwidth Notification Capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: RSVDP 
 - Dbi: R</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_device_capabilities2_reg</ipxact:name>
          <ipxact:description>This register identifies PCI Express device specific capabilities; in addition to the Device Capabilities Register.</ipxact:description>
          <ipxact:addressOffset>0x3094</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_range</ipxact:name>
            <ipxact:description>Completion Timeout Ranges Supported. This field indicates device Function support for the optional Completion Timeout programmability mechanism. This mechanism allows system software to modify the Completion Timeout value.
This field is applicable only to Root Ports, Endpoints that issue Requests on their own behalf, and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express. For all other Functions this field is Reserved and must be hardwired to 0000b.
Four time value ranges are defined:
 - Range A: 50 us to 10 ms
 - Range B: 10 ms to 250 ms
 - Range C: 250 ms to 4 s
 - Range D: 4 s to 64 s
Bits are set according to the list below to show timeout value ranges supported.
All encodings other than the defined encodings are reserved.
It is strongly recommended that the Completion Timeout mechanism not expire in less than 10 ms.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0xf</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_cpl_timeout_disable_support</ipxact:name>
            <ipxact:description>Completion Timeout Disable Supported. A value of 1b indicates support for the Completion Timeout Disable mechanism.
The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.

This mechanism is optional for Root Ports.

For all other Functions this field is Reserved and the controller hardwires this bit to 0b.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ari_forward_support</ipxact:name>
            <ipxact:description>ARI Forwarding Supported. Applicable only to Switch Downstream Ports and Root Ports; must be 0b for other Function types. This bit must be set to 1b if a Switch Downstream Port or Root Port supports this optional capability. For more information, see section 6.13 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_atomic_routing_supp</ipxact:name>
            <ipxact:description>AtomicOp Routing Supported. Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_32_atomic_cpl_supp</ipxact:name>
            <ipxact:description>32-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_64_atomic_cpl_supp</ipxact:name>
            <ipxact:description>64-bit AtomicOp Completer Supported. Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.  For more information on additional RC requirements, see section 6.15.3.1 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_128_cas_cpl_supp</ipxact:name>
            <ipxact:description>128-bit CAS Completer Supported. Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability. For more information, see section 6.15 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_no_ro_en_pr2pr_par</ipxact:name>
            <ipxact:description>No RO-enabled PR-PR Passing. If this bit is set, the routing element never carries out the passing permitted by Table 2-39 of PCI Express Base Specification entry A2b that is associated with the Relaxed Ordering Attribute field being Set.
This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
For all other functions, this bit must be 0b.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_ltr_supp</ipxact:name>
            <ipxact:description>LTR Mechanism Supported. A value of 1b indicates support for the optional Latency Tolerance Reporting (LTR) mechanism.
Root Ports, Switches and Endpoints are permitted to implement this capability.
For a Multi-Function Device associated with an Upstream Port, each Function must report the same value for this bit.
For Bridges and other Functions that do not implement this capability, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(Sticky) else R(Sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_0</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 0.
Value of this bit along with TPH Completer Supported Bit 1 indicates Completer support for TPH or Extended TPH. Applicable only to Root Ports and Endpoints. For all other Functions, this field is Reserved.
For more information, see section 6.17 of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tph_cmplt_support_1</ipxact:name>
            <ipxact:description>TPH Completer Supported Bit 1.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_ln_sys_cls</ipxact:name>
            <ipxact:description>LN System CLS.
Applicable only to Root Ports and RCRBs; must be 00b for all other Function types. This field indicates if the Root Port or RCRB supports LN protocol as an LN Completer, and if so, what cacheline size is in effect.
All encodings other than the defined encodings are reserved.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_comp_support</ipxact:name>
            <ipxact:description>10-Bit Tag Completer Supported. If this bit is set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_10_bit_tag_req_support</ipxact:name>
            <ipxact:description>10-Bit Tag Requester Supported. If this bit is set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.

This bit must not be set if the 10-Bit Tag Completer Supported bit is clear.

Note: 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Control 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. For more information, see section 2.2.6.2. of PCI Express Base Specification.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_extnd_fmt_support</ipxact:name>
            <ipxact:description>Extended Fmt Field Supported. If set, the Function supports the 3-bit definition of the Fmt field. If clear, the Function supports a 2-bit definition of the Fmt field. For more information, see section 2.2 of PCI Express Base Specification.

Must be set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.

It is strongly recommended that Functions support the 3-bit definition of the Fmt field.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_end2end_tlp_prfx_support</ipxact:name>
            <ipxact:description>End-End TLP Prefix Supported. Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
All Ports of a Switch must have the same value for this bit.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap2_cfg_max_end2end_tlp_prfxs</ipxact:name>
            <ipxact:description>Max End-End TLP Prefixes.
Indicates the maximum number of End-End TLP Prefixes supported by this Function. For more information,  see Section 2.2.10.2 of PCI Express Base Specification.
If End-End TLP Prefix Supported is clear, this field is RsvdP.

Different Root Ports that have the End-End TLP Prefix Supported bit set are permitted to report different values for this field.

For Switches where End-End TLP Prefix Supported is set, this field must be 00b indicating support for up to four End-End TLP Prefixes.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pcie_cap_link_control2_link_status2_reg</ipxact:name>
          <ipxact:description>This register controls and provides information about PCI Express Link specific parameters as well as RCRB link associated parameters; in addition to the Link Control and Link Status Register.</ipxact:description>
          <ipxact:addressOffset>0x30a0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pcie_cap_target_link_speed</ipxact:name>
            <ipxact:description>Target Link Speed. For Downstream Ports, this field sets an upper limit on Link operational speed by restricting the values advertised by the Upstream component in its training sequences.
The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
All encodings other than the defined encodings are reserved.

If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.

If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.

The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform/form factor requires a different default value.

For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.

For Upstream Ports, if the Enter Compliance bit is Clear, this field is permitted to have no effect.

For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this field to 0000b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_compliance</ipxact:name>
            <ipxact:description>Enter Compliance. Software is permitted to force a Link to enter Compliance mode (at the speed indicated in the Target Link Speed field and the de-emphasis/preset level indicated by the Compliance Preset/De-emphasis field) by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.

Default value of this bit following Fundamental Reset is 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_hw_auto_speed_disable</ipxact:name>
            <ipxact:description>Hardware Autonomous Speed Disable. When set, this bit disables hardware from changing the Link speed for device-specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_sel_deemphasis</ipxact:name>
            <ipxact:description>Selectable De-emphasis. When the Link is operating at 5.0 GT/s speed, this bit is used to control the transmit de-emphasis of the link in specific situations. For more information, see section 4.2.6 of PCI Express Base Specification.
When the Link is not operating at 5.0 GT/s speed, the setting of this bit has no effect. Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_tx_margin</ipxact:name>
            <ipxact:description>Transmit Margin, This field controls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration substate (see Chapter 4 of PCI Express Base Specification for details of how the Transmitter voltage level is determined in various states).
 - 001b-111b: As defined in Section 8.3.4 not all encodings are required to be implemented.
For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.

For components that support only the 2.5 GT/s speed, the controller hardwires this bit to 000b.

This field is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_enter_modified_compliance</ipxact:name>
            <ipxact:description>Enter Modified Compliance. When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance substate.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this bit only during debug or compliance testing. In all other cases, the system must ensure that this bit is set to the default value.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_sos</ipxact:name>
            <ipxact:description>Compliance SOS. When set to 1b, the LTSSM is required to send SKP Ordered Sets between sequences when sending the Compliance Pattern or Modified Compliance Pattern.

For a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this bit is of type RsvdP.

This bit is applicable when the Link is operating at 2.5 GT/s or 5.0 GT/s data rates only.

For components that support only the 2.5 GT/s speed, the controller hardwires this bit to 0b.


Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_compliance_preset</ipxact:name>
            <ipxact:description>Compliance Preset/De-emphasis.
 - For 8.0 GT/s and higher Data Rate: This field sets the Transmitter Preset in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b. The encodings are defined in section 4.2.3.2 of PCI Express Base Specification . Results are undefined if a reserved preset encoding is used when entering Polling.Compliance in this way.
 - For 5.0 GT/s Data Rate: This field sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
 - When the Link is operating at 2.5 GT/s, the setting of this field has no effect. Components that support only 2.5 GT/s speed are permitted to hardwire this field to 0000b.
 - For a Multi-Function Device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the component's Link behavior. In all other Functions of that device, this field is of type RsvdP.
 - This field is intended for debug and compliance testing purposes. System firmware and software is allowed to modify this field only during debug or compliance testing. In all other cases, the system must ensure that this field is set to the default value.
Note: The access attributes of this field are as follows:
 - Wire: R/W (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_curr_deemphasis</ipxact:name>
            <ipxact:description>Current De-emphasis Level. When the Link is operating at 5.0 GT/s speed, this bit reflects the level of de-emphasis.
The value in this bit is undefined when the Link is not operating at 5.0 GT/s speed.
Components that support only the 2.5 GT/s speed are permitted to hardwire this bit to 0b.
For components that support speeds greater than 2.5 GT/s, Multi-Function Devices associated with an Upstream Port must report the same value in this field for all Functions of the Port.

 In C-PCIe mode, its contents are derived by sampling the PIPE.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Complete. When set to 1b, this bit indicates that the Transmitter Equalization procedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p1</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 1 Successful. When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p2</ipxact:name>
            <ipxact:description>Equalization 8.0 GT/s Phase 2 Successful. When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_eq_cpl_p3</ipxact:name>
            <ipxact:description>EEqualization 8.0 GT/s Phase 3 Successful. When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided in section 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_link_eq_req</ipxact:name>
            <ipxact:description>Link Equalization Request 8.0 GT/s. This bit is set by hardware to request the 8.0 GT/s Link equalization process to be performed on the Link. For more information, see sections 4.2.3 and 4.2.6.4.2 of PCI Express Base Specification.

For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. For components that only support speeds below 8.0 GT/s, the controller hardwires this bit to 0b.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_retimer_pre_det</ipxact:name>
            <ipxact:description>Retimer Presence Detected. When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1 of PCI Express Base Specification.

This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

For Ports that have the Retimer Presence Detect Supported bit set to 0b, the controller hardwires this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_two_retimers_pre_det</ipxact:name>
            <ipxact:description>Two Retimers Presence Detected. When set to 1b, this bit indicates that two Retimers were present during the most recent Link negotiation. For more information, see section 4.2.6.3.5.1  of PCI Express Base Specification.

This bit is required for Ports that have the Two Retimers Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.

Ports that have the Two Retimers Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.

For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and RsvdZ in all other Functions.


Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pcie_cap_crosslink_resolution</ipxact:name>
            <ipxact:description>Crosslink Resolution. This field indicates the state of the Crosslink negotiation. It must be implemented if Crosslink Supported is Set and the Port supports 16.0 GT/s or higher data rate. It is permitted to be implemented in all other Ports. If Crosslink Supported is clear, the controller hardwires this field to 01b or 10b.
Once a value of 01b or 10b is returned in this field, that value must continue to be returned while the Link is Up.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_26</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_msix_cap_pci_msix_cap_id_next_ctrl_reg</ipxact:name>
          <ipxact:description>This Register holds MSI-X Capability ID, Next Capability pointer. It also controls the MSI-X behaviour.</ipxact:description>
          <ipxact:addressOffset>0x30b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_cap_next_offset</ipxact:name>
            <ipxact:description>MSI-X Next Capability Pointer.
This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_size</ipxact:name>
            <ipxact:description>MSI-X Table Size.
System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Size (PCI_MSIX_TABLE_SIZE field in SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_SIZE field in the PF PCI_MSIX_CAP_ID_NEXT_CTRL_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_function_mask</ipxact:name>
            <ipxact:description>Function Mask.
If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
If Clear, each vector's Mask bit determines whether the vector is masked or not.
Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_enable</ipxact:name>
            <ipxact:description>MSI-X Enable.
If Set and the MSI Enable bit in the MSI Message Control Register for MSI is Clear, the Function is permitted to use MSI-X to request service and is prohibited from using INTx interrupts (if implemented).
System configuration software Sets this bit to enable MSI-X. A device driver is prohibited from writing this bit to mask a Function's service request.
If Clear, the Function is prohibited from using MSI-X to request service.</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_msix_cap_msix_table_offset_reg</ipxact:name>
          <ipxact:description>This register provides Table BIR and MSI-x Table offset select.</ipxact:description>
          <ipxact:addressOffset>0x30b4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_bir</ipxact:name>
            <ipxact:description>MSI-X Table BAR Indicator Register Field.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI , is used to map the Function's MSI-X Table into Memory Space.
All encodings other than the defined encodings are reserved.
For a 64-bit Base Address Register , the Table BIR indicates the lower DWORD. For Functions with Type 1 Configuration Space headers, BIR values 2 through 5 are also Reserved.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table BAR Indicator Register (PCI_MSIX_BIR field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_BIR field in the PF MSIX_TABLE_OFFSET_REG register.

Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_table_offset</ipxact:name>
            <ipxact:description>MSI-X Table Offset.
Used as an offset from the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X Table.
The lower 3 Table BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X Table Offset (PCI_MSIX_TABLE_OFFSET field in SHADOW_MSIX_TABLE_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_TABLE_OFFSET field in the PF MSIX_TABLE_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_msix_cap_msix_pba_offset_reg</ipxact:name>
          <ipxact:description>This register provides PBA Offset and PBA BIR value.</ipxact:description>
          <ipxact:addressOffset>0x30b8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_bir</ipxact:name>
            <ipxact:description>MSI-X PBA BIR.
This field indicates which one of a Function's Base Address Registers , located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
The PBA BIR value definitions are identical to those for the Table BIR .

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA BIR (PCI_MSIX_PBA_BIR field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_BIR field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>pci_msix_pba_offset</ipxact:name>
            <ipxact:description>MSI-X PBA Offset.
Used as an offset from the address contained by one of the Function's Base Address Registers to point to the base of the MSI-X PBA.
The lower 3 PBA BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

SRIOV Note: All VFs in a single PF have the same value for MSI-X PBA Offset (PCI_MSIX_PBA_OFFSET field in SHADOW_MSIX_PBA_OFFSET_REG). To write this common value, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PCI_MSIX_PBA_OFFSET field in the PF MSIX_PBA_OFFSET_REG register.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000002</ipxact:value>
                <ipxact:mask>0x1fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_aer_cap_aer_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>Advanced Error Reporting Extended Capability Header provides information about Capability ID, Version, and next offset.</ipxact:description>
          <ipxact:addressOffset>0x3100</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field must be 2h if the End-End TLP Prefix Supported bit is set and must be 1h or 2h otherwise.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x2</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and
thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sn_cap_sn_base</ipxact:name>
          <ipxact:description>The Device Serial Number Extended Capability is an optional Extended Capability that may be implemented by any PCI Express device Function.
This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x3164</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sn_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sn_cap_ser_num_reg_dw_1</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x3168</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_1_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 1).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sn_cap_ser_num_reg_dw_2</ipxact:name>
          <ipxact:description>The Serial Number register is a 64-bit field that contains the IEEE defined 64-bit extended unique identifier.</ipxact:description>
          <ipxact:addressOffset>0x316c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sn_ser_num_reg_2_dw</ipxact:name>
            <ipxact:description>IEEE 64 bit Device Serial Number (DW 2).
This field contains the IEEE defined 64-bit Extended Unique Identifier [EUI-64].
This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000000</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_ari_cap_ari_base</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability version, and Next offset of Capability structure.</ipxact:description>
          <ipxact:addressOffset>0x3174</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
This field is depends on the version of specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ari_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_ari_cap_cap_reg</ipxact:name>
          <ipxact:description>This Register provides information regarding supported ARI Capability, and controls that capability.</ipxact:description>
          <ipxact:addressOffset>0x3178</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ari_next_fun_num</ipxact:name>
            <ipxact:description>Next Function Number.
This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions.
Function 0 starts this linked list of Functions.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1 ) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_base_reg</ipxact:name>
          <ipxact:description>SR-IOV Extended Capability Header provides information about Capability ID, Version, and Next Offset.</ipxact:description>
          <ipxact:addressOffset>0x31e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This bit depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_total_vfs_initial_vfs_reg</ipxact:name>
          <ipxact:description>This Register provides value of TotalVFs and InitialVFs.</ipxact:description>
          <ipxact:addressOffset>0x31ec</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_initial_vfs</ipxact:name>
            <ipxact:description>InitialVFs.
InitialVFs indicates to SR-PCIM the number of VFs that are initially associated with the PF. The minimum value of InitialVFs is 0.
For Devices operating in Single-Root mode, this field is HwInit and must contain the same value as TotalVFs. And for Devices operating in Multi-Root mode, the value of this field may be changed by MRPCIM when VF Enable is Clear.
If VF Migration Enable is Set and VF Enable is Cleared and then Set, the value of InitialVFs may change. This is necessary since some VFs may have been migrated to other PFs and may no longer be available to this PF.
There are two InitialVFs registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit (SRIOV_ARI_CAPABLE_HIER) of the PF0 SR-IOV Control Register (STATUS_CONTROL_REG) determines which one is used by the controller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x003f</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_vf_offset_position</ipxact:name>
          <ipxact:description>This Register contains value of VF Stride and First VFs Offset.</ipxact:description>
          <ipxact:addressOffset>0x31f4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_offset</ipxact:name>
            <ipxact:description>First VF Offset.
First VF Offset is a constant and defines the Routing ID offset of the first VF that is associated with the PF that contains this Capability structure.
The first VF's 16-bit Routing ID is calculated by adding the contents of this field to the Routing ID of the PF containing this field ignoring any carry, using unsigned, 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
First VF Offset is unused if NumVFs is 0. If NumVFs is greater than 0, First VF Offset must not be zero.
There are two First VF Offset registers at this address location; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Control Register determines which one is used by the controller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_stride</ipxact:name>
            <ipxact:description>VF Stride.
VF Stride defines the Routing ID offset from one VF to the next one for all VFs associated with the PF that contains this Capability structure.
The next VF's 16-bit Routing ID is calculated by adding the contents of this field to the Routing ID of the current VF, ignoring any carry, using unsigned 16-bit arithmetic.
This field may change value when the lowest-numbered PF's ARI Capable Hierarchy value changes or when this PF's NumVFs value changes.
VF Stride is unused if NumVFs is 0 or 1. If NumVFs is greater than 1, VF Stride must not be zero.
There are two VF Stride registers; one each for ARI Capable and non-ARI Capable Hierarchies. The ARI Capable Hierarchy bit of the PF0 SR-IOV Control Register. determines which one is used by the controller when SR-IOV is being used, and which one is accessed by a read request. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_vf_device_id_reg</ipxact:name>
          <ipxact:description>VF Device ID may be different from the PF Device ID. A VF Device ID must be managed by the vendor. The vendor must ensure that the chosen VF Device ID does not result in the use of an incompatible device driver.</ipxact:description>
          <ipxact:addressOffset>0x31f8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_vf_device_id</ipxact:name>
            <ipxact:description>VF Device ID.
This field contains the Device ID that should be presented for every VF to the SI.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1172</ipxact:value>
                <ipxact:mask>0xffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sup_page_sizes_reg</ipxact:name>
          <ipxact:description>This Register provides the page sizes supported by the PF.
This PF supports a page size of 2^(n+12), if bit n is Set. For example, if bit 0 is Set, the PF supports 4-KB page sizes.</ipxact:description>
          <ipxact:addressOffset>0x31fc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>sriov_sup_page_size</ipxact:name>
            <ipxact:description>Page Sizes Supported by VF.
This field indicates the page sizes supported by the PF. This PF supports a page size of 2^(n +12) if bit n is Set.
For example, if bit 0 is Set, the PF supports 4-KB page sizes. PFs are required to support 4-KB, 8-KB, 64-KB, 256-KB, 1-MB, and 4-MB page sizes. All other page sizes are optional.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000553</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_bar0_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR0 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x3204</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_type</ipxact:name>
            <ipxact:description>VF BAR0 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_prefetch</ipxact:name>
            <ipxact:description>VF BAR0 Prefetchable.
This field provides whether BAR0 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar0_start</ipxact:name>
            <ipxact:description>VF BAR0 Base Address.
This field provides starting address of BAR0.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_bar1_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR1 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x3208</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar1</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_type</ipxact:name>
            <ipxact:description>VF BAR1 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_prefetch</ipxact:name>
            <ipxact:description>VF BAR1 Prefetchable.
This field provides whether BAR1 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar1_start</ipxact:name>
            <ipxact:description>VF BAR1 Base Address.
This field provides starting address of BAR1.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_bar2_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR2 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x320c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_type</ipxact:name>
            <ipxact:description>VF BAR2 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_prefetch</ipxact:name>
            <ipxact:description>VF BAR2 Prefetchable.
This field provides whether BAR2 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar2_start</ipxact:name>
            <ipxact:description>VF BAR2 Base Address.
This field provides starting address of BAR2.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_bar3_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR3 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x3210</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_type</ipxact:name>
            <ipxact:description>VF BAR3 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_prefetch</ipxact:name>
            <ipxact:description>VF BAR3 Prefetchable.
This field provides whether BAR3 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar3_start</ipxact:name>
            <ipxact:description>VF BAR3 Base Address.
This field provides starting address of BAR3.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_bar4_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR4 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x3214</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_type</ipxact:name>
            <ipxact:description>VF BAR4 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_prefetch</ipxact:name>
            <ipxact:description>VF BAR4 Prefetchable.
This field provides whether BAR4 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar4_start</ipxact:name>
            <ipxact:description>VF BAR4 Base Address.
This field provides starting address of BAR4.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_sriov_cap_sriov_bar5_reg</ipxact:name>
          <ipxact:description>This register is used to define the BAR5 contents (in VF's Type-1 header) for all VFs in this PF.
The actual BARs in the VF's Type-1 header are RO and are derived by the controller from the SRIOV_VF_BAR*_START field in this register in conjunction with SRIOV_VF_OFFSET and SRIOV_VF_STRIDE.
The mask for this BAR exists (if implemented) as a shadow register at this address. The assertion of CS2 (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) is required to write to the second register at this address.</ipxact:description>
          <ipxact:addressOffset>0x3218</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_sriov_vf_bar5</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_type</ipxact:name>
            <ipxact:description>VF BAR5 32 or 64 bit.
This field provides that BAR is 32 bit wide or 64 bit wide.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_prefetch</ipxact:name>
            <ipxact:description>VF BAR5 Prefetchable.
This field provides whether BAR5 is Prefetchable or not.
If this field is set, Data is Prefetchable for this BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R 
 - Dbi: If enabled and (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>sriov_vf_bar5_start</ipxact:name>
            <ipxact:description>VF BAR5 Base Address.
This field provides starting address of BAR5.


Note: The access attributes of this field are as follows:
 - Wire: R/W 
 - Dbi: R/W</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0000000</ipxact:value>
                <ipxact:mask>0xfffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_tph_cap_tph_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides Capability Id, Capability Revision, and Next offset of structure Extended Capability Register.</ipxact:description>
          <ipxact:addressOffset>0x3220</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_cap_ver</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_next_ptr</ipxact:name>
            <ipxact:description>Next Capability Pointer.
This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_tph_cap_tph_req_cap_reg_reg</ipxact:name>
          <ipxact:description>This register gives information about No ST mode support, Intrrupt Vector mode, Device specific mode, Extended TPH requester support, ST table location and size.

SRIOV Note: All VFs in a single PF have the same values for VF_TPH_REQ_CAP_REG_REG. To write this common register, you must perform a
DBI_CS2 write (that is, assert the dbi_cs2 input, or the CS2 address bit for the AXI bridge) while accessing the PF TPH_REQ_CAP_REG_REG register.</ipxact:description>
          <ipxact:addressOffset>0x3224</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>tph_req_no_st_mode</ipxact:name>
            <ipxact:description>No ST Mode Supported.
set indicates that the Function supports the No ST Mode of operation.
This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_int_vec</ipxact:name>
            <ipxact:description>Interrupt Vector Mode Supported.
If set indicates that the Function supports the Interrupt Vector Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_device_spec</ipxact:name>
            <ipxact:description>Device Specific Mode Supported.
If set indicates that the Function supports the Device Specific Mode of operation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_extended_tph</ipxact:name>
            <ipxact:description>Extended TPH Requester Supported.
If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix .


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_0</ipxact:name>
            <ipxact:description>ST Table Location Bit 0.
If this field is set, ST Table is Located in the TPH Requester Extended Capability structure.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_loc_1</ipxact:name>
            <ipxact:description>ST Table Location Bit 1.
If this field is set, ST Table is Located in the MSI-X Table.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_11</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>tph_req_cap_st_table_size</ipxact:name>
            <ipxact:description>ST Table Size.
This field indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1.
For example, a returned value of 000 0000 0011b indicates a table size of four entries.
There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Extended Capability structure. When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_27</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_ats_cap_ats_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides value of Capability ID, Capability version, and next offset of Extended capability structure.</ipxact:description>
          <ipxact:addressOffset>0x32ac</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_ats_cap_ats_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register provides value of Invalidate queue depth, Page alignment request, and Global Invalidate support. It also controls Cache translation and Smallest Translate Unit.</ipxact:description>
          <ipxact:addressOffset>0x32b0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>invalidate_q_depth</ipxact:name>
            <ipxact:description>Invalidate Queue Depth.
The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>page_aligned_req</ipxact:name>
            <ipxact:description>Page Aligned Request.
If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended.
This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>global_inval_spprtd</ipxact:name>
            <ipxact:description>Global Invalidate Supported.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0x1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_acs_cap_acs_cap_hdr_reg</ipxact:name>
          <ipxact:description>This register provides capability ID, capability version, and next offset value.</ipxact:description>
          <ipxact:addressOffset>0x32bc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field indicates the version of present capability structure. It is a PCI-SIG defined version number.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Extended Capability structure or 000h, if no other items exist in the linked list of Capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_acs_cap_acs_capabilities_ctrl_reg</ipxact:name>
          <ipxact:description>This register is Access Control Services Capability and Control Register.</ipxact:description>
          <ipxact:addressOffset>0x32c0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>acs_src_valid</ipxact:name>
            <ipxact:description>ACS Source Validation Capable.
Required for Root Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Source Validation.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_at_block</ipxact:name>
            <ipxact:description>ACS Translation Blocking Capable.
Required for Root Ports and Switch Downstream Ports; Otherwise it is hardwired to 0b. If 1b, indicates that the component implements ACS Translation Blocking.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_req_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Request Redirect Capable.
Required for Root Ports that support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_cpl_redirect</ipxact:name>
            <ipxact:description>ACS Peer-to-peer Completion Redirect Capable.
Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_usp_forwarding</ipxact:name>
            <ipxact:description>ACS Upstream forwarding Capable.
Required for Root Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_p2p_egress_control</ipxact:name>
            <ipxact:description>ACS Egress Control.
Optional for Root Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Control.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_direct_translated_p2p</ipxact:name>
            <ipxact:description>ACS Direct Translated Peer-to-Peer Capable.
Required for Root Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; the controller must be hardwired to 0b otherwise.
If 1b, indicates that the component implements ACS Direct Translated P2P.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_7</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>acs_egress_ctrl_size</ipxact:name>
            <ipxact:description>ACS Egress control vector size.
Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Control Vector; the encoding 00h indicates 256 bits.
If the ACS_P2P_EGRESS_CONTROL bit is 0b, the value of the size field is undefined, and the Egress Control Vector register is not required to be present.


Note: The access attributes of this field are as follows:
 - Wire: HWINIT 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x08</ipxact:value>
                <ipxact:mask>0xff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_prs_ext_cap_prs_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability version, and Next Offset value of Page Request Service Capability Structure.</ipxact:description>
          <ipxact:addressOffset>0x32c8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_cap_version</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
This field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>prs_next_offset</ipxact:name>
            <ipxact:description>Page Request Services PCI Express Extended Capability Next Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_prs_ext_cap_prs_req_capacity_reg</ipxact:name>
          <ipxact:description>This register contains the number of outstanding page request messages the associated Page Request Interface physically supports.</ipxact:description>
          <ipxact:addressOffset>0x32d0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>prs_outstanding_capacity</ipxact:name>
            <ipxact:description>Page Request Services Outstanding Capacity value.
This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W else R 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00000001</ipxact:value>
                <ipxact:mask>0xffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pasid_cap_pasid_ext_cap_hdr_reg</ipxact:name>
          <ipxact:description>This Register provides Capability ID, Capability Version, and Next offset of capability structure.</ipxact:description>
          <ipxact:addressOffset>0x32e0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_pasid_cap_pasid_cap_cntrl_reg</ipxact:name>
          <ipxact:description>This register provides value of capability like Execute Permission support, Privileged Mode support, and width of PASID. Also this register controls PASID Enable, Execute Permission Enable, as well as Privileged mode Enable.</ipxact:description>
          <ipxact:addressOffset>0x32e4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>rsvdp_0</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>execute_permission_supported</ipxact:name>
            <ipxact:description>Execute Permission Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>privileged_mode_supported</ipxact:name>
            <ipxact:description>Privileged Mode Supported (endpoints only).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0x1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_3</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>max_pasid_width</ipxact:name>
            <ipxact:description>Max PASID Width.
Indicates the width of the PASID field supported by the Endpoint. The value n indicates support for PASID values 0 through (2^n) - 1 (inclusive). This field must be between '0' and '20' (inclusive).


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: R/W (sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x00</ipxact:value>
                <ipxact:mask>0x1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>rsvdp_13</ipxact:name>
            <ipxact:description>Reserved for future use.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_ras_des_cap_ras_des_cap_header_reg</ipxact:name>
          <ipxact:description>The Vendor-Specific Extended Capability (VSEC Capability) is an optional Extended Capability that is permitted to be implemented by any PCI Express Function or RCRB.
This Register contains Capability Id, Capability Version and Next Offset value for Vendor-Specific Extended Capability.</ipxact:description>
          <ipxact:addressOffset>0x32e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap_version</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
Value of this field is depends on the version of the specification.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_ras_des_cap_event_counter_control_reg</ipxact:name>
          <ipxact:description>This is a viewport control register.
- Setting the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register determine the Event Counter data returned by the EVENT_COUNTER_DATA_REG viewport register.
- Setting the EVENT_COUNTER_ENABLE field in this register enables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Setting the EVENT_COUNTER_CLEAR field in this register clears the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
- Reading the EVENT_COUNTER_STATUS field in this register returns the Enable status of the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.</ipxact:description>
          <ipxact:addressOffset>0x32f0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>event_counter_enable</ipxact:name>
            <ipxact:description>Event Counter Enable.
Enables/disables the Event Counter selected by the EVENT_COUNTER_EVENT_SELECT and EVENT_COUNTER_LANE_SELECT fields in this register.
By default, all event counters are disabled.
You can enable/disable a specific Event Counter by writing the 'per event off' or 'per event on' codes.
You can enable/disable all event counters by writing the 'all on' or 'all off' codes.
The read value is always '0'.
For other values no change.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x0</ipxact:value>
                <ipxact:mask>0x7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>event_counter_event_select</ipxact:name>
            <ipxact:description>Event Counter Data Select.
This field in conjunction with the EVENT_COUNTER_LANE_SELECT field indexes the Event Counter data returned by the EVENT_COUNTER_DATA_REG register.
 - 27-24: Group number(4-bit: 0..0x7)
 - 23-16: Event number(8-bit: 0..0x13) within the Group
 - ..
For detailed definitions of Group number and Event number, see the RAS DES chapter in the Databook.

Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>pf3_vsecras_cap_rasdp_ext_cap_hdr_off</ipxact:name>
          <ipxact:description>This Register provides capability ID, Capability version, and Next capability offset for PCIe Extended capability stucture.</ipxact:description>
          <ipxact:addressOffset>0x33e8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>cap</ipxact:name>
            <ipxact:description>Capability Version.
This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
A version of the specification that changes the Extended Capability in a way that is not otherwise identifiable (e.g., through a new Capability field) is permitted to increment this field.
All such changes to the Capability structure must be software-compatible.
Software must check for Capability Version numbers that are greater than or equal to the highest number defined when the software is written, as Functions reporting any such Capability Version numbers will contain a Capability structure that is compatible with that piece of software.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x1</ipxact:value>
                <ipxact:mask>0xf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>next_offset</ipxact:name>
            <ipxact:description>Next Capability Offset.
This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.


Note: The access attributes of this field are as follows:
 - Wire: R (sticky) 
 - Dbi: if (DBI_RO_WR_EN == 1) then R/W(sticky) else R(sticky) 
Note: This register field is sticky.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>0x000</ipxact:value>
                <ipxact:mask>0xfff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressUnitBits>8</ipxact:addressUnitBits>
    </ipxact:memoryMap>
  </ipxact:memoryMaps>
  <ipxact:model>
    <ipxact:views>
      <ipxact:view>
        <ipxact:name>QUARTUS_SYNTH</ipxact:name>
        <ipxact:envIdentifier>:quartus.altera.com:</ipxact:envIdentifier>
        <ipxact:componentInstantiationRef>QUARTUS_SYNTH</ipxact:componentInstantiationRef>
      </ipxact:view>
    </ipxact:views>
    <ipxact:instantiations>
      <ipxact:componentInstantiation>
        <ipxact:name>QUARTUS_SYNTH</ipxact:name>
        <ipxact:moduleName>intel_pcie_gts</ipxact:moduleName>
        <ipxact:fileSetRef>
          <ipxact:localName>QUARTUS_SYNTH</ipxact:localName>
        </ipxact:fileSetRef>
      </ipxact:componentInstantiation>
    </ipxact:instantiations>
    <ipxact:ports>
      <ipxact:port>
        <ipxact:name>refclk0</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>i_syspll_c0_clk</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>i_ss_vccl_syspll_locked</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>i_flux_clk</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_n_in0</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_p_in0</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_n_out0</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_p_out0</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_n_in1</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_p_in1</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_n_out1</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_p_out1</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_n_in2</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_p_in2</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_n_out2</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_p_out2</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_n_in3</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rx_p_in3</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_n_out3</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>tx_p_out3</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pin_perst_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>i_gpio_perst0_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>coreclkout_hip_toapp</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_pin_perst_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_reset_status_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ninit_done</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_axi_st_clk</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_axi_lite_clk</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_axi_st_areset_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_axi_lite_areset_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_subsystem_cold_rst_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_subsystem_warm_rst_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_subsystem_cold_rst_ack_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_subsystem_warm_rst_ack_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_subsystem_rst_req</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_subsystem_rst_rdy</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_initiate_warmrst_req</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_initiate_rst_req_rdy</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_rx_tvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_st_rx_tready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_rx_tdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>255</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_rx_tkeep</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>31</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_rx_tlast</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_st_tx_tvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_tx_tready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_st_tx_tdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>255</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_st_tx_tkeep</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>31</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_st_tx_tlast</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_ctrlshadow_tvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_ctrlshadow_tdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>39</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_txcrdt_tvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_txcrdt_tdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>18</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_cplto_tvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_st_cplto_tdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>29</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_awvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_awready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_awaddr</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>19</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_wvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_wready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_wdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>31</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_wstrb</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>3</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_bvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_bready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_bresp</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>1</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_arvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_arready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_araddr</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>19</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_rvalid</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_lite_csr_rready</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_rdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>31</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_lite_csr_rresp</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>1</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_serr</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_dlup</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_linkup</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_surprise_down_err</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_ss_app_ltssmstate</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>5</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>p0_app_ss_st_rx_tuser_halt</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>2</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:wireTypeDefs>
            <ipxact:wireTypeDef>
              <ipxact:typeName>STD_LOGIC_VECTOR</ipxact:typeName>
              <ipxact:viewRef>QUARTUS_SYNTH</ipxact:viewRef>
            </ipxact:wireTypeDef>
          </ipxact:wireTypeDefs>
        </ipxact:wire>
      </ipxact:port>
    </ipxact:ports>
  </ipxact:model>
  <ipxact:vendorExtensions>
    <altera:entity_info>
      <ipxact:vendor>Intel Corporation</ipxact:vendor>
      <ipxact:library>pcie_ed_dut</ipxact:library>
      <ipxact:name>intel_pcie_gts</ipxact:name>
      <ipxact:version>3.0.0</ipxact:version>
    </altera:entity_info>
    <altera:altera_module_parameters>
      <ipxact:parameters>
        <ipxact:parameter parameterId="total_pcie_intf_hwtcl" type="int">
          <ipxact:name>total_pcie_intf_hwtcl</ipxact:name>
          <ipxact:displayName>Number of PCIe Interfaces</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="TILE" type="string">
          <ipxact:name>TILE</ipxact:name>
          <ipxact:displayName>PCIe Tile</ipxact:displayName>
          <ipxact:value>SM</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="tile_location_hwtcl" type="string">
          <ipxact:name>tile_location_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe Tile Location</ipxact:displayName>
          <ipxact:value>Left-Top</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="pcie_ss_func_mode_hwtcl" type="string">
          <ipxact:name>pcie_ss_func_mode_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe Functional Mode</ipxact:displayName>
          <ipxact:value>Power User</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="pcie_ss_profile_hwtcl" type="string">
          <ipxact:name>pcie_ss_profile_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe Profile</ipxact:displayName>
          <ipxact:value>Basic</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="axi_lite_clk_freq_user_hwtcl" type="int">
          <ipxact:name>axi_lite_clk_freq_user_hwtcl</ipxact:name>
          <ipxact:displayName>AXI-Lite Clock Frequency (in MHz)</ipxact:displayName>
          <ipxact:value>250</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="axi_st_clk_freq_user_hwtcl" type="string">
          <ipxact:name>axi_st_clk_freq_user_hwtcl</ipxact:name>
          <ipxact:displayName>AXI-ST Clock Frequency (in MHz)</ipxact:displayName>
          <ipxact:value>300MHz</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="MIF_DIRECTORY" type="string">
          <ipxact:name>MIF_DIRECTORY</ipxact:name>
          <ipxact:displayName>MIF_DIRECTORY</ipxact:displayName>
          <ipxact:value>../mif</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="DFL_MIF_DIRECTORY" type="string">
          <ipxact:name>DFL_MIF_DIRECTORY</ipxact:name>
          <ipxact:displayName>DFL_MIF_DIRECTORY</ipxact:displayName>
          <ipxact:value>../mif</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="DefaultMemory" type="int">
          <ipxact:name>DefaultMemory</ipxact:name>
          <ipxact:displayName>Do You want to specify the initial content of memory</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="pciess_perfmon_en_hwtcl" type="int">
          <ipxact:name>pciess_perfmon_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable HIP Interface Adaptor Debug Monitor</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="pciess_bp_debug_en_hwtcl" type="int">
          <ipxact:name>pciess_bp_debug_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable HIP Interface Adaptor Performance Monitor</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="mif_devatt_port0_lower32b" type="string">
          <ipxact:name>mif_devatt_port0_lower32b</ipxact:name>
          <ipxact:displayName>Device ATT Port0 Lower 32 bits MIF Filename</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="mif_devatt_port0_upper32b" type="string">
          <ipxact:name>mif_devatt_port0_upper32b</ipxact:name>
          <ipxact:displayName>Device ATT Port0 Upper 32 bits MIF Filename</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="mif_devatt_port1_lower32b" type="string">
          <ipxact:name>mif_devatt_port1_lower32b</ipxact:name>
          <ipxact:displayName>Device ATT Port1 Lower 32 bits MIF Filename</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="mif_devatt_port1_upper32b" type="string">
          <ipxact:name>mif_devatt_port1_upper32b</ipxact:name>
          <ipxact:displayName>Device ATT Port1 Upper 32 bits MIF Filename</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ctrl_shadow_en_hwtcl" type="int">
          <ipxact:name>core16_ctrl_shadow_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Control Shadow Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_comp_timeout_en_hwtcl" type="int">
          <ipxact:name>core16_comp_timeout_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Completion Timeout Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ceb_en_hwtcl" type="int">
          <ipxact:name>core16_ceb_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Configuration Extension Bus Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ceb_pf_std_cap_last_ptr_hwtcl" type="int">
          <ipxact:name>core16_ceb_pf_std_cap_last_ptr_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 Standard next address pointer for PF</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ceb_pf_ext_cap_last_ptr_hwtcl" type="int">
          <ipxact:name>core16_ceb_pf_ext_cap_last_ptr_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 Extended next address pointer for PF</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ceb_vf_std_cap_last_ptr_hwtcl" type="int">
          <ipxact:name>core16_ceb_vf_std_cap_last_ptr_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 Standard next address pointer for VF</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ceb_vf_ext_cap_last_ptr_hwtcl" type="int">
          <ipxact:name>core16_ceb_vf_ext_cap_last_ptr_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 Extended next address pointer for VF</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ceb_ack_latency_hwtcl" type="int">
          <ipxact:name>core16_ceb_ack_latency_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 CEB REQ to ACK Latency Timeout value</ipxact:displayName>
          <ipxact:value>100</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cii_en_hwtcl" type="int">
          <ipxact:name>core16_cii_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Configuration Intercept Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cii_ack_latency_hwtcl" type="int">
          <ipxact:name>core16_cii_ack_latency_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 CII REQ to ACK Latency Timeout value</ipxact:displayName>
          <ipxact:value>100</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtio_pci_cfg_acc_intf_en_hwtcl" type="int">
          <ipxact:name>core16_virtio_pci_cfg_acc_intf_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Virtio PCI CFG Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ptm_intf_en_hwtcl" type="int">
          <ipxact:name>core16_ptm_intf_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 PTM Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_device_att_en_hwtcl" type="int">
          <ipxact:name>core16_device_att_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Device Address Translation Table</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cpl_timeout_thru_axist_en_hwtcl" type="int">
          <ipxact:name>core16_cpl_timeout_thru_axist_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Completion Timeout through AXI-ST Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cpl_reordering_en_hwtcl" type="int">
          <ipxact:name>core16_cpl_reordering_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Completion Reordering</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_reorder_buff_size_hwtcl" type="int">
          <ipxact:name>core16_reorder_buff_size_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 Reorder Buffer Size (in KB)</ipxact:displayName>
          <ipxact:value>64</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dev_att_tx_routing_en_hwtcl" type="int">
          <ipxact:name>core16_dev_att_tx_routing_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Devatt TX Routing</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dwdn_msg_fwd_en_hwtcl" type="int">
          <ipxact:name>core16_dwdn_msg_fwd_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 Downstream Message Forwarding Enable</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_msi_msg_gen_en_hwtcl" type="int">
          <ipxact:name>core16_msi_msg_gen_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 MSI Message Generation</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_flr_req_drop_en_hwtcl" type="int">
          <ipxact:name>core16_flr_req_drop_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 FLR Request Drop</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_msix_en_table_hwtcl" type="int">
          <ipxact:name>core16_msix_en_table_hwtcl</ipxact:name>
          <ipxact:displayName>Enable GTS PCIe Intel FPGA IP Port 0 MSI-X Table</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_msix_table_size_hwtcl" type="int">
          <ipxact:name>core16_msix_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Port 0 MSI-X Table Size</ipxact:displayName>
          <ipxact:value>2048</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_msix_bir_hwtcl" type="int">
          <ipxact:name>core16_msix_bir_hwtcl</ipxact:name>
          <ipxact:displayName>MSI-X BIR</ipxact:displayName>
          <ipxact:value>5</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_msix_bar_offset_hwtcl" type="longint">
          <ipxact:name>core16_msix_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>MSI-X BAR Offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_msix_vector_alloc_hwtcl" type="string">
          <ipxact:name>core16_msix_vector_alloc_hwtcl</ipxact:name>
          <ipxact:displayName>MSI-X Vector Allocation Policy</ipxact:displayName>
          <ipxact:value>Static</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dm_adr_align_hwtcl" type="int">
          <ipxact:name>core16_dm_adr_align_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 Data Mover Address Aligned</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_mmio_adr_align_hwtcl" type="int">
          <ipxact:name>core16_mmio_adr_align_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 MMIO Address Aligned</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfl_en_hwtcl" type="int">
          <ipxact:name>core16_dfl_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe0 DFL VSEC Capability</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfl_total_hwtcl" type="int">
          <ipxact:name>core16_dfl_total_hwtcl</ipxact:name>
          <ipxact:displayName>Number of PCIe0 DFL</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_fid_hwtcl" type="int">
          <ipxact:name>core16_dfh_fid_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH FID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_major_ver_hwtcl" type="int">
          <ipxact:name>core16_dfh_major_ver_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH MAJOR VER</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_next_byte_offset_hwtcl" type="int">
          <ipxact:name>core16_dfh_next_byte_offset_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH NEXT BYTE OFFSET</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_end_hwtcl" type="int">
          <ipxact:name>core16_dfh_end_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH END</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_minor_rev_hwtcl" type="int">
          <ipxact:name>core16_dfh_minor_rev_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH MINOR REV</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_ver_hwtcl" type="int">
          <ipxact:name>core16_dfh_ver_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH VER</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_dfh_feature_type_hwtcl" type="int">
          <ipxact:name>core16_dfh_feature_type_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 DFH FEATURE TYPE</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_inst_id_hwtcl" type="int">
          <ipxact:name>core16_inst_id_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 INST ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_ST_readyLatency_hwtcl" type="int">
          <ipxact:name>core16_ST_readyLatency_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-ST Interface Latency</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_Header_Packing_scheme_hwtcl" type="string">
          <ipxact:name>core16_Header_Packing_scheme_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-ST Interface Data Packing Scheme</ipxact:displayName>
          <ipxact:value>Simple</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_segment_size_hwtcl" type="int">
          <ipxact:name>core16_segment_size_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-ST Segment Size (in Byte)</ipxact:displayName>
          <ipxact:value>16</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_LiteMstrDWD_byte_hwtcl" type="int">
          <ipxact:name>core16_LiteMstrDWD_byte_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-Lite Initiator Interface Data Bus Width (in Byte)</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_LiteMstrAWD_byte_hwtcl" type="int">
          <ipxact:name>core16_LiteMstrAWD_byte_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-Lite Initiator Interface Address Bus Width (in Byte)</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_LiteSlvDWD_byte_hwtcl" type="int">
          <ipxact:name>core16_LiteSlvDWD_byte_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-Lite Responder Interface Data Bus Width (in Byte)</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_LiteMstr_readyLatency_hwtcl" type="int">
          <ipxact:name>core16_LiteMstr_readyLatency_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 AXI-Lite Initiator Interface Latency</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="device_family" type="string">
          <ipxact:name>device_family</ipxact:name>
          <ipxact:displayName>device_family</ipxact:displayName>
          <ipxact:value>Agilex 5</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="base_device" type="string">
          <ipxact:name>base_device</ipxact:name>
          <ipxact:displayName>base_device</ipxact:displayName>
          <ipxact:value>SM7</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="part_trait_device" type="string">
          <ipxact:name>part_trait_device</ipxact:name>
          <ipxact:displayName>part_trait_device</ipxact:displayName>
          <ipxact:value>A5ED065BB32AE4SR0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="speed_grade" type="string">
          <ipxact:name>speed_grade</ipxact:name>
          <ipxact:displayName>speed_grade</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="design_environment" type="string">
          <ipxact:name>design_environment</ipxact:name>
          <ipxact:displayName>design_environment</ipxact:displayName>
          <ipxact:value>QSYS</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="device_die_revisions" type="string">
          <ipxact:name>device_die_revisions</ipxact:name>
          <ipxact:displayName>device_die_revisions</ipxact:displayName>
          <ipxact:value>MAIN_SM7_REVA</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="device_die_types" type="string">
          <ipxact:name>device_die_types</ipxact:name>
          <ipxact:displayName>device_die_types</ipxact:displayName>
          <ipxact:value>MAIN_SM7</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="device" type="string">
          <ipxact:name>device</ipxact:name>
          <ipxact:displayName>device</ipxact:displayName>
          <ipxact:value>A5ED065BB32AE4SR0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="top_topology_hwtcl" type="string">
          <ipxact:name>top_topology_hwtcl</ipxact:name>
          <ipxact:displayName>Hard IP Mode</ipxact:displayName>
          <ipxact:value>Gen4 x4 Interface 256 bit</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="virtual_tlp_bypass_en_user_hwtcl" type="int">
          <ipxact:name>virtual_tlp_bypass_en_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP-bypass mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="virtual_rp_ep_mode_hwtcl" type="string">
          <ipxact:name>virtual_rp_ep_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Port Mode</ipxact:displayName>
          <ipxact:value>Native Endpoint</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="xcvr_reconfig_hwtcl" type="int">
          <ipxact:name>xcvr_reconfig_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PMA registers access</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="debug_toolkit_hwtcl" type="int">
          <ipxact:name>debug_toolkit_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Debug Toolkit</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="enable_pciess_register_access_hwtcl" type="int">
          <ipxact:name>enable_pciess_register_access_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Subsystem register access via debug toolkit</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="g4_pld_clkfreq_user_hwtcl" type="string">
          <ipxact:name>g4_pld_clkfreq_user_hwtcl</ipxact:name>
          <ipxact:displayName>PLD clock frequency</ipxact:displayName>
          <ipxact:value>350MHz</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="g3_pld_clkfreq_user_hwtcl" type="string">
          <ipxact:name>g3_pld_clkfreq_user_hwtcl</ipxact:name>
          <ipxact:displayName>PLD clock frequency</ipxact:displayName>
          <ipxact:value>300MHz</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="virtual_sris_enable_en_hwtcl" type="int">
          <ipxact:name>virtual_sris_enable_en_hwtcl</ipxact:name>
          <ipxact:displayName>Enable SRIS mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="sup_mode_hwtcl" type="string">
          <ipxact:name>sup_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Sup Mode</ipxact:displayName>
          <ipxact:value>User Mode</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="pcie_link_en_hwtcl" type="int">
          <ipxact:name>pcie_link_en_hwtcl</ipxact:name>
          <ipxact:displayName>Extend PCIe Ports Settings</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="enable_test_intf_hwtcl" type="int">
          <ipxact:name>enable_test_intf_hwtcl</ipxact:name>
          <ipxact:displayName>enable_test_intf_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="enable_pcie_syspll_ed_hwtcl" type="int">
          <ipxact:name>enable_pcie_syspll_ed_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PCIe + SystemPLL example design</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="apps_type_hwtcl" type="int">
          <ipxact:name>apps_type_hwtcl</ipxact:name>
          <ipxact:displayName>Set apps_type_hwtcl BFM driver value</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="enable_example_design_sim_hwtcl" type="int">
          <ipxact:name>enable_example_design_sim_hwtcl</ipxact:name>
          <ipxact:displayName>Simulation</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="enable_example_design_synth_hwtcl" type="int">
          <ipxact:name>enable_example_design_synth_hwtcl</ipxact:name>
          <ipxact:displayName>Synthesis</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="select_design_example_rtl_lang_hwtcl" type="string">
          <ipxact:name>select_design_example_rtl_lang_hwtcl</ipxact:name>
          <ipxact:displayName>Generated file format</ipxact:displayName>
          <ipxact:value>Verilog</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="example_design_mode_hwtcl" type="string">
          <ipxact:name>example_design_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Based on parameterization, the generated example design will be</ipxact:displayName>
          <ipxact:value>PIO</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="bfm_drive_interface_clk_hwtcl" type="int">
          <ipxact:name>bfm_drive_interface_clk_hwtcl</ipxact:name>
          <ipxact:displayName>bfm_drive_interface_clk_hwtcl</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="bfm_drive_interface_pin_perst_hwtcl" type="int">
          <ipxact:name>bfm_drive_interface_pin_perst_hwtcl</ipxact:name>
          <ipxact:displayName>bfm_drive_interface_pin_perst_hwtcl</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="bfm_drive_interface_pipe_hwtcl" type="int">
          <ipxact:name>bfm_drive_interface_pipe_hwtcl</ipxact:name>
          <ipxact:displayName>bfm_drive_interface_pipe_hwtcl</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="bfm_drive_interface_test_hwtcl" type="int">
          <ipxact:name>bfm_drive_interface_test_hwtcl</ipxact:name>
          <ipxact:displayName>bfm_drive_interface_test_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="serial_sim_hwtcl" type="int">
          <ipxact:name>serial_sim_hwtcl</ipxact:name>
          <ipxact:displayName>serial_sim_hwtcl</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ed_generating_rp_hwtcl" type="int">
          <ipxact:name>ed_generating_rp_hwtcl</ipxact:name>
          <ipxact:displayName>ed_generating_rp_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="generating_ed_hwtcl" type="int">
          <ipxact:name>generating_ed_hwtcl</ipxact:name>
          <ipxact:displayName>generating_ed_hwtcl</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_rx_buffer_limit_ports_hwtcl" type="int">
          <ipxact:name>core16_enable_rx_buffer_limit_ports_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Rx buffer limit ports</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_maxpayload_size_hwtcl" type="int">
          <ipxact:name>core16_virtual_maxpayload_size_hwtcl</ipxact:name>
          <ipxact:displayName>Maximum payload size supported</ipxact:displayName>
          <ipxact:value>512</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pcie_cvp_attr_hwtcl" type="int">
          <ipxact:name>core16_pcie_cvp_attr_hwtcl</ipxact:name>
          <ipxact:displayName>Enable CVP (Intel VSEC)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_power_mgnt_intf_hwtcl" type="int">
          <ipxact:name>core16_enable_power_mgnt_intf_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Power Management Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_apps_ready_entr_l23_hwtcl" type="int">
          <ipxact:name>core16_enable_apps_ready_entr_l23_hwtcl</ipxact:name>
          <ipxact:displayName>Power Management Interface: Enable p0_apps_ready_entr_l23_i Port</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_apps_pm_xmt_turnoff_hwtcl" type="int">
          <ipxact:name>core16_enable_apps_pm_xmt_turnoff_hwtcl</ipxact:name>
          <ipxact:displayName>Power Management Interface: Enable p0_apps_pm_xmt_turnoff_i Port</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_app_xfer_pending_hwtcl" type="int">
          <ipxact:name>core16_enable_app_xfer_pending_hwtcl</ipxact:name>
          <ipxact:displayName>Power Management Interface: Enable p0_app_xfer_pending_i Port</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_legacy_int_hwtcl" type="int">
          <ipxact:name>core16_enable_legacy_int_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Legacy Interrupt</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_cpl_timeout_hwtcl" type="int">
          <ipxact:name>core16_enable_cpl_timeout_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Completion Timeout Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_cii_hwtcl" type="int">
          <ipxact:name>core16_enable_cii_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Configuration Intercept Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_prs_event_hwtcl" type="int">
          <ipxact:name>core16_enable_prs_event_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PRS Event</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_error_intf_hwtcl" type="int">
          <ipxact:name>core16_enable_error_intf_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Error Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_ecc_hwtcl" type="int">
          <ipxact:name>core16_enable_ecc_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ECC</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_hotplug_hwtcl" type="int">
          <ipxact:name>core16_enable_hotplug_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Hot Plug</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_cap_link_surprise_down_err_cap_user_hwtcl" type="int">
          <ipxact:name>core16_pf0_cap_link_surprise_down_err_cap_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Surprise Down Error</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar0_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar0_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>64-bit prefetchable memory</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar0_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar0_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>16</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar1_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar1_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar1_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar1_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar2_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar2_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar2_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar2_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar3_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar3_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar3_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar3_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar4_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar4_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar4_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar4_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar5_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar5_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_bar5_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf0_bar5_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_expansion_base_address_register_hwtcl" type="string">
          <ipxact:name>core16_pf0_expansion_base_address_register_hwtcl</ipxact:name>
          <ipxact:displayName>Expansion ROM Size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_rp_rom_bar_enabled_hwtcl" type="string">
          <ipxact:name>core16_pf0_rp_rom_bar_enabled_hwtcl</ipxact:name>
          <ipxact:displayName>core16_pf0_rp_rom_bar_enabled_hwtcl</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar0_type_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar0_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar0_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar0_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar1_type_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar1_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar1_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar1_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar2_type_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar2_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar2_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar2_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar3_type_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar3_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar3_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar3_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar4_type_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar4_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar4_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar4_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar5_type_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar5_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_bar5_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf0_sriov_vf_bar5_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar0_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar0_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar0_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar0_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar1_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar1_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar1_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar1_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar2_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar2_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar2_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar2_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar3_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar3_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar3_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar3_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar4_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar4_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar4_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar4_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar5_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar5_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_bar5_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf1_bar5_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_expansion_base_address_register_hwtcl" type="string">
          <ipxact:name>core16_pf1_expansion_base_address_register_hwtcl</ipxact:name>
          <ipxact:displayName>Expansion ROM Size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar0_type_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar0_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar0_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar0_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar1_type_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar1_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar1_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar1_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar2_type_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar2_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar2_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar2_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar3_type_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar3_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar3_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar3_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar4_type_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar4_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar4_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar4_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar5_type_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar5_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_bar5_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf1_sriov_vf_bar5_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar0_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar0_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar0_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar0_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar1_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar1_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar1_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar1_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar2_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar2_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar2_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar2_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar3_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar3_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar3_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar3_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar4_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar4_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar4_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar4_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar5_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar5_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_bar5_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf2_bar5_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_expansion_base_address_register_hwtcl" type="string">
          <ipxact:name>core16_pf2_expansion_base_address_register_hwtcl</ipxact:name>
          <ipxact:displayName>Expansion ROM Size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar0_type_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar0_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar0_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar0_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar1_type_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar1_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar1_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar1_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar2_type_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar2_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar2_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar2_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar3_type_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar3_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar3_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar3_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar4_type_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar4_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar4_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar4_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar5_type_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar5_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_bar5_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf2_sriov_vf_bar5_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar0_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar0_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar0_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar0_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar1_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar1_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar1_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar1_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar2_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar2_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar2_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar2_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar3_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar3_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar3_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar3_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar4_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar4_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar4_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar4_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar5_type_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar5_type_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_bar5_address_width_user_hwtcl" type="string">
          <ipxact:name>core16_pf3_bar5_address_width_user_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_expansion_base_address_register_hwtcl" type="string">
          <ipxact:name>core16_pf3_expansion_base_address_register_hwtcl</ipxact:name>
          <ipxact:displayName>Expansion ROM Size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar0_type_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar0_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar0_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar0_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR0 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar1_type_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar1_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar1_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar1_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR1 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar2_type_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar2_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar2_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar2_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR2 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar3_type_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar3_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar3_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar3_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR3 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar4_type_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar4_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar4_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar4_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR4 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar5_type_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar5_type_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 type</ipxact:displayName>
          <ipxact:value>Disabled</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_bar5_address_width_hwtcl" type="string">
          <ipxact:name>core16_pf3_sriov_vf_bar5_address_width_hwtcl</ipxact:name>
          <ipxact:displayName>BAR5 size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_multi_func_hwtcl" type="int">
          <ipxact:name>core16_enable_multi_func_hwtcl</ipxact:name>
          <ipxact:displayName>Enable multiple physical functions</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_total_pf_count_hwtcl" type="int">
          <ipxact:name>core16_total_pf_count_hwtcl</ipxact:name>
          <ipxact:displayName>Total physical functions (PFs)</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_sriov_hwtcl" type="int">
          <ipxact:name>core16_enable_sriov_hwtcl</ipxact:name>
          <ipxact:displayName>Enable SR-IOV support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_vf_count_hwtcl" type="int">
          <ipxact:name>core16_pf0_vf_count_hwtcl</ipxact:name>
          <ipxact:displayName>Total virtual functions of physical function 0 (PF0 VFs)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_vf_count_hwtcl" type="int">
          <ipxact:name>core16_pf1_vf_count_hwtcl</ipxact:name>
          <ipxact:displayName>Total virtual functions of physical function 1 (PF1 VFs)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_vf_count_hwtcl" type="int">
          <ipxact:name>core16_pf2_vf_count_hwtcl</ipxact:name>
          <ipxact:displayName>Total virtual functions of physical function 2 (PF2 VFs)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_vf_count_hwtcl" type="int">
          <ipxact:name>core16_pf3_vf_count_hwtcl</ipxact:name>
          <ipxact:displayName>Total virtual functions of physical function 3 (PF3 VFs)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cap_ext_tag_supp_user_hwtcl" type="int">
          <ipxact:name>core16_cap_ext_tag_supp_user_hwtcl</ipxact:name>
          <ipxact:displayName>Support Extended Tag Field</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_flr_cap_user_hwtcl" type="int">
          <ipxact:name>core16_flr_cap_user_hwtcl</ipxact:name>
          <ipxact:displayName>Function level reset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cap_port_num_hwtcl" type="int">
          <ipxact:name>core16_cap_port_num_hwtcl</ipxact:name>
          <ipxact:displayName>Link port number (Root Port only)</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cap_slot_clk_config_hwtcl" type="int">
          <ipxact:name>core16_cap_slot_clk_config_hwtcl</ipxact:name>
          <ipxact:displayName>Slot clock configuration</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_msi_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_msi_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF0 enable MSI</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_msi_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_msi_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF1 enable MSI</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_msi_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_msi_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF2 enable MSI</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_msi_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_msi_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF3 enable MSI</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msi_ext_data_cap_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msi_ext_data_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF0 MSI Extended Data Capable</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msi_ext_data_cap_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msi_ext_data_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF1 MSI Extended Data Capable</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msi_ext_data_cap_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msi_ext_data_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF2 MSI Extended Data Capable</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msi_ext_data_cap_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msi_ext_data_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF3 MSI Extended Data Capable</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_msi_64b_addressing_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_msi_64b_addressing_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF0 MSI 64-bit addressing</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_msi_64b_addressing_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_msi_64b_addressing_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF1 MSI 64-bit addressing</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_msi_64b_addressing_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_msi_64b_addressing_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF2 MSI 64-bit addressing</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_msi_64b_addressing_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_msi_64b_addressing_user_hwtcl</ipxact:name>
          <ipxact:displayName>PF3 MSI 64-bit addressing</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msi_multiple_msg_cap_hwtcl" type="string">
          <ipxact:name>core16_pf0_pci_msi_multiple_msg_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF0 number of MSI messages requested</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msi_multiple_msg_cap_hwtcl" type="string">
          <ipxact:name>core16_pf1_pci_msi_multiple_msg_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF1 number of MSI messages requested</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msi_multiple_msg_cap_hwtcl" type="string">
          <ipxact:name>core16_pf2_pci_msi_multiple_msg_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF2 number of MSI messages requested</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msi_multiple_msg_cap_hwtcl" type="string">
          <ipxact:name>core16_pf3_pci_msi_multiple_msg_cap_hwtcl</ipxact:name>
          <ipxact:displayName>PF3 number of MSI messages requested</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_msix_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_msix_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_msix_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_msix_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_msix_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_msix_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_msix_enable_user_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_msix_enable_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msix_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msix_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msix_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msix_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msix_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msix_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msix_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msix_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msix_table_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msix_table_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msix_table_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msix_table_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msix_table_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msix_table_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msix_table_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msix_table_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msix_bir_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msix_bir_hwtcl</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msix_bir_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msix_bir_hwtcl</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msix_bir_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msix_bir_hwtcl</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msix_bir_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msix_bir_hwtcl</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msix_pba_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msix_pba_hwtcl</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msix_pba_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msix_pba_hwtcl</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msix_pba_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msix_pba_hwtcl</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msix_pba_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msix_pba_hwtcl</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msix_pba_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msix_pba_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msix_pba_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msix_pba_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msix_pba_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msix_pba_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msix_pba_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msix_pba_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_msix_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_msix_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>VF table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_msix_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_msix_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>VF table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_msix_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_msix_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>VF table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_msix_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_msix_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>VF table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_exvf_msix_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_exvf_msix_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VF MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_exvf_msix_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_exvf_msix_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VF MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_exvf_msix_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_exvf_msix_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VF MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_exvf_msix_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_exvf_msix_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VF MSI-X</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msix_tablesize_pf0" type="int">
          <ipxact:name>core16_exvf_msix_tablesize_pf0</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msix_tablesize_pf1" type="int">
          <ipxact:name>core16_exvf_msix_tablesize_pf1</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msix_tablesize_pf2" type="int">
          <ipxact:name>core16_exvf_msix_tablesize_pf2</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msix_tablesize_pf3" type="int">
          <ipxact:name>core16_exvf_msix_tablesize_pf3</ipxact:name>
          <ipxact:displayName>Table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_offset_pf0" type="int">
          <ipxact:name>core16_exvf_msixtable_offset_pf0</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_offset_pf1" type="int">
          <ipxact:name>core16_exvf_msixtable_offset_pf1</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_offset_pf2" type="int">
          <ipxact:name>core16_exvf_msixtable_offset_pf2</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_offset_pf3" type="int">
          <ipxact:name>core16_exvf_msixtable_offset_pf3</ipxact:name>
          <ipxact:displayName>Table offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_bir_pf0" type="int">
          <ipxact:name>core16_exvf_msixtable_bir_pf0</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_bir_pf1" type="int">
          <ipxact:name>core16_exvf_msixtable_bir_pf1</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_bir_pf2" type="int">
          <ipxact:name>core16_exvf_msixtable_bir_pf2</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixtable_bir_pf3" type="int">
          <ipxact:name>core16_exvf_msixtable_bir_pf3</ipxact:name>
          <ipxact:displayName>Table BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_offset_pf0" type="int">
          <ipxact:name>core16_exvf_msixpba_offset_pf0</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_offset_pf1" type="int">
          <ipxact:name>core16_exvf_msixpba_offset_pf1</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_offset_pf2" type="int">
          <ipxact:name>core16_exvf_msixpba_offset_pf2</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_offset_pf3" type="int">
          <ipxact:name>core16_exvf_msixpba_offset_pf3</ipxact:name>
          <ipxact:displayName>Pending bit array (PBA) offset</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_bir_pf0" type="int">
          <ipxact:name>core16_exvf_msixpba_bir_pf0</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_bir_pf1" type="int">
          <ipxact:name>core16_exvf_msixpba_bir_pf1</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_bir_pf2" type="int">
          <ipxact:name>core16_exvf_msixpba_bir_pf2</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_exvf_msixpba_bir_pf3" type="int">
          <ipxact:name>core16_exvf_msixpba_bir_pf3</ipxact:name>
          <ipxact:displayName>PBA BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pcie_slot_imp_hwtcl" type="int">
          <ipxact:name>core16_pf0_pcie_slot_imp_hwtcl</ipxact:name>
          <ipxact:displayName>Use Slot Power registers (Root Port only)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pcie_cap_slot_power_limit_scale_hwtcl" type="int">
          <ipxact:name>core16_pf0_pcie_cap_slot_power_limit_scale_hwtcl</ipxact:name>
          <ipxact:displayName>Slot power scale</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pcie_cap_slot_power_limit_value_hwtcl" type="int">
          <ipxact:name>core16_pf0_pcie_cap_slot_power_limit_value_hwtcl</ipxact:name>
          <ipxact:displayName>Slot power limit</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pcie_cap_phy_slot_num_hwtcl" type="int">
          <ipxact:name>core16_pf0_pcie_cap_phy_slot_num_hwtcl</ipxact:name>
          <ipxact:displayName>Slot number</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_user_pcie_cap_ep_l0s_accpt_latency_hwtcl" type="int">
          <ipxact:name>core16_user_pcie_cap_ep_l0s_accpt_latency_hwtcl</ipxact:name>
          <ipxact:displayName>Endpoint L0s acceptable latency</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_user_pcie_cap_ep_l1_accpt_latency_hwtcl" type="int">
          <ipxact:name>core16_user_pcie_cap_ep_l1_accpt_latency_hwtcl</ipxact:name>
          <ipxact:displayName>Endpoint L1 acceptable latency</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_prs_ext_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_prs_ext_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PF0 enable PRS</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_prs_ext_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_prs_ext_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PF1 enable PRS</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_prs_ext_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_prs_ext_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PF2 enable PRS</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_prs_ext_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_prs_ext_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PF3 enable PRS</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_sn_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_sn_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Serial Number Capability</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_sn_ser_num_reg_1_dw_hwtcl" type="longint">
          <ipxact:name>core16_sn_ser_num_reg_1_dw_hwtcl</ipxact:name>
          <ipxact:displayName>Device Serial Number (DW1)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_sn_ser_num_reg_2_dw_hwtcl" type="longint">
          <ipxact:name>core16_sn_ser_num_reg_2_dw_hwtcl</ipxact:name>
          <ipxact:displayName>Device Serial Number (DW2)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_pasid_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_pasid_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PCIE0 PF0 enable PASID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_pasid_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_pasid_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 PF1 enable PASID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_pasid_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_pasid_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 PF2 enable PASID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_pasid_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_pasid_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 PF3 enable PASID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pasid_cap_execute_permission_supported" type="int">
          <ipxact:name>core16_pf0_pasid_cap_execute_permission_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF0 enable Execute Permission Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pasid_cap_execute_permission_supported" type="int">
          <ipxact:name>core16_pf1_pasid_cap_execute_permission_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF1 enable Execute Permission Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pasid_cap_execute_permission_supported" type="int">
          <ipxact:name>core16_pf2_pasid_cap_execute_permission_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF2 enable Execute Permission Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pasid_cap_execute_permission_supported" type="int">
          <ipxact:name>core16_pf3_pasid_cap_execute_permission_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF3 enable Execute Permission Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pasid_cap_max_pasid_width" type="int">
          <ipxact:name>core16_pf0_pasid_cap_max_pasid_width</ipxact:name>
          <ipxact:displayName>PCIe0 PF0 max PASID width</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pasid_cap_max_pasid_width" type="int">
          <ipxact:name>core16_pf1_pasid_cap_max_pasid_width</ipxact:name>
          <ipxact:displayName>PCIe0 PF1 max PASID width</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pasid_cap_max_pasid_width" type="int">
          <ipxact:name>core16_pf2_pasid_cap_max_pasid_width</ipxact:name>
          <ipxact:displayName>PCIe0 PF2 max PASID width</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pasid_cap_max_pasid_width" type="int">
          <ipxact:name>core16_pf3_pasid_cap_max_pasid_width</ipxact:name>
          <ipxact:displayName>PCIe0 PF3 max PASID width</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pasid_cap_privileged_mode_supported" type="int">
          <ipxact:name>core16_pf0_pasid_cap_privileged_mode_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF0 enable Privileged Mode Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pasid_cap_privileged_mode_supported" type="int">
          <ipxact:name>core16_pf1_pasid_cap_privileged_mode_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF1 enable Privileged Mode Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pasid_cap_privileged_mode_supported" type="int">
          <ipxact:name>core16_pf2_pasid_cap_privileged_mode_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF2 enable Privileged Mode Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pasid_cap_privileged_mode_supported" type="int">
          <ipxact:name>core16_pf3_pasid_cap_privileged_mode_supported</ipxact:name>
          <ipxact:displayName>PCIe0 PF3 enable Privileged Mode Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_ltr_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_ltr_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>PCIe0 enable LTR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_ptm_hwtcl" type="int">
          <ipxact:name>core16_virtual_ptm_hwtcl</ipxact:name>
          <ipxact:displayName>Enable PTM</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cfg_ptm_auto_update_period_hwtcl" type="string">
          <ipxact:name>core16_cfg_ptm_auto_update_period_hwtcl</ipxact:name>
          <ipxact:displayName>Period between each automatic update of PTM context (in ms)</ipxact:displayName>
          <ipxact:value>Disable</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_type0_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_type0_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Vendor ID</ipxact:displayName>
          <ipxact:value>4466</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_pci_type0_device_id_hwtcl" type="int">
          <ipxact:name>core16_pf0_pci_type0_device_id_hwtcl</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_revision_id_hwtcl" type="int">
          <ipxact:name>core16_pf0_revision_id_hwtcl</ipxact:name>
          <ipxact:displayName>Revision ID</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_class_code_hwtcl" type="int">
          <ipxact:name>core16_pf0_class_code_hwtcl</ipxact:name>
          <ipxact:displayName>Class code</ipxact:displayName>
          <ipxact:value>16711680</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_subsys_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf0_subsys_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_subsys_dev_id_hwtcl" type="int">
          <ipxact:name>core16_pf0_subsys_dev_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_sriov_vf_device_id" type="int">
          <ipxact:name>core16_pf0_sriov_vf_device_id</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_type0_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_type0_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_pci_type0_device_id_hwtcl" type="int">
          <ipxact:name>core16_pf1_pci_type0_device_id_hwtcl</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_revision_id_hwtcl" type="int">
          <ipxact:name>core16_pf1_revision_id_hwtcl</ipxact:name>
          <ipxact:displayName>Revision ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_class_code_hwtcl" type="int">
          <ipxact:name>core16_pf1_class_code_hwtcl</ipxact:name>
          <ipxact:displayName>Class code</ipxact:displayName>
          <ipxact:value>16711680</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_subsys_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf1_subsys_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_subsys_dev_id_hwtcl" type="int">
          <ipxact:name>core16_pf1_subsys_dev_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_sriov_vf_device_id" type="int">
          <ipxact:name>core16_pf1_sriov_vf_device_id</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_type0_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_type0_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_pci_type0_device_id_hwtcl" type="int">
          <ipxact:name>core16_pf2_pci_type0_device_id_hwtcl</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_revision_id_hwtcl" type="int">
          <ipxact:name>core16_pf2_revision_id_hwtcl</ipxact:name>
          <ipxact:displayName>Revision ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_class_code_hwtcl" type="int">
          <ipxact:name>core16_pf2_class_code_hwtcl</ipxact:name>
          <ipxact:displayName>Class code</ipxact:displayName>
          <ipxact:value>16711680</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_subsys_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf2_subsys_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_subsys_dev_id_hwtcl" type="int">
          <ipxact:name>core16_pf2_subsys_dev_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_sriov_vf_device_id" type="int">
          <ipxact:name>core16_pf2_sriov_vf_device_id</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_type0_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_type0_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_pci_type0_device_id_hwtcl" type="int">
          <ipxact:name>core16_pf3_pci_type0_device_id_hwtcl</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_revision_id_hwtcl" type="int">
          <ipxact:name>core16_pf3_revision_id_hwtcl</ipxact:name>
          <ipxact:displayName>Revision ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_class_code_hwtcl" type="int">
          <ipxact:name>core16_pf3_class_code_hwtcl</ipxact:name>
          <ipxact:displayName>Class code</ipxact:displayName>
          <ipxact:value>16711680</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_subsys_vendor_id_hwtcl" type="int">
          <ipxact:name>core16_pf3_subsys_vendor_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Vendor ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_subsys_dev_id_hwtcl" type="int">
          <ipxact:name>core16_pf3_subsys_dev_id_hwtcl</ipxact:name>
          <ipxact:displayName>Subsystem Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_sriov_vf_device_id" type="int">
          <ipxact:name>core16_pf3_sriov_vf_device_id</ipxact:name>
          <ipxact:displayName>Device ID</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_cvp_user_id_hwtcl" type="int">
          <ipxact:name>core16_cvp_user_id_hwtcl</ipxact:name>
          <ipxact:displayName>User ID register from the Vendor Specific Extended Capability</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_drop_vendor0_msg_hwtcl" type="int">
          <ipxact:name>core16_virtual_drop_vendor0_msg_hwtcl</ipxact:name>
          <ipxact:displayName>Drops Vendor Type0 Messages</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_drop_vendor1_msg_hwtcl" type="int">
          <ipxact:name>core16_virtual_drop_vendor1_msg_hwtcl</ipxact:name>
          <ipxact:displayName>Drops Vendor Type1 Messages</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_vf_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf0_vf_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_vf_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf1_vf_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_vf_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf2_vf_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_vf_ats_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf3_vf_ats_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_ats_exvf_align_request_hwtcl" type="int">
          <ipxact:name>core16_pf0_ats_exvf_align_request_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_ats_exvf_align_request_hwtcl" type="int">
          <ipxact:name>core16_pf1_ats_exvf_align_request_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_ats_exvf_align_request_hwtcl" type="int">
          <ipxact:name>core16_pf2_ats_exvf_align_request_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_ats_exvf_align_request_hwtcl" type="int">
          <ipxact:name>core16_pf3_ats_exvf_align_request_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf0_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_vf_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf0_vf_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf0_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_vf_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf0_vf_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf0_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf0_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_tph_req_cap_st_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf0_tph_req_cap_st_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf0_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_vf_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf0_vf_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf1_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_vf_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf1_vf_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf1_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_vf_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf1_vf_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf1_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf1_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_tph_req_cap_st_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf1_tph_req_cap_st_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf1_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_vf_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf1_vf_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf2_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_vf_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf2_vf_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf2_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_vf_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf2_vf_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf2_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf2_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_tph_req_cap_st_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf2_tph_req_cap_st_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf2_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_vf_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf2_vf_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable TLP Processing Hints (TPH)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf3_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_vf_tph_st_int_mode_hwtcl" type="int">
          <ipxact:name>core16_pf3_vf_tph_st_int_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Interrupt mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf3_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_vf_tph_st_dev_spec_mode_hwtcl" type="int">
          <ipxact:name>core16_pf3_vf_tph_st_dev_spec_mode_hwtcl</ipxact:name>
          <ipxact:displayName>Device Specific mode</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf3_tph_req_cap_st_table_loc_0_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl" type="string">
          <ipxact:name>core16_pf3_tph_req_cap_st_table_loc_1_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table location</ipxact:displayName>
          <ipxact:value>ST table not present</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_tph_req_cap_st_table_size_hwtcl" type="int">
          <ipxact:name>core16_pf3_tph_req_cap_st_table_size_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl" type="int">
          <ipxact:name>core16_pf3_tph_req_cap_st_table_size_vfcomm_cs2_hwtcl</ipxact:name>
          <ipxact:displayName>Steering Tag table size</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_vf_tph_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf3_vf_tph_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Address Translation Services (ATS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf0_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf0_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_vf_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf0_vf_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_acs_cap_peer_to_peer_traffic_supp_hwtcl" type="int">
          <ipxact:name>core16_pf0_acs_cap_peer_to_peer_traffic_supp_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Traffic Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_acs_cap_acs_p2p_egress_control_hwtcl" type="int">
          <ipxact:name>core16_pf0_acs_cap_acs_p2p_egress_control_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Egress Control</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf1_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf1_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_vf_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf1_vf_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_acs_cap_peer_to_peer_traffic_supp_hwtcl" type="int">
          <ipxact:name>core16_pf1_acs_cap_peer_to_peer_traffic_supp_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Traffic Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_acs_cap_acs_p2p_egress_control_hwtcl" type="int">
          <ipxact:name>core16_pf1_acs_cap_acs_p2p_egress_control_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Egress Control</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf2_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf2_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_vf_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf2_vf_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_acs_cap_peer_to_peer_traffic_supp_hwtcl" type="int">
          <ipxact:name>core16_pf2_acs_cap_peer_to_peer_traffic_supp_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Traffic Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_acs_cap_acs_p2p_egress_control_hwtcl" type="int">
          <ipxact:name>core16_pf2_acs_cap_acs_p2p_egress_control_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Egress Control</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_pf3_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_virtual_pf3_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_vf_acs_cap_enable_hwtcl" type="int">
          <ipxact:name>core16_pf3_vf_acs_cap_enable_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Access Control Service (ACS)</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_acs_cap_peer_to_peer_traffic_supp_hwtcl" type="int">
          <ipxact:name>core16_pf3_acs_cap_peer_to_peer_traffic_supp_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Traffic Support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_acs_cap_acs_p2p_egress_control_hwtcl" type="int">
          <ipxact:name>core16_pf3_acs_cap_acs_p2p_egress_control_hwtcl</ipxact:name>
          <ipxact:displayName>Enable ACS P2P Egress Control</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_hip_reconfig_user_hwtcl" type="int">
          <ipxact:name>core16_hip_reconfig_user_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Hard IP Reconfiguration Interface</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_num_of_lanes_4_hwtcl" type="string">
          <ipxact:name>core16_virtual_num_of_lanes_4_hwtcl</ipxact:name>
          <ipxact:displayName>Predetermined number of lanes</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_num_of_lanes_2_hwtcl" type="string">
          <ipxact:name>core16_virtual_num_of_lanes_2_hwtcl</ipxact:name>
          <ipxact:displayName>Predetermined number of lanes</ipxact:displayName>
          <ipxact:value>2</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtual_num_of_lanes_1_hwtcl" type="string">
          <ipxact:name>core16_virtual_num_of_lanes_1_hwtcl</ipxact:name>
          <ipxact:displayName>Predetermined number of lanes</ipxact:displayName>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_int_pin_hwtcl" type="string">
          <ipxact:name>core16_pf0_int_pin_hwtcl</ipxact:name>
          <ipxact:displayName>Set Interrupt Pin for PF0</ipxact:displayName>
          <ipxact:value>NO INT</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_int_pin_hwtcl" type="string">
          <ipxact:name>core16_pf1_int_pin_hwtcl</ipxact:name>
          <ipxact:displayName>Set Interrupt Pin for PF1</ipxact:displayName>
          <ipxact:value>NO INT</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_int_pin_hwtcl" type="string">
          <ipxact:name>core16_pf2_int_pin_hwtcl</ipxact:name>
          <ipxact:displayName>Set Interrupt Pin for PF2</ipxact:displayName>
          <ipxact:value>NO INT</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_int_pin_hwtcl" type="string">
          <ipxact:name>core16_pf3_int_pin_hwtcl</ipxact:name>
          <ipxact:displayName>Set Interrupt Pin for PF3</ipxact:displayName>
          <ipxact:value>NO INT</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_enable_virtio_hwtcl" type="int">
          <ipxact:name>core16_enable_virtio_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO support</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_virtio_start_byte_address_hwtcl" type="int">
          <ipxact:name>core16_virtio_start_byte_address_hwtcl</ipxact:name>
          <ipxact:displayName>core16_virtio_start_byte_address_hwtcl</ipxact:displayName>
          <ipxact:value>72</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF0</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF0</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF1</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF1</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF2</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF2</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF3</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF3</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF0 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF0 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf0vf_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf0vf_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF1 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF1 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf1vf_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf1vf_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF2 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF2 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf2vf_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf2vf_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_capability_present_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_capability_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable VIRTIO Capabilities for PF3 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_device_specific_cap_present_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_device_specific_cap_present_hwtcl</ipxact:name>
          <ipxact:displayName>Enable Device Specific Capability for PF3 VFs</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_cmn_config_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_cmn_config_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_cmn_config_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_cmn_config_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_cmn_config_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_cmn_config_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_notification_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_notification_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_notification_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_notification_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_notification_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_notification_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_notify_off_multiplier_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_notify_off_multiplier_hwtcl</ipxact:name>
          <ipxact:displayName>Notify Off Multiplier</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_isrstatus_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_isrstatus_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_isrstatus_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_isrstatus_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_isrstatus_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_isrstatus_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_devspecific_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_devspecific_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_devspecific_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_devspecific_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_devspecific_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_devspecific_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_pciconfig_access_bar_indicator_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_pciconfig_access_bar_indicator_hwtcl</ipxact:name>
          <ipxact:displayName>BAR indicator</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_pciconfig_access_bar_offset_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_pciconfig_access_bar_offset_hwtcl</ipxact:name>
          <ipxact:displayName>Offset within BAR</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="core16_pf3vf_virtio_pciconfig_access_structure_length_hwtcl" type="int">
          <ipxact:name>core16_pf3vf_virtio_pciconfig_access_structure_length_hwtcl</ipxact:name>
          <ipxact:displayName>Structure length in Bytes</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch0_rx_invert_pin_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch0_rx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch0_rx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch1_rx_invert_pin_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch1_rx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch1_rx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch2_rx_invert_pin_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch2_rx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch2_rx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch3_rx_invert_pin_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch3_rx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch3_rx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="dr_enabled_hwtcl" type="string">
          <ipxact:name>dr_enabled_hwtcl</ipxact:name>
          <ipxact:displayName>dr_enabled_hwtcl</ipxact:displayName>
          <ipxact:value>DR_DISABLED</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_flux_mode_hwtcl" type="string">
          <ipxact:name>ch0_flux_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_flux_mode_hwtcl</ipxact:displayName>
          <ipxact:value>FLUX_MODE_BYPASS</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_flux_mode_hwtcl" type="string">
          <ipxact:name>ch1_flux_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_flux_mode_hwtcl</ipxact:displayName>
          <ipxact:value>FLUX_MODE_BYPASS</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_flux_mode_hwtcl" type="string">
          <ipxact:name>ch2_flux_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_flux_mode_hwtcl</ipxact:displayName>
          <ipxact:value>FLUX_MODE_BYPASS</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_flux_mode_hwtcl" type="string">
          <ipxact:name>ch3_flux_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_flux_mode_hwtcl</ipxact:displayName>
          <ipxact:value>FLUX_MODE_BYPASS</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch0_xcvr_rx_cdrdivout_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch0_xcvr_rx_cdrdivout_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch0_xcvr_rx_cdrdivout_en_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch1_xcvr_rx_cdrdivout_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch1_xcvr_rx_cdrdivout_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch1_xcvr_rx_cdrdivout_en_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch2_xcvr_rx_cdrdivout_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch2_xcvr_rx_cdrdivout_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch2_xcvr_rx_cdrdivout_en_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch3_xcvr_rx_cdrdivout_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch3_xcvr_rx_cdrdivout_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch3_xcvr_rx_cdrdivout_en_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch0_rx_postdiv_clk_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch0_rx_postdiv_clk_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch0_rx_postdiv_clk_en_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch1_rx_postdiv_clk_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch1_rx_postdiv_clk_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch1_rx_postdiv_clk_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch2_rx_postdiv_clk_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch2_rx_postdiv_clk_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch2_rx_postdiv_clk_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch3_rx_postdiv_clk_en_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch3_rx_postdiv_clk_en_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch3_rx_postdiv_clk_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch0_xcvr_tx_user_clk_only_mode_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch0_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch0_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch1_xcvr_tx_user_clk_only_mode_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch1_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch1_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch2_xcvr_tx_user_clk_only_mode_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch2_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch2_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch3_xcvr_tx_user_clk_only_mode_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch3_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch3_xcvr_tx_user_clk_only_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch0_xcvr_rx_force_cdr_ltr_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch0_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch0_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:displayName>
          <ipxact:value>TRUE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch1_xcvr_rx_force_cdr_ltr_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch1_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch1_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:displayName>
          <ipxact:value>TRUE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch2_xcvr_rx_force_cdr_ltr_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch2_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch2_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:displayName>
          <ipxact:value>FALSE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ipfluxtop_uxtop_wrap_ch3_xcvr_rx_force_cdr_ltr_hwtcl" type="string">
          <ipxact:name>ipfluxtop_uxtop_wrap_ch3_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:name>
          <ipxact:displayName>ipfluxtop_uxtop_wrap_ch3_xcvr_rx_force_cdr_ltr_hwtcl</ipxact:displayName>
          <ipxact:value>FALSE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_tx_pll_f_out_hz_hwtcl" type="int">
          <ipxact:name>ch0_tx_pll_f_out_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_tx_pll_f_out_hz_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_tx_pll_f_out_hz_hwtcl" type="int">
          <ipxact:name>ch1_tx_pll_f_out_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_tx_pll_f_out_hz_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_tx_pll_f_out_hz_hwtcl" type="int">
          <ipxact:name>ch2_tx_pll_f_out_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_tx_pll_f_out_hz_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_tx_pll_f_out_hz_hwtcl" type="int">
          <ipxact:name>ch3_tx_pll_f_out_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_tx_pll_f_out_hz_hwtcl</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_cdr_refclk_select_hwtcl" type="string">
          <ipxact:name>ch0_cdr_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_cdr_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_cdr_refclk_select_hwtcl" type="string">
          <ipxact:name>ch1_cdr_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_cdr_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_cdr_refclk_select_hwtcl" type="string">
          <ipxact:name>ch2_cdr_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_cdr_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_cdr_refclk_select_hwtcl" type="string">
          <ipxact:name>ch3_cdr_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_cdr_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_phy_loopback_mode_hwtcl" type="string">
          <ipxact:name>ch0_phy_loopback_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_phy_loopback_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLED</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_phy_loopback_mode_hwtcl" type="string">
          <ipxact:name>ch1_phy_loopback_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_phy_loopback_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLED</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_phy_loopback_mode_hwtcl" type="string">
          <ipxact:name>ch2_phy_loopback_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_phy_loopback_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLED</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_phy_loopback_mode_hwtcl" type="string">
          <ipxact:name>ch3_phy_loopback_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_phy_loopback_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLED</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_xcvr_tx_spread_spectrum_en_hwtcl" type="string">
          <ipxact:name>ch0_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_xcvr_tx_spread_spectrum_en_hwtcl" type="string">
          <ipxact:name>ch1_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_xcvr_tx_spread_spectrum_en_hwtcl" type="string">
          <ipxact:name>ch2_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_xcvr_tx_spread_spectrum_en_hwtcl" type="string">
          <ipxact:name>ch3_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_xcvr_tx_spread_spectrum_en_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_xcvr_cdr_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch0_xcvr_cdr_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_xcvr_cdr_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_xcvr_cdr_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch1_xcvr_cdr_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_xcvr_cdr_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_xcvr_cdr_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch2_xcvr_cdr_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_xcvr_cdr_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_xcvr_cdr_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch3_xcvr_cdr_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_xcvr_cdr_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_tx_pll_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch0_tx_pll_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_tx_pll_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_tx_pll_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch1_tx_pll_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_tx_pll_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_tx_pll_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch2_tx_pll_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_tx_pll_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_tx_pll_f_ref_hz_hwtcl" type="int">
          <ipxact:name>ch3_tx_pll_f_ref_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_tx_pll_f_ref_hz_hwtcl</ipxact:displayName>
          <ipxact:value>100000000</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_xcvr_cdr_f_vco_hz_hwtcl" type="int">
          <ipxact:name>ch0_xcvr_cdr_f_vco_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_xcvr_cdr_f_vco_hz_hwtcl</ipxact:displayName>
          <ipxact:value>1410065408</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_xcvr_cdr_f_vco_hz_hwtcl" type="int">
          <ipxact:name>ch1_xcvr_cdr_f_vco_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_xcvr_cdr_f_vco_hz_hwtcl</ipxact:displayName>
          <ipxact:value>1410065408</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_xcvr_cdr_f_vco_hz_hwtcl" type="int">
          <ipxact:name>ch2_xcvr_cdr_f_vco_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_xcvr_cdr_f_vco_hz_hwtcl</ipxact:displayName>
          <ipxact:value>1410065408</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_xcvr_cdr_f_vco_hz_hwtcl" type="int">
          <ipxact:name>ch3_xcvr_cdr_f_vco_hz_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_xcvr_cdr_f_vco_hz_hwtcl</ipxact:displayName>
          <ipxact:value>1410065408</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_rx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch0_rx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_rx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>12</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_rx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch1_rx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_rx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>12</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_rx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch2_rx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_rx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>12</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_rx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch3_rx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_rx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>12</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_tx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch0_tx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_tx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>52</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_tx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch1_tx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_tx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>137</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_tx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch2_tx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_tx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>73</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_tx_postdiv_clk_divider_hwtcl" type="string">
          <ipxact:name>ch3_tx_postdiv_clk_divider_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_tx_postdiv_clk_divider_hwtcl</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_xcvr_tx_prbs_pattern_hwtcl" type="string">
          <ipxact:name>ch0_xcvr_tx_prbs_pattern_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_xcvr_tx_prbs_pattern_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_xcvr_tx_prbs_pattern_hwtcl" type="string">
          <ipxact:name>ch1_xcvr_tx_prbs_pattern_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_xcvr_tx_prbs_pattern_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_xcvr_tx_prbs_pattern_hwtcl" type="string">
          <ipxact:name>ch2_xcvr_tx_prbs_pattern_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_xcvr_tx_prbs_pattern_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_xcvr_tx_prbs_pattern_hwtcl" type="string">
          <ipxact:name>ch3_xcvr_tx_prbs_pattern_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_xcvr_tx_prbs_pattern_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_xcvr_rx_adaptation_mode_hwtcl" type="string">
          <ipxact:name>ch0_xcvr_rx_adaptation_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_xcvr_rx_adaptation_mode_hwtcl</ipxact:displayName>
          <ipxact:value>UX_NATIVE_ADAPTATION</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_xcvr_rx_adaptation_mode_hwtcl" type="string">
          <ipxact:name>ch1_xcvr_rx_adaptation_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_xcvr_rx_adaptation_mode_hwtcl</ipxact:displayName>
          <ipxact:value>UX_NATIVE_ADAPTATION</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_xcvr_rx_adaptation_mode_hwtcl" type="string">
          <ipxact:name>ch2_xcvr_rx_adaptation_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_xcvr_rx_adaptation_mode_hwtcl</ipxact:displayName>
          <ipxact:value>UX_NATIVE_ADAPTATION</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_xcvr_rx_adaptation_mode_hwtcl" type="string">
          <ipxact:name>ch3_xcvr_rx_adaptation_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_xcvr_rx_adaptation_mode_hwtcl</ipxact:displayName>
          <ipxact:value>UX_NATIVE_ADAPTATION</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_xcvr_rx_width_hwtcl" type="string">
          <ipxact:name>ch0_xcvr_rx_width_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_xcvr_rx_width_hwtcl</ipxact:displayName>
          <ipxact:value>16</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_xcvr_rx_width_hwtcl" type="string">
          <ipxact:name>ch1_xcvr_rx_width_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_xcvr_rx_width_hwtcl</ipxact:displayName>
          <ipxact:value>16</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_xcvr_rx_width_hwtcl" type="string">
          <ipxact:name>ch2_xcvr_rx_width_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_xcvr_rx_width_hwtcl</ipxact:displayName>
          <ipxact:value>16</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_xcvr_rx_width_hwtcl" type="string">
          <ipxact:name>ch3_xcvr_rx_width_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_xcvr_rx_width_hwtcl</ipxact:displayName>
          <ipxact:value>16</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_tx_pll_refclk_select_hwtcl" type="string">
          <ipxact:name>ch0_tx_pll_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_tx_pll_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_tx_pll_refclk_select_hwtcl" type="string">
          <ipxact:name>ch1_tx_pll_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_tx_pll_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_tx_pll_refclk_select_hwtcl" type="string">
          <ipxact:name>ch2_tx_pll_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_tx_pll_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_tx_pll_refclk_select_hwtcl" type="string">
          <ipxact:name>ch3_tx_pll_refclk_select_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_tx_pll_refclk_select_hwtcl</ipxact:displayName>
          <ipxact:value>GLOBAL_REFCLK0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_tx_invert_pin_hwtcl" type="string">
          <ipxact:name>ch0_tx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_tx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_tx_invert_pin_hwtcl" type="string">
          <ipxact:name>ch1_tx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_tx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_tx_invert_pin_hwtcl" type="string">
          <ipxact:name>ch2_tx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_tx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>ENABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_tx_invert_pin_hwtcl" type="string">
          <ipxact:name>ch3_tx_invert_pin_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_tx_invert_pin_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch0_sim_mode_hwtcl" type="string">
          <ipxact:name>ch0_sim_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch0_sim_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch1_sim_mode_hwtcl" type="string">
          <ipxact:name>ch1_sim_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch1_sim_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch2_sim_mode_hwtcl" type="string">
          <ipxact:name>ch2_sim_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch2_sim_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="ch3_sim_mode_hwtcl" type="string">
          <ipxact:name>ch3_sim_mode_hwtcl</ipxact:name>
          <ipxact:displayName>ch3_sim_mode_hwtcl</ipxact:displayName>
          <ipxact:value>DISABLE</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </altera:altera_module_parameters>
    <altera:altera_assignments>
      <ipxact:parameters>
        <ipxact:parameter parameterId="testbench.partner.map.hip_serial" type="string">
          <ipxact:name>testbench.partner.map.hip_serial</ipxact:name>
          <ipxact:value>pcie_tb.hip_serial</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.map.pin_perst_n" type="string">
          <ipxact:name>testbench.partner.map.pin_perst_n</ipxact:name>
          <ipxact:value>pcie_tb.pin_perst</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.class" type="string">
          <ipxact:name>testbench.partner.pcie_tb.class</ipxact:name>
          <ipxact:value>intel_pcie_gts_tbed</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.apps_type_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.apps_type_hwtcl</ipxact:name>
          <ipxact:value>3</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.bfm_drive_interface_clk_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.bfm_drive_interface_clk_hwtcl</ipxact:name>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.bfm_drive_interface_pin_perst_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.bfm_drive_interface_pin_perst_hwtcl</ipxact:name>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.bfm_drive_interface_test_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.bfm_drive_interface_test_hwtcl</ipxact:name>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.example_design_mode_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.example_design_mode_hwtcl</ipxact:name>
          <ipxact:value>PIO</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.gen123_lane_rate_mode_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.gen123_lane_rate_mode_hwtcl</ipxact:name>
          <ipxact:value>Gen4 (16.0 Gbps)</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.generating_ed_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.generating_ed_hwtcl</ipxact:name>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.lane_mask_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.lane_mask_hwtcl</ipxact:name>
          <ipxact:value>x4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.pll_refclk_freq_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.pll_refclk_freq_hwtcl</ipxact:name>
          <ipxact:value>100 MHz</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.port_type_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.port_type_hwtcl</ipxact:name>
          <ipxact:value>Root Port</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.serial_sim_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.serial_sim_hwtcl</ipxact:name>
          <ipxact:value>1</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.silicon_rev_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.silicon_rev_hwtcl</ipxact:name>
          <ipxact:value>10nm8agdrb</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.parameter.top_topology_hwtcl" type="string">
          <ipxact:name>testbench.partner.pcie_tb.parameter.top_topology_hwtcl</ipxact:name>
          <ipxact:value>Gen4 x4 Interface 256 bit</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="testbench.partner.pcie_tb.version" type="string">
          <ipxact:name>testbench.partner.pcie_tb.version</ipxact:name>
          <ipxact:value>1.0.0</ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </altera:altera_assignments>
    <altera:altera_system_parameters>
      <ipxact:parameters>
        <ipxact:parameter parameterId="board" type="string">
          <ipxact:name>board</ipxact:name>
          <ipxact:displayName>Board</ipxact:displayName>
          <ipxact:value>default</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="device" type="string">
          <ipxact:name>device</ipxact:name>
          <ipxact:displayName>Device</ipxact:displayName>
          <ipxact:value>A5ED065BB32AE4SR0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="deviceFamily" type="string">
          <ipxact:name>deviceFamily</ipxact:name>
          <ipxact:displayName>Device family</ipxact:displayName>
          <ipxact:value>Agilex 5</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="deviceSpeedGrade" type="string">
          <ipxact:name>deviceSpeedGrade</ipxact:name>
          <ipxact:displayName>Device Speed Grade</ipxact:displayName>
          <ipxact:value>4</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="generationId" type="int">
          <ipxact:name>generationId</ipxact:name>
          <ipxact:displayName>Generation Id</ipxact:displayName>
          <ipxact:value>0</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="bonusData" type="string">
          <ipxact:name>bonusData</ipxact:name>
          <ipxact:displayName>bonusData</ipxact:displayName>
          <ipxact:value>bonusData 
{
   element $system
   {
      datum _originalDeviceFamily
      {
         value = "Agilex 5";
         type = "String";
      }
   }
   element dut
   {
      datum _sortIndex
      {
         value = "0";
         type = "int";
      }
   }
}
</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="hideFromIPCatalog" type="bit">
          <ipxact:name>hideFromIPCatalog</ipxact:name>
          <ipxact:displayName>Hide from IP Catalog</ipxact:displayName>
          <ipxact:value>false</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="lockedInterfaceDefinition" type="string">
          <ipxact:name>lockedInterfaceDefinition</ipxact:name>
          <ipxact:displayName>lockedInterfaceDefinition</ipxact:displayName>
          <ipxact:value>&lt;boundaryDefinition&gt;
    &lt;interfaces&gt;
        &lt;interface&gt;
            &lt;name&gt;refclk0&lt;/name&gt;
            &lt;type&gt;clock&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;refclk0&lt;/name&gt;
                    &lt;role&gt;clk&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;clockRate&lt;/key&gt;
                        &lt;value&gt;100000000&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;externallyDriven&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;ptfSchematicName&lt;/key&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;i_syspll_c0_clk&lt;/name&gt;
            &lt;type&gt;clock&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;i_syspll_c0_clk&lt;/name&gt;
                    &lt;role&gt;clk&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;clockRate&lt;/key&gt;
                        &lt;value&gt;0&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;externallyDriven&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;ptfSchematicName&lt;/key&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;i_ss_vccl_syspll_locked&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;i_ss_vccl_syspll_locked&lt;/name&gt;
                    &lt;role&gt;o_pll_lock&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;i_flux_clk&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;i_flux_clk&lt;/name&gt;
                    &lt;role&gt;clk&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;hip_serial&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_n_in0&lt;/name&gt;
                    &lt;role&gt;rx_n_in0&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_p_in0&lt;/name&gt;
                    &lt;role&gt;rx_p_in0&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_n_out0&lt;/name&gt;
                    &lt;role&gt;tx_n_out0&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_p_out0&lt;/name&gt;
                    &lt;role&gt;tx_p_out0&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_n_in1&lt;/name&gt;
                    &lt;role&gt;rx_n_in1&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_p_in1&lt;/name&gt;
                    &lt;role&gt;rx_p_in1&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_n_out1&lt;/name&gt;
                    &lt;role&gt;tx_n_out1&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_p_out1&lt;/name&gt;
                    &lt;role&gt;tx_p_out1&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_n_in2&lt;/name&gt;
                    &lt;role&gt;rx_n_in2&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_p_in2&lt;/name&gt;
                    &lt;role&gt;rx_p_in2&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_n_out2&lt;/name&gt;
                    &lt;role&gt;tx_n_out2&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_p_out2&lt;/name&gt;
                    &lt;role&gt;tx_p_out2&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_n_in3&lt;/name&gt;
                    &lt;role&gt;rx_n_in3&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;rx_p_in3&lt;/name&gt;
                    &lt;role&gt;rx_p_in3&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_n_out3&lt;/name&gt;
                    &lt;role&gt;tx_n_out3&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;tx_p_out3&lt;/name&gt;
                    &lt;role&gt;tx_p_out3&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;pin_perst_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;pin_perst_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;1&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;NONE&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;i_gpio_perst0_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;i_gpio_perst0_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;1&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;NONE&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;coreclkout_hip_toapp&lt;/name&gt;
            &lt;type&gt;clock&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;coreclkout_hip_toapp&lt;/name&gt;
                    &lt;role&gt;clk&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedDirectClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;clockRate&lt;/key&gt;
                        &lt;value&gt;350000000&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;clockRateKnown&lt;/key&gt;
                        &lt;value&gt;true&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;externallyDriven&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;ptfSchematicName&lt;/key&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_pin_perst_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_pin_perst_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedDirectReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedResetSinks&lt;/key&gt;
                        &lt;value&gt;none&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;NONE&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_reset_status_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_reset_status_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;coreclkout_hip_toapp&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedDirectReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedResetSinks&lt;/key&gt;
                        &lt;value&gt;none&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;BOTH&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;ninit_done&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;ninit_done&lt;/name&gt;
                    &lt;role&gt;reset&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;NONE&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_axi_st_clk&lt;/name&gt;
            &lt;type&gt;clock&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_axi_st_clk&lt;/name&gt;
                    &lt;role&gt;clk&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;clockRate&lt;/key&gt;
                        &lt;value&gt;0&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;externallyDriven&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;ptfSchematicName&lt;/key&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_axi_lite_clk&lt;/name&gt;
            &lt;type&gt;clock&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_axi_lite_clk&lt;/name&gt;
                    &lt;role&gt;clk&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;clockRate&lt;/key&gt;
                        &lt;value&gt;0&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;externallyDriven&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;ptfSchematicName&lt;/key&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_axi_st_areset_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_axi_st_areset_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;1&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;DEASSERT&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_axi_lite_areset_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_axi_lite_areset_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;1&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_lite_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;DEASSERT&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_subsystem_cold_rst_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_subsystem_cold_rst_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;1&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;NONE&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_subsystem_warm_rst_n&lt;/name&gt;
            &lt;type&gt;reset&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_subsystem_warm_rst_n&lt;/name&gt;
                    &lt;role&gt;reset_n&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;1&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;synchronousEdges&lt;/key&gt;
                        &lt;value&gt;NONE&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_subsystem_cold_rst_ack_n&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_subsystem_cold_rst_ack_n&lt;/name&gt;
                    &lt;role&gt;subsystem_cold_rst_ack_n&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_subsystem_warm_rst_ack_n&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_subsystem_warm_rst_ack_n&lt;/name&gt;
                    &lt;role&gt;subsystem_warm_rst_ack_n&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_subsystem_rst_req&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_subsystem_rst_req&lt;/name&gt;
                    &lt;role&gt;subsystem_rst_req&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_subsystem_rst_rdy&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_subsystem_rst_rdy&lt;/name&gt;
                    &lt;role&gt;subsystem_rst_rdy&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_initiate_warmrst_req&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_initiate_warmrst_req&lt;/name&gt;
                    &lt;role&gt;initiate_warmrst_req&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_initiate_rst_req_rdy&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_initiate_rst_req_rdy&lt;/name&gt;
                    &lt;role&gt;initiate_rst_req_rdy&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_st_rx&lt;/name&gt;
            &lt;type&gt;axi4stream&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_rx_tvalid&lt;/name&gt;
                    &lt;role&gt;tvalid&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_st_rx_tready&lt;/name&gt;
                    &lt;role&gt;tready&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_rx_tdata&lt;/name&gt;
                    &lt;role&gt;tdata&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;256&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_rx_tkeep&lt;/name&gt;
                    &lt;role&gt;tkeep&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;32&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_rx_tlast&lt;/name&gt;
                    &lt;role&gt;tlast&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_st_tx&lt;/name&gt;
            &lt;type&gt;axi4stream&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_st_tx_tvalid&lt;/name&gt;
                    &lt;role&gt;tvalid&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_tx_tready&lt;/name&gt;
                    &lt;role&gt;tready&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_st_tx_tdata&lt;/name&gt;
                    &lt;role&gt;tdata&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;256&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_st_tx_tkeep&lt;/name&gt;
                    &lt;role&gt;tkeep&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;32&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_st_tx_tlast&lt;/name&gt;
                    &lt;role&gt;tlast&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_st_ctrlshadow&lt;/name&gt;
            &lt;type&gt;axi4stream&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_ctrlshadow_tvalid&lt;/name&gt;
                    &lt;role&gt;tvalid&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_ctrlshadow_tdata&lt;/name&gt;
                    &lt;role&gt;tdata&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;40&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_st_txcrdt&lt;/name&gt;
            &lt;type&gt;axi4stream&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_txcrdt_tvalid&lt;/name&gt;
                    &lt;role&gt;tvalid&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_txcrdt_tdata&lt;/name&gt;
                    &lt;role&gt;tdata&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;19&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_st_cplto&lt;/name&gt;
            &lt;type&gt;axi4stream&lt;/type&gt;
            &lt;isStart&gt;true&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_cplto_tvalid&lt;/name&gt;
                    &lt;role&gt;tvalid&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_st_cplto_tdata&lt;/name&gt;
                    &lt;role&gt;tdata&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;30&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_lite_csr&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_awvalid&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_awvalid&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_awready&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_awready&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_awaddr&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_awaddr&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;20&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_wvalid&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_wvalid&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_wready&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_wready&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_wdata&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_wdata&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;32&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_wstrb&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_wstrb&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;4&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_bvalid&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_bvalid&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_bready&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_bready&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_bresp&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_bresp&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;2&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_arvalid&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_arvalid&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_arready&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_arready&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_araddr&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_araddr&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;20&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_rvalid&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_rvalid&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_lite_csr_rready&lt;/name&gt;
                    &lt;role&gt;p0_app_ss_lite_csr_rready&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_rdata&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_rdata&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;32&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_lite_csr_rresp&lt;/name&gt;
                    &lt;role&gt;p0_ss_app_lite_csr_rresp&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;2&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_ss_app_serr&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_serr&lt;/name&gt;
                    &lt;role&gt;ss_app_serr&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_ss_app_dlup&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_dlup&lt;/name&gt;
                    &lt;role&gt;ss_app_dlup&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_ss_app_linkup&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_linkup&lt;/name&gt;
                    &lt;role&gt;ss_app_linkup&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_ss_app_surprise_down_err&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_surprise_down_err&lt;/name&gt;
                    &lt;role&gt;ss_app_surprise_down_err&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;1&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_ss_app_ltssmstate&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_ss_app_ltssmstate&lt;/name&gt;
                    &lt;role&gt;ss_app_ltssmstate&lt;/role&gt;
                    &lt;direction&gt;Output&lt;/direction&gt;
                    &lt;width&gt;6&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_clk&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                        &lt;value&gt;p0_axi_st_areset_n&lt;/value&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
        &lt;interface&gt;
            &lt;name&gt;p0_app_ss_st_rx_tuser_halt&lt;/name&gt;
            &lt;type&gt;conduit&lt;/type&gt;
            &lt;isStart&gt;false&lt;/isStart&gt;
            &lt;ports&gt;
                &lt;port&gt;
                    &lt;name&gt;p0_app_ss_st_rx_tuser_halt&lt;/name&gt;
                    &lt;role&gt;app_ss_st_rx_tuser_halt&lt;/role&gt;
                    &lt;direction&gt;Input&lt;/direction&gt;
                    &lt;width&gt;3&lt;/width&gt;
                    &lt;lowerBound&gt;0&lt;/lowerBound&gt;
                    &lt;vhdlType&gt;STD_LOGIC_VECTOR&lt;/vhdlType&gt;
                    &lt;terminationValue&gt;0&lt;/terminationValue&gt;
                &lt;/port&gt;
            &lt;/ports&gt;
            &lt;assignments&gt;
                &lt;assignmentValueMap/&gt;
            &lt;/assignments&gt;
            &lt;parameters&gt;
                &lt;parameterValueMap&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedClock&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;associatedReset&lt;/key&gt;
                    &lt;/entry&gt;
                    &lt;entry&gt;
                        &lt;key&gt;prSafe&lt;/key&gt;
                        &lt;value&gt;false&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/parameterValueMap&gt;
            &lt;/parameters&gt;
        &lt;/interface&gt;
    &lt;/interfaces&gt;
&lt;/boundaryDefinition&gt;</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="systemInfos" type="string">
          <ipxact:name>systemInfos</ipxact:name>
          <ipxact:displayName>systemInfos</ipxact:displayName>
          <ipxact:value>&lt;systemInfosDefinition&gt;
    &lt;connPtSystemInfos&gt;
        &lt;entry&gt;
            &lt;key&gt;coreclkout_hip_toapp&lt;/key&gt;
            &lt;value&gt;
                &lt;connectionPointName&gt;coreclkout_hip_toapp&lt;/connectionPointName&gt;
                &lt;suppliedSystemInfos/&gt;
                &lt;consumedSystemInfos&gt;
                    &lt;entry&gt;
                        &lt;key&gt;CLOCK_RATE&lt;/key&gt;
                        &lt;value&gt;350000000&lt;/value&gt;
                    &lt;/entry&gt;
                &lt;/consumedSystemInfos&gt;
            &lt;/value&gt;
        &lt;/entry&gt;
    &lt;/connPtSystemInfos&gt;
&lt;/systemInfosDefinition&gt;</ipxact:value>
        </ipxact:parameter>
        <ipxact:parameter parameterId="dflBitArray" type="string">
          <ipxact:name>dflBitArray</ipxact:name>
          <ipxact:displayName>dflBitArray</ipxact:displayName>
          <ipxact:value></ipxact:value>
        </ipxact:parameter>
      </ipxact:parameters>
    </altera:altera_system_parameters>
    <altera:altera_interface_boundary>
      <altera:interface_mapping altera:name="coreclkout_hip_toapp" altera:internal="dut.coreclkout_hip_toapp" altera:type="clock" altera:dir="start">
        <altera:port_mapping altera:name="coreclkout_hip_toapp" altera:internal="coreclkout_hip_toapp"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="hip_serial" altera:internal="dut.hip_serial" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="rx_n_in0" altera:internal="rx_n_in0"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_n_in1" altera:internal="rx_n_in1"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_n_in2" altera:internal="rx_n_in2"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_n_in3" altera:internal="rx_n_in3"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_p_in0" altera:internal="rx_p_in0"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_p_in1" altera:internal="rx_p_in1"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_p_in2" altera:internal="rx_p_in2"></altera:port_mapping>
        <altera:port_mapping altera:name="rx_p_in3" altera:internal="rx_p_in3"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_n_out0" altera:internal="tx_n_out0"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_n_out1" altera:internal="tx_n_out1"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_n_out2" altera:internal="tx_n_out2"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_n_out3" altera:internal="tx_n_out3"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_p_out0" altera:internal="tx_p_out0"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_p_out1" altera:internal="tx_p_out1"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_p_out2" altera:internal="tx_p_out2"></altera:port_mapping>
        <altera:port_mapping altera:name="tx_p_out3" altera:internal="tx_p_out3"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="i_flux_clk" altera:internal="dut.i_flux_clk" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="i_flux_clk" altera:internal="i_flux_clk"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="i_gpio_perst0_n" altera:internal="dut.i_gpio_perst0_n" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="i_gpio_perst0_n" altera:internal="i_gpio_perst0_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="i_ss_vccl_syspll_locked" altera:internal="dut.i_ss_vccl_syspll_locked" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="i_ss_vccl_syspll_locked" altera:internal="i_ss_vccl_syspll_locked"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="i_syspll_c0_clk" altera:internal="dut.i_syspll_c0_clk" altera:type="clock" altera:dir="end">
        <altera:port_mapping altera:name="i_syspll_c0_clk" altera:internal="i_syspll_c0_clk"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="ninit_done" altera:internal="dut.ninit_done" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="ninit_done" altera:internal="ninit_done"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_app_ss_st_rx_tuser_halt" altera:internal="dut.p0_app_ss_st_rx_tuser_halt" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_app_ss_st_rx_tuser_halt" altera:internal="p0_app_ss_st_rx_tuser_halt"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_axi_lite_areset_n" altera:internal="dut.p0_axi_lite_areset_n" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="p0_axi_lite_areset_n" altera:internal="p0_axi_lite_areset_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_axi_lite_clk" altera:internal="dut.p0_axi_lite_clk" altera:type="clock" altera:dir="end">
        <altera:port_mapping altera:name="p0_axi_lite_clk" altera:internal="p0_axi_lite_clk"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_axi_st_areset_n" altera:internal="dut.p0_axi_st_areset_n" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="p0_axi_st_areset_n" altera:internal="p0_axi_st_areset_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_axi_st_clk" altera:internal="dut.p0_axi_st_clk" altera:type="clock" altera:dir="end">
        <altera:port_mapping altera:name="p0_axi_st_clk" altera:internal="p0_axi_st_clk"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_initiate_rst_req_rdy" altera:internal="dut.p0_initiate_rst_req_rdy" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_initiate_rst_req_rdy" altera:internal="p0_initiate_rst_req_rdy"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_initiate_warmrst_req" altera:internal="dut.p0_initiate_warmrst_req" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_initiate_warmrst_req" altera:internal="p0_initiate_warmrst_req"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_lite_csr" altera:internal="dut.p0_lite_csr" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_araddr" altera:internal="p0_app_ss_lite_csr_araddr"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_arvalid" altera:internal="p0_app_ss_lite_csr_arvalid"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_awaddr" altera:internal="p0_app_ss_lite_csr_awaddr"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_awvalid" altera:internal="p0_app_ss_lite_csr_awvalid"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_bready" altera:internal="p0_app_ss_lite_csr_bready"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_rready" altera:internal="p0_app_ss_lite_csr_rready"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_wdata" altera:internal="p0_app_ss_lite_csr_wdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_wstrb" altera:internal="p0_app_ss_lite_csr_wstrb"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_lite_csr_wvalid" altera:internal="p0_app_ss_lite_csr_wvalid"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_arready" altera:internal="p0_ss_app_lite_csr_arready"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_awready" altera:internal="p0_ss_app_lite_csr_awready"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_bresp" altera:internal="p0_ss_app_lite_csr_bresp"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_bvalid" altera:internal="p0_ss_app_lite_csr_bvalid"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_rdata" altera:internal="p0_ss_app_lite_csr_rdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_rresp" altera:internal="p0_ss_app_lite_csr_rresp"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_rvalid" altera:internal="p0_ss_app_lite_csr_rvalid"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_lite_csr_wready" altera:internal="p0_ss_app_lite_csr_wready"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_pin_perst_n" altera:internal="dut.p0_pin_perst_n" altera:type="reset" altera:dir="start">
        <altera:port_mapping altera:name="p0_pin_perst_n" altera:internal="p0_pin_perst_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_reset_status_n" altera:internal="dut.p0_reset_status_n" altera:type="reset" altera:dir="start">
        <altera:port_mapping altera:name="p0_reset_status_n" altera:internal="p0_reset_status_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_ss_app_dlup" altera:internal="dut.p0_ss_app_dlup" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_ss_app_dlup" altera:internal="p0_ss_app_dlup"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_ss_app_linkup" altera:internal="dut.p0_ss_app_linkup" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_ss_app_linkup" altera:internal="p0_ss_app_linkup"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_ss_app_ltssmstate" altera:internal="dut.p0_ss_app_ltssmstate" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_ss_app_ltssmstate" altera:internal="p0_ss_app_ltssmstate"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_ss_app_serr" altera:internal="dut.p0_ss_app_serr" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_ss_app_serr" altera:internal="p0_ss_app_serr"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_ss_app_surprise_down_err" altera:internal="dut.p0_ss_app_surprise_down_err" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_ss_app_surprise_down_err" altera:internal="p0_ss_app_surprise_down_err"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_st_cplto" altera:internal="dut.p0_st_cplto" altera:type="axi4stream" altera:dir="start">
        <altera:port_mapping altera:name="p0_ss_app_st_cplto_tdata" altera:internal="p0_ss_app_st_cplto_tdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_cplto_tvalid" altera:internal="p0_ss_app_st_cplto_tvalid"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_st_ctrlshadow" altera:internal="dut.p0_st_ctrlshadow" altera:type="axi4stream" altera:dir="start">
        <altera:port_mapping altera:name="p0_ss_app_st_ctrlshadow_tdata" altera:internal="p0_ss_app_st_ctrlshadow_tdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_ctrlshadow_tvalid" altera:internal="p0_ss_app_st_ctrlshadow_tvalid"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_st_rx" altera:internal="dut.p0_st_rx" altera:type="axi4stream" altera:dir="start">
        <altera:port_mapping altera:name="p0_app_ss_st_rx_tready" altera:internal="p0_app_ss_st_rx_tready"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_rx_tdata" altera:internal="p0_ss_app_st_rx_tdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_rx_tkeep" altera:internal="p0_ss_app_st_rx_tkeep"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_rx_tlast" altera:internal="p0_ss_app_st_rx_tlast"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_rx_tvalid" altera:internal="p0_ss_app_st_rx_tvalid"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_st_tx" altera:internal="dut.p0_st_tx" altera:type="axi4stream" altera:dir="end">
        <altera:port_mapping altera:name="p0_app_ss_st_tx_tdata" altera:internal="p0_app_ss_st_tx_tdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_st_tx_tkeep" altera:internal="p0_app_ss_st_tx_tkeep"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_st_tx_tlast" altera:internal="p0_app_ss_st_tx_tlast"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_app_ss_st_tx_tvalid" altera:internal="p0_app_ss_st_tx_tvalid"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_tx_tready" altera:internal="p0_ss_app_st_tx_tready"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_st_txcrdt" altera:internal="dut.p0_st_txcrdt" altera:type="axi4stream" altera:dir="start">
        <altera:port_mapping altera:name="p0_ss_app_st_txcrdt_tdata" altera:internal="p0_ss_app_st_txcrdt_tdata"></altera:port_mapping>
        <altera:port_mapping altera:name="p0_ss_app_st_txcrdt_tvalid" altera:internal="p0_ss_app_st_txcrdt_tvalid"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_subsystem_cold_rst_ack_n" altera:internal="dut.p0_subsystem_cold_rst_ack_n" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_subsystem_cold_rst_ack_n" altera:internal="p0_subsystem_cold_rst_ack_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_subsystem_cold_rst_n" altera:internal="dut.p0_subsystem_cold_rst_n" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="p0_subsystem_cold_rst_n" altera:internal="p0_subsystem_cold_rst_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_subsystem_rst_rdy" altera:internal="dut.p0_subsystem_rst_rdy" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_subsystem_rst_rdy" altera:internal="p0_subsystem_rst_rdy"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_subsystem_rst_req" altera:internal="dut.p0_subsystem_rst_req" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_subsystem_rst_req" altera:internal="p0_subsystem_rst_req"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_subsystem_warm_rst_ack_n" altera:internal="dut.p0_subsystem_warm_rst_ack_n" altera:type="conduit" altera:dir="end">
        <altera:port_mapping altera:name="p0_subsystem_warm_rst_ack_n" altera:internal="p0_subsystem_warm_rst_ack_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="p0_subsystem_warm_rst_n" altera:internal="dut.p0_subsystem_warm_rst_n" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="p0_subsystem_warm_rst_n" altera:internal="p0_subsystem_warm_rst_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="pin_perst_n" altera:internal="dut.pin_perst_n" altera:type="reset" altera:dir="end">
        <altera:port_mapping altera:name="pin_perst_n" altera:internal="pin_perst_n"></altera:port_mapping>
      </altera:interface_mapping>
      <altera:interface_mapping altera:name="refclk0" altera:internal="dut.refclk0" altera:type="clock" altera:dir="end">
        <altera:port_mapping altera:name="refclk0" altera:internal="refclk0"></altera:port_mapping>
      </altera:interface_mapping>
    </altera:altera_interface_boundary>
    <altera:altera_has_warnings>false</altera:altera_has_warnings>
    <altera:altera_has_errors>false</altera:altera_has_errors>
  </ipxact:vendorExtensions>
</ipxact:component>