--a_dpfifo ADD_RAM_OUTPUT_REGISTER="ON" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Agilex 5" ENABLE_ECC="FALSE" LPM_NUMWORDS=4 LPM_SHOWAHEAD="OFF" lpm_width=1 lpm_widthu=2 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock data empty full q rreq sclr wreq ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Agilex 5" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 23.4 cbx_altdpram 2023:12:13:21:31:55:SC cbx_altera_counter 2023:12:13:21:31:54:SC cbx_altera_syncram 2023:12:13:21:31:54:SC cbx_altera_syncram_ltm 2023:12:13:21:31:54:SC cbx_altera_syncram_nd_impl 2023:12:13:21:31:59:SC cbx_altsyncram 2023:12:13:21:31:54:SC cbx_fifo_common 2023:12:13:21:31:55:SC cbx_libertymesa 2023:12:13:21:31:55:SC cbx_lpm_add_sub 2023:12:13:21:31:55:SC cbx_lpm_compare 2023:12:13:21:31:59:SC cbx_lpm_counter 2023:12:13:21:31:54:SC cbx_lpm_decode 2023:12:13:21:31:54:SC cbx_lpm_mux 2023:12:13:21:31:59:SC cbx_mgl 2023:12:13:21:32:06:SC cbx_nadder 2023:12:13:21:31:55:SC cbx_scfifo 2023:12:13:21:31:55:SC cbx_stratix 2023:12:13:21:31:59:SC cbx_stratixii 2023:12:13:21:31:59:SC cbx_stratixiii 2023:12:13:21:31:59:SC cbx_stratixv 2023:12:13:21:31:55:SC cbx_util_mgl 2023:12:13:21:31:59:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the Intel FPGA Software License Subscription Agreements 
--  on the Quartus Prime software download page.


FUNCTION altera_counter (clk, enable, reset, sreset, updown)
WITH ( DIRECTION, MODULUS, WIDTH = 6)
RETURNS ( count[WIDTH-1..0], cout);
FUNCTION altera_syncram_24dh (address_a[1..0], address_b[1..0], clock0, clock1, clocken1, data_a[0..0], wren_a)
RETURNS ( q_b[0..0]);
FUNCTION cmpr_df21 (dataa[1..0], datab[1..0])
RETURNS ( aeb);

--synthesis_resources = altera_counter 3 ram_bits (AUTO) 4 reg 8 
SUBDESIGN a_dpfifo_tncu
( 
	aclr	:	input;
	clock	:	input;
	data[0..0]	:	input;
	empty	:	output;
	full	:	output;
	q[0..0]	:	output;
	rreq	:	input;
	sclr	:	input;
	wreq	:	input;
) 
VARIABLE 
	rd_ptr_msb : altera_counter
		WITH (
			DIRECTION = "UP",
			WIDTH = 1
		);
	usedw_counter : altera_counter
		WITH (
			DIRECTION = "UPDOWN",
			WIDTH = 2
		);
	wr_ptr : altera_counter
		WITH (
			DIRECTION = "UP",
			WIDTH = 2
		);
	FIFOram : altera_syncram_24dh;
	empty_dff : dffe;
	full_dff : dffe;
	low_addressa[1..0] : dffe;
	rd_ptr_lsb : dffe;
	usedw_is_0_dff : dffe;
	usedw_is_1_dff : dffe;
	wrreq_delay : dffe;
	almost_full_comparer : cmpr_df21;
	two_comparison : cmpr_df21;
	asynch_read_counter_enable	: WIRE;
	empty_out	: WIRE;
	full_out	: WIRE;
	pulse_ram_output	: WIRE;
	ram_read_address[1..0]	: WIRE;
	rd_ptr[1..0]	: WIRE;
	usedw_is_0	: WIRE;
	usedw_is_1	: WIRE;
	usedw_is_2	: WIRE;
	usedw_will_be_0	: WIRE;
	usedw_will_be_1	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;
	wait_state	: WIRE;

BEGIN 
	rd_ptr_msb.clk = clock;
	rd_ptr_msb.enable = (asynch_read_counter_enable & (! rd_ptr_lsb.q));
	rd_ptr_msb.reset = aclr;
	rd_ptr_msb.sreset = sclr;
	usedw_counter.clk = clock;
	usedw_counter.enable = (valid_wreq $ valid_rreq);
	usedw_counter.reset = aclr;
	usedw_counter.sreset = sclr;
	usedw_counter.updown = valid_wreq;
	wr_ptr.clk = clock;
	wr_ptr.enable = valid_wreq;
	wr_ptr.reset = aclr;
	wr_ptr.sreset = sclr;
	FIFOram.address_a[] = wr_ptr.count[];
	FIFOram.address_b[] = ram_read_address[];
	FIFOram.clock0 = clock;
	FIFOram.clock1 = clock;
	FIFOram.clocken1 = pulse_ram_output;
	FIFOram.data_a[] = data[];
	FIFOram.wren_a = valid_wreq;
	empty_dff.clk = clock;
	empty_dff.clrn = (! aclr);
	empty_dff.d = ((! (usedw_will_be_0 # wait_state)) & (! sclr));
	full_dff.clk = clock;
	full_dff.clrn = (! aclr);
	full_dff.d = ((! sclr) & (((valid_wreq & (! valid_rreq)) & almost_full_comparer.aeb) # (full_dff.q & (! (valid_wreq $ valid_rreq)))));
	low_addressa[].clk = clock;
	low_addressa[].clrn = (! aclr);
	low_addressa[].d = ((! sclr) & ((asynch_read_counter_enable & rd_ptr[]) # ((! asynch_read_counter_enable) & low_addressa[].q)));
	rd_ptr_lsb.clk = clock;
	rd_ptr_lsb.clrn = (! aclr);
	rd_ptr_lsb.d = ((! rd_ptr_lsb.q) & (! sclr));
	rd_ptr_lsb.ena = (asynch_read_counter_enable # sclr);
	usedw_is_0_dff.clk = clock;
	usedw_is_0_dff.clrn = (! aclr);
	usedw_is_0_dff.d = (! usedw_will_be_0);
	usedw_is_1_dff.clk = clock;
	usedw_is_1_dff.clrn = (! aclr);
	usedw_is_1_dff.d = usedw_will_be_1;
	wrreq_delay.clk = clock;
	wrreq_delay.clrn = (! aclr);
	wrreq_delay.d = ((! sclr) & valid_wreq);
	almost_full_comparer.dataa[] = B"11";
	almost_full_comparer.datab[] = usedw_counter.count[];
	two_comparison.dataa[] = usedw_counter.count[];
	two_comparison.datab[] = ( B"1", B"0");
	asynch_read_counter_enable = pulse_ram_output;
	empty = empty_out;
	empty_out = (! empty_dff.q);
	full = full_out;
	full_out = full_dff.q;
	pulse_ram_output = valid_rreq;
	q[] = FIFOram.q_b[];
	ram_read_address[] = (((! asynch_read_counter_enable) & low_addressa[].q) # (asynch_read_counter_enable & rd_ptr[]));
	rd_ptr[] = ( rd_ptr_msb.count[], (! rd_ptr_lsb.q));
	usedw_is_0 = (! usedw_is_0_dff.q);
	usedw_is_1 = usedw_is_1_dff.q;
	usedw_is_2 = two_comparison.aeb;
	usedw_will_be_0 = (! ((! sclr) & (! (((usedw_is_1 & valid_rreq) & (! valid_wreq)) # (usedw_is_0 & (! (valid_wreq $ valid_rreq)))))));
	usedw_will_be_1 = ((! sclr) & ((((usedw_is_2 & (! valid_wreq)) & valid_rreq) # (usedw_is_1 & (! (valid_wreq $ valid_rreq)))) # ((usedw_is_0 & valid_wreq) & (! valid_rreq))));
	valid_rreq = (rreq & (! empty_out));
	valid_wreq = (wreq & (! full_out));
	wait_state = (usedw_will_be_1 & valid_wreq);
END;
--VALID FILE
